// Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20220501

import (
    "context"
    "errors"
    "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
    tchttp "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/http"
    "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
)

const APIVersion = "2022-05-01"

type Client struct {
    common.Client
}

// Deprecated
func NewClientWithSecretId(secretId, secretKey, region string) (client *Client, err error) {
    cpf := profile.NewClientProfile()
    client = &Client{}
    client.Init(region).WithSecretId(secretId, secretKey).WithProfile(cpf)
    return
}

func NewClient(credential common.CredentialIface, region string, clientProfile *profile.ClientProfile) (client *Client, err error) {
    client = &Client{}
    client.Init(region).
        WithCredential(credential).
        WithProfile(clientProfile)
    return
}


func NewAcquireClusterAdminRoleRequest() (request *AcquireClusterAdminRoleRequest) {
    request = &AcquireClusterAdminRoleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AcquireClusterAdminRole")
    
    
    return
}

func NewAcquireClusterAdminRoleResponse() (response *AcquireClusterAdminRoleResponse) {
    response = &AcquireClusterAdminRoleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AcquireClusterAdminRole
// 通过此接口，可以获取集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) AcquireClusterAdminRole(request *AcquireClusterAdminRoleRequest) (response *AcquireClusterAdminRoleResponse, err error) {
    return c.AcquireClusterAdminRoleWithContext(context.Background(), request)
}

// AcquireClusterAdminRole
// 通过此接口，可以获取集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) AcquireClusterAdminRoleWithContext(ctx context.Context, request *AcquireClusterAdminRoleRequest) (response *AcquireClusterAdminRoleResponse, err error) {
    if request == nil {
        request = NewAcquireClusterAdminRoleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AcquireClusterAdminRole require credential")
    }

    request.SetContext(ctx)
    
    response = NewAcquireClusterAdminRoleResponse()
    err = c.Send(request, response)
    return
}

func NewAcquireEKSClusterAdminRoleRequest() (request *AcquireEKSClusterAdminRoleRequest) {
    request = &AcquireEKSClusterAdminRoleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AcquireEKSClusterAdminRole")
    
    
    return
}

func NewAcquireEKSClusterAdminRoleResponse() (response *AcquireEKSClusterAdminRoleResponse) {
    response = &AcquireEKSClusterAdminRoleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AcquireEKSClusterAdminRole
// 通过此接口，可以获取EKS集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) AcquireEKSClusterAdminRole(request *AcquireEKSClusterAdminRoleRequest) (response *AcquireEKSClusterAdminRoleResponse, err error) {
    return c.AcquireEKSClusterAdminRoleWithContext(context.Background(), request)
}

// AcquireEKSClusterAdminRole
// 通过此接口，可以获取EKS集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) AcquireEKSClusterAdminRoleWithContext(ctx context.Context, request *AcquireEKSClusterAdminRoleRequest) (response *AcquireEKSClusterAdminRoleResponse, err error) {
    if request == nil {
        request = NewAcquireEKSClusterAdminRoleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AcquireEKSClusterAdminRole require credential")
    }

    request.SetContext(ctx)
    
    response = NewAcquireEKSClusterAdminRoleResponse()
    err = c.Send(request, response)
    return
}

func NewAcquireTDCCClusterAdminRoleRequest() (request *AcquireTDCCClusterAdminRoleRequest) {
    request = &AcquireTDCCClusterAdminRoleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AcquireTDCCClusterAdminRole")
    
    
    return
}

func NewAcquireTDCCClusterAdminRoleResponse() (response *AcquireTDCCClusterAdminRoleResponse) {
    response = &AcquireTDCCClusterAdminRoleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AcquireTDCCClusterAdminRole
// 通过此接口，可以获取EKS集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) AcquireTDCCClusterAdminRole(request *AcquireTDCCClusterAdminRoleRequest) (response *AcquireTDCCClusterAdminRoleResponse, err error) {
    return c.AcquireTDCCClusterAdminRoleWithContext(context.Background(), request)
}

// AcquireTDCCClusterAdminRole
// 通过此接口，可以获取EKS集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) AcquireTDCCClusterAdminRoleWithContext(ctx context.Context, request *AcquireTDCCClusterAdminRoleRequest) (response *AcquireTDCCClusterAdminRoleResponse, err error) {
    if request == nil {
        request = NewAcquireTDCCClusterAdminRoleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AcquireTDCCClusterAdminRole require credential")
    }

    request.SetContext(ctx)
    
    response = NewAcquireTDCCClusterAdminRoleResponse()
    err = c.Send(request, response)
    return
}

func NewActivateEKSClusterRequest() (request *ActivateEKSClusterRequest) {
    request = &ActivateEKSClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ActivateEKSCluster")
    
    
    return
}

func NewActivateEKSClusterResponse() (response *ActivateEKSClusterResponse) {
    response = &ActivateEKSClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ActivateEKSCluster
// 激活弹性集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  REQUESTLIMITEXCEEDED = "RequestLimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ActivateEKSCluster(request *ActivateEKSClusterRequest) (response *ActivateEKSClusterResponse, err error) {
    return c.ActivateEKSClusterWithContext(context.Background(), request)
}

// ActivateEKSCluster
// 激活弹性集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  REQUESTLIMITEXCEEDED = "RequestLimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ActivateEKSClusterWithContext(ctx context.Context, request *ActivateEKSClusterRequest) (response *ActivateEKSClusterResponse, err error) {
    if request == nil {
        request = NewActivateEKSClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ActivateEKSCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewActivateEKSClusterResponse()
    err = c.Send(request, response)
    return
}

func NewAddAlarmPolicyRequest() (request *AddAlarmPolicyRequest) {
    request = &AddAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddAlarmPolicy")
    
    
    return
}

func NewAddAlarmPolicyResponse() (response *AddAlarmPolicyResponse) {
    response = &AddAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddAlarmPolicy
// 添加告警策略
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) AddAlarmPolicy(request *AddAlarmPolicyRequest) (response *AddAlarmPolicyResponse, err error) {
    return c.AddAlarmPolicyWithContext(context.Background(), request)
}

// AddAlarmPolicy
// 添加告警策略
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) AddAlarmPolicyWithContext(ctx context.Context, request *AddAlarmPolicyRequest) (response *AddAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewAddAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewAddClusterCIDRRequest() (request *AddClusterCIDRRequest) {
    request = &AddClusterCIDRRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddClusterCIDR")
    
    
    return
}

func NewAddClusterCIDRResponse() (response *AddClusterCIDRResponse) {
    response = &AddClusterCIDRResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddClusterCIDR
// 给GR集群增加可用的ClusterCIDR
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERCLUSTER = "InvalidParameter.CidrConflictWithOtherCluster"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCCIDR = "InvalidParameter.CidrConflictWithVpcCidr"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCGLOBALROUTE = "InvalidParameter.CidrConflictWithVpcGlobalRoute"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddClusterCIDR(request *AddClusterCIDRRequest) (response *AddClusterCIDRResponse, err error) {
    return c.AddClusterCIDRWithContext(context.Background(), request)
}

// AddClusterCIDR
// 给GR集群增加可用的ClusterCIDR
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERCLUSTER = "InvalidParameter.CidrConflictWithOtherCluster"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCCIDR = "InvalidParameter.CidrConflictWithVpcCidr"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCGLOBALROUTE = "InvalidParameter.CidrConflictWithVpcGlobalRoute"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddClusterCIDRWithContext(ctx context.Context, request *AddClusterCIDRRequest) (response *AddClusterCIDRResponse, err error) {
    if request == nil {
        request = NewAddClusterCIDRRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddClusterCIDR require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddClusterCIDRResponse()
    err = c.Send(request, response)
    return
}

func NewAddClusterCIDRToCcnRequest() (request *AddClusterCIDRToCcnRequest) {
    request = &AddClusterCIDRToCcnRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddClusterCIDRToCcn")
    
    
    return
}

func NewAddClusterCIDRToCcnResponse() (response *AddClusterCIDRToCcnResponse) {
    response = &AddClusterCIDRToCcnResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddClusterCIDRToCcn
// 添加TKE集群CIDR到云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) AddClusterCIDRToCcn(request *AddClusterCIDRToCcnRequest) (response *AddClusterCIDRToCcnResponse, err error) {
    return c.AddClusterCIDRToCcnWithContext(context.Background(), request)
}

// AddClusterCIDRToCcn
// 添加TKE集群CIDR到云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) AddClusterCIDRToCcnWithContext(ctx context.Context, request *AddClusterCIDRToCcnRequest) (response *AddClusterCIDRToCcnResponse, err error) {
    if request == nil {
        request = NewAddClusterCIDRToCcnRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddClusterCIDRToCcn require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddClusterCIDRToCcnResponse()
    err = c.Send(request, response)
    return
}

func NewAddClusterCIDRToVbcRequest() (request *AddClusterCIDRToVbcRequest) {
    request = &AddClusterCIDRToVbcRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddClusterCIDRToVbc")
    
    
    return
}

func NewAddClusterCIDRToVbcResponse() (response *AddClusterCIDRToVbcResponse) {
    response = &AddClusterCIDRToVbcResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddClusterCIDRToVbc
// 发布tke集群cidr到云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) AddClusterCIDRToVbc(request *AddClusterCIDRToVbcRequest) (response *AddClusterCIDRToVbcResponse, err error) {
    return c.AddClusterCIDRToVbcWithContext(context.Background(), request)
}

// AddClusterCIDRToVbc
// 发布tke集群cidr到云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) AddClusterCIDRToVbcWithContext(ctx context.Context, request *AddClusterCIDRToVbcRequest) (response *AddClusterCIDRToVbcResponse, err error) {
    if request == nil {
        request = NewAddClusterCIDRToVbcRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddClusterCIDRToVbc require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddClusterCIDRToVbcResponse()
    err = c.Send(request, response)
    return
}

func NewAddClusterInstancesRequest() (request *AddClusterInstancesRequest) {
    request = &AddClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddClusterInstances")
    
    
    return
}

func NewAddClusterInstancesResponse() (response *AddClusterInstancesResponse) {
    response = &AddClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddClusterInstances
// 扩展集群节点，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
func (c *Client) AddClusterInstances(request *AddClusterInstancesRequest) (response *AddClusterInstancesResponse, err error) {
    return c.AddClusterInstancesWithContext(context.Background(), request)
}

// AddClusterInstances
// 扩展集群节点，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
func (c *Client) AddClusterInstancesWithContext(ctx context.Context, request *AddClusterInstancesRequest) (response *AddClusterInstancesResponse, err error) {
    if request == nil {
        request = NewAddClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewAddEksAlarmPolicyRequest() (request *AddEksAlarmPolicyRequest) {
    request = &AddEksAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddEksAlarmPolicy")
    
    
    return
}

func NewAddEksAlarmPolicyResponse() (response *AddEksAlarmPolicyResponse) {
    response = &AddEksAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddEksAlarmPolicy
// 添加弹性集群告警策略 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) AddEksAlarmPolicy(request *AddEksAlarmPolicyRequest) (response *AddEksAlarmPolicyResponse, err error) {
    return c.AddEksAlarmPolicyWithContext(context.Background(), request)
}

// AddEksAlarmPolicy
// 添加弹性集群告警策略 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) AddEksAlarmPolicyWithContext(ctx context.Context, request *AddEksAlarmPolicyRequest) (response *AddEksAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewAddEksAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddEksAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddEksAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewAddExistedInstancesRequest() (request *AddExistedInstancesRequest) {
    request = &AddExistedInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddExistedInstances")
    
    
    return
}

func NewAddExistedInstancesResponse() (response *AddExistedInstancesResponse) {
    response = &AddExistedInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddExistedInstances
// 添加已经存在的实例到集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) AddExistedInstances(request *AddExistedInstancesRequest) (response *AddExistedInstancesResponse, err error) {
    return c.AddExistedInstancesWithContext(context.Background(), request)
}

// AddExistedInstances
// 添加已经存在的实例到集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) AddExistedInstancesWithContext(ctx context.Context, request *AddExistedInstancesRequest) (response *AddExistedInstancesResponse, err error) {
    if request == nil {
        request = NewAddExistedInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddExistedInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddExistedInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewAddFromExistedCvmRequest() (request *AddFromExistedCvmRequest) {
    request = &AddFromExistedCvmRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddFromExistedCvm")
    
    
    return
}

func NewAddFromExistedCvmResponse() (response *AddFromExistedCvmResponse) {
    response = &AddFromExistedCvmResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddFromExistedCvm
// 将已经存在云服务器加入集群 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) AddFromExistedCvm(request *AddFromExistedCvmRequest) (response *AddFromExistedCvmResponse, err error) {
    return c.AddFromExistedCvmWithContext(context.Background(), request)
}

// AddFromExistedCvm
// 将已经存在云服务器加入集群 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) AddFromExistedCvmWithContext(ctx context.Context, request *AddFromExistedCvmRequest) (response *AddFromExistedCvmResponse, err error) {
    if request == nil {
        request = NewAddFromExistedCvmRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddFromExistedCvm require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddFromExistedCvmResponse()
    err = c.Send(request, response)
    return
}

func NewAddNodeToNodePoolRequest() (request *AddNodeToNodePoolRequest) {
    request = &AddNodeToNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddNodeToNodePool")
    
    
    return
}

func NewAddNodeToNodePoolResponse() (response *AddNodeToNodePoolResponse) {
    response = &AddNodeToNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddNodeToNodePool
// 将集群内节点移入节点池
//
// 可能返回的错误码:
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddNodeToNodePool(request *AddNodeToNodePoolRequest) (response *AddNodeToNodePoolResponse, err error) {
    return c.AddNodeToNodePoolWithContext(context.Background(), request)
}

// AddNodeToNodePool
// 将集群内节点移入节点池
//
// 可能返回的错误码:
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddNodeToNodePoolWithContext(ctx context.Context, request *AddNodeToNodePoolRequest) (response *AddNodeToNodePoolResponse, err error) {
    if request == nil {
        request = NewAddNodeToNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddNodeToNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddNodeToNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewAddTkeEdgeAlarmPolicyRequest() (request *AddTkeEdgeAlarmPolicyRequest) {
    request = &AddTkeEdgeAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddTkeEdgeAlarmPolicy")
    
    
    return
}

func NewAddTkeEdgeAlarmPolicyResponse() (response *AddTkeEdgeAlarmPolicyResponse) {
    response = &AddTkeEdgeAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddTkeEdgeAlarmPolicy
// 添加边缘集群告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) AddTkeEdgeAlarmPolicy(request *AddTkeEdgeAlarmPolicyRequest) (response *AddTkeEdgeAlarmPolicyResponse, err error) {
    return c.AddTkeEdgeAlarmPolicyWithContext(context.Background(), request)
}

// AddTkeEdgeAlarmPolicy
// 添加边缘集群告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) AddTkeEdgeAlarmPolicyWithContext(ctx context.Context, request *AddTkeEdgeAlarmPolicyRequest) (response *AddTkeEdgeAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewAddTkeEdgeAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddTkeEdgeAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddTkeEdgeAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewAddVpcCniSubnetsRequest() (request *AddVpcCniSubnetsRequest) {
    request = &AddVpcCniSubnetsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "AddVpcCniSubnets")
    
    
    return
}

func NewAddVpcCniSubnetsResponse() (response *AddVpcCniSubnetsResponse) {
    response = &AddVpcCniSubnetsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// AddVpcCniSubnets
// 针对VPC-CNI模式的集群，增加集群容器网络可使用的子网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddVpcCniSubnets(request *AddVpcCniSubnetsRequest) (response *AddVpcCniSubnetsResponse, err error) {
    return c.AddVpcCniSubnetsWithContext(context.Background(), request)
}

// AddVpcCniSubnets
// 针对VPC-CNI模式的集群，增加集群容器网络可使用的子网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) AddVpcCniSubnetsWithContext(ctx context.Context, request *AddVpcCniSubnetsRequest) (response *AddVpcCniSubnetsResponse, err error) {
    if request == nil {
        request = NewAddVpcCniSubnetsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("AddVpcCniSubnets require credential")
    }

    request.SetContext(ctx)
    
    response = NewAddVpcCniSubnetsResponse()
    err = c.Send(request, response)
    return
}

func NewCancelClusterReleaseRequest() (request *CancelClusterReleaseRequest) {
    request = &CancelClusterReleaseRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CancelClusterRelease")
    
    
    return
}

func NewCancelClusterReleaseResponse() (response *CancelClusterReleaseResponse) {
    response = &CancelClusterReleaseResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CancelClusterRelease
// 在应用市场中取消安装失败的应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CancelClusterRelease(request *CancelClusterReleaseRequest) (response *CancelClusterReleaseResponse, err error) {
    return c.CancelClusterReleaseWithContext(context.Background(), request)
}

// CancelClusterRelease
// 在应用市场中取消安装失败的应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CancelClusterReleaseWithContext(ctx context.Context, request *CancelClusterReleaseRequest) (response *CancelClusterReleaseResponse, err error) {
    if request == nil {
        request = NewCancelClusterReleaseRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CancelClusterRelease require credential")
    }

    request.SetContext(ctx)
    
    response = NewCancelClusterReleaseResponse()
    err = c.Send(request, response)
    return
}

func NewCheckClusterCIDRRequest() (request *CheckClusterCIDRRequest) {
    request = &CheckClusterCIDRRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckClusterCIDR")
    
    
    return
}

func NewCheckClusterCIDRResponse() (response *CheckClusterCIDRResponse) {
    response = &CheckClusterCIDRResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckClusterCIDR
// 检查集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CIDROUTOFROUTETABLE = "InternalError.CidrOutOfRouteTable"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_INVALIDPRIVATENETWORKCIDR = "InvalidParameter.InvalidPrivateNetworkCIDR"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckClusterCIDR(request *CheckClusterCIDRRequest) (response *CheckClusterCIDRResponse, err error) {
    return c.CheckClusterCIDRWithContext(context.Background(), request)
}

// CheckClusterCIDR
// 检查集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CIDROUTOFROUTETABLE = "InternalError.CidrOutOfRouteTable"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_INVALIDPRIVATENETWORKCIDR = "InvalidParameter.InvalidPrivateNetworkCIDR"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckClusterCIDRWithContext(ctx context.Context, request *CheckClusterCIDRRequest) (response *CheckClusterCIDRResponse, err error) {
    if request == nil {
        request = NewCheckClusterCIDRRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckClusterCIDR require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckClusterCIDRResponse()
    err = c.Send(request, response)
    return
}

func NewCheckClusterHostNameRequest() (request *CheckClusterHostNameRequest) {
    request = &CheckClusterHostNameRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckClusterHostName")
    
    
    return
}

func NewCheckClusterHostNameResponse() (response *CheckClusterHostNameResponse) {
    response = &CheckClusterHostNameResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckClusterHostName
// 检查集群节点主机名称，判断节点主机名称是否符合规则，是否可以加入集群。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) CheckClusterHostName(request *CheckClusterHostNameRequest) (response *CheckClusterHostNameResponse, err error) {
    return c.CheckClusterHostNameWithContext(context.Background(), request)
}

// CheckClusterHostName
// 检查集群节点主机名称，判断节点主机名称是否符合规则，是否可以加入集群。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) CheckClusterHostNameWithContext(ctx context.Context, request *CheckClusterHostNameRequest) (response *CheckClusterHostNameResponse, err error) {
    if request == nil {
        request = NewCheckClusterHostNameRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckClusterHostName require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckClusterHostNameResponse()
    err = c.Send(request, response)
    return
}

func NewCheckClusterImageRequest() (request *CheckClusterImageRequest) {
    request = &CheckClusterImageRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckClusterImage")
    
    
    return
}

func NewCheckClusterImageResponse() (response *CheckClusterImageResponse) {
    response = &CheckClusterImageResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckClusterImage
// 检查镜像是否支持设置为集群镜像
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CheckClusterImage(request *CheckClusterImageRequest) (response *CheckClusterImageResponse, err error) {
    return c.CheckClusterImageWithContext(context.Background(), request)
}

// CheckClusterImage
// 检查镜像是否支持设置为集群镜像
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CheckClusterImageWithContext(ctx context.Context, request *CheckClusterImageRequest) (response *CheckClusterImageResponse, err error) {
    if request == nil {
        request = NewCheckClusterImageRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckClusterImage require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckClusterImageResponse()
    err = c.Send(request, response)
    return
}

func NewCheckClusterRuntimeConfigRequest() (request *CheckClusterRuntimeConfigRequest) {
    request = &CheckClusterRuntimeConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckClusterRuntimeConfig")
    
    
    return
}

func NewCheckClusterRuntimeConfigResponse() (response *CheckClusterRuntimeConfigResponse) {
    response = &CheckClusterRuntimeConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckClusterRuntimeConfig
// 检查集群运行时配置是否兼容目标K8S版本
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETERVALUE = "InvalidParameterValue"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckClusterRuntimeConfig(request *CheckClusterRuntimeConfigRequest) (response *CheckClusterRuntimeConfigResponse, err error) {
    return c.CheckClusterRuntimeConfigWithContext(context.Background(), request)
}

// CheckClusterRuntimeConfig
// 检查集群运行时配置是否兼容目标K8S版本
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETERVALUE = "InvalidParameterValue"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckClusterRuntimeConfigWithContext(ctx context.Context, request *CheckClusterRuntimeConfigRequest) (response *CheckClusterRuntimeConfigResponse, err error) {
    if request == nil {
        request = NewCheckClusterRuntimeConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckClusterRuntimeConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckClusterRuntimeConfigResponse()
    err = c.Send(request, response)
    return
}

func NewCheckEdgeClusterCIDRRequest() (request *CheckEdgeClusterCIDRRequest) {
    request = &CheckEdgeClusterCIDRRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckEdgeClusterCIDR")
    
    
    return
}

func NewCheckEdgeClusterCIDRResponse() (response *CheckEdgeClusterCIDRResponse) {
    response = &CheckEdgeClusterCIDRResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckEdgeClusterCIDR
// 检查边缘计算集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckEdgeClusterCIDR(request *CheckEdgeClusterCIDRRequest) (response *CheckEdgeClusterCIDRResponse, err error) {
    return c.CheckEdgeClusterCIDRWithContext(context.Background(), request)
}

// CheckEdgeClusterCIDR
// 检查边缘计算集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CheckEdgeClusterCIDRWithContext(ctx context.Context, request *CheckEdgeClusterCIDRRequest) (response *CheckEdgeClusterCIDRResponse, err error) {
    if request == nil {
        request = NewCheckEdgeClusterCIDRRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckEdgeClusterCIDR require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckEdgeClusterCIDRResponse()
    err = c.Send(request, response)
    return
}

func NewCheckEksClusterCIDRRequest() (request *CheckEksClusterCIDRRequest) {
    request = &CheckEksClusterCIDRRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckEksClusterCIDR")
    
    
    return
}

func NewCheckEksClusterCIDRResponse() (response *CheckEksClusterCIDRResponse) {
    response = &CheckEksClusterCIDRResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckEksClusterCIDR
// 检查弹性集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckEksClusterCIDR(request *CheckEksClusterCIDRRequest) (response *CheckEksClusterCIDRResponse, err error) {
    return c.CheckEksClusterCIDRWithContext(context.Background(), request)
}

// CheckEksClusterCIDR
// 检查弹性集群的CIDR是否冲突
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckEksClusterCIDRWithContext(ctx context.Context, request *CheckEksClusterCIDRRequest) (response *CheckEksClusterCIDRResponse, err error) {
    if request == nil {
        request = NewCheckEksClusterCIDRRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckEksClusterCIDR require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckEksClusterCIDRResponse()
    err = c.Send(request, response)
    return
}

func NewCheckInstancesUpgradeAbleRequest() (request *CheckInstancesUpgradeAbleRequest) {
    request = &CheckInstancesUpgradeAbleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckInstancesUpgradeAble")
    
    
    return
}

func NewCheckInstancesUpgradeAbleResponse() (response *CheckInstancesUpgradeAbleResponse) {
    response = &CheckInstancesUpgradeAbleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckInstancesUpgradeAble
// 检查给定节点列表中哪些是可升级的 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) CheckInstancesUpgradeAble(request *CheckInstancesUpgradeAbleRequest) (response *CheckInstancesUpgradeAbleResponse, err error) {
    return c.CheckInstancesUpgradeAbleWithContext(context.Background(), request)
}

// CheckInstancesUpgradeAble
// 检查给定节点列表中哪些是可升级的 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) CheckInstancesUpgradeAbleWithContext(ctx context.Context, request *CheckInstancesUpgradeAbleRequest) (response *CheckInstancesUpgradeAbleResponse, err error) {
    if request == nil {
        request = NewCheckInstancesUpgradeAbleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckInstancesUpgradeAble require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckInstancesUpgradeAbleResponse()
    err = c.Send(request, response)
    return
}

func NewCheckIsPrometheusNewUserRequest() (request *CheckIsPrometheusNewUserRequest) {
    request = &CheckIsPrometheusNewUserRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckIsPrometheusNewUser")
    
    
    return
}

func NewCheckIsPrometheusNewUserResponse() (response *CheckIsPrometheusNewUserResponse) {
    response = &CheckIsPrometheusNewUserResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckIsPrometheusNewUser
// 判断用户是否为云原生监控新用户，即在任何地域下均未创建过监控实例的用户
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckIsPrometheusNewUser(request *CheckIsPrometheusNewUserRequest) (response *CheckIsPrometheusNewUserResponse, err error) {
    return c.CheckIsPrometheusNewUserWithContext(context.Background(), request)
}

// CheckIsPrometheusNewUser
// 判断用户是否为云原生监控新用户，即在任何地域下均未创建过监控实例的用户
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckIsPrometheusNewUserWithContext(ctx context.Context, request *CheckIsPrometheusNewUserRequest) (response *CheckIsPrometheusNewUserResponse, err error) {
    if request == nil {
        request = NewCheckIsPrometheusNewUserRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckIsPrometheusNewUser require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckIsPrometheusNewUserResponse()
    err = c.Send(request, response)
    return
}

func NewCheckLogCollectorHostPathRequest() (request *CheckLogCollectorHostPathRequest) {
    request = &CheckLogCollectorHostPathRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckLogCollectorHostPath")
    
    
    return
}

func NewCheckLogCollectorHostPathResponse() (response *CheckLogCollectorHostPathResponse) {
    response = &CheckLogCollectorHostPathResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckLogCollectorHostPath
// 检查主机路径
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckLogCollectorHostPath(request *CheckLogCollectorHostPathRequest) (response *CheckLogCollectorHostPathResponse, err error) {
    return c.CheckLogCollectorHostPathWithContext(context.Background(), request)
}

// CheckLogCollectorHostPath
// 检查主机路径
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckLogCollectorHostPathWithContext(ctx context.Context, request *CheckLogCollectorHostPathRequest) (response *CheckLogCollectorHostPathResponse, err error) {
    if request == nil {
        request = NewCheckLogCollectorHostPathRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckLogCollectorHostPath require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckLogCollectorHostPathResponse()
    err = c.Send(request, response)
    return
}

func NewCheckLogCollectorNameRequest() (request *CheckLogCollectorNameRequest) {
    request = &CheckLogCollectorNameRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckLogCollectorName")
    
    
    return
}

func NewCheckLogCollectorNameResponse() (response *CheckLogCollectorNameResponse) {
    response = &CheckLogCollectorNameResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckLogCollectorName
// 通过名称检查日志采集规则是否存在
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckLogCollectorName(request *CheckLogCollectorNameRequest) (response *CheckLogCollectorNameResponse, err error) {
    return c.CheckLogCollectorNameWithContext(context.Background(), request)
}

// CheckLogCollectorName
// 通过名称检查日志采集规则是否存在
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CheckLogCollectorNameWithContext(ctx context.Context, request *CheckLogCollectorNameRequest) (response *CheckLogCollectorNameResponse, err error) {
    if request == nil {
        request = NewCheckLogCollectorNameRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckLogCollectorName require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckLogCollectorNameResponse()
    err = c.Send(request, response)
    return
}

func NewCheckPrometheusAlertWebhookRequest() (request *CheckPrometheusAlertWebhookRequest) {
    request = &CheckPrometheusAlertWebhookRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckPrometheusAlertWebhook")
    
    
    return
}

func NewCheckPrometheusAlertWebhookResponse() (response *CheckPrometheusAlertWebhookResponse) {
    response = &CheckPrometheusAlertWebhookResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckPrometheusAlertWebhook
// 测试告警渠道的Webhook
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckPrometheusAlertWebhook(request *CheckPrometheusAlertWebhookRequest) (response *CheckPrometheusAlertWebhookResponse, err error) {
    return c.CheckPrometheusAlertWebhookWithContext(context.Background(), request)
}

// CheckPrometheusAlertWebhook
// 测试告警渠道的Webhook
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckPrometheusAlertWebhookWithContext(ctx context.Context, request *CheckPrometheusAlertWebhookRequest) (response *CheckPrometheusAlertWebhookResponse, err error) {
    if request == nil {
        request = NewCheckPrometheusAlertWebhookRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckPrometheusAlertWebhook require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckPrometheusAlertWebhookResponse()
    err = c.Send(request, response)
    return
}

func NewCheckSubaccountAuthorityRequest() (request *CheckSubaccountAuthorityRequest) {
    request = &CheckSubaccountAuthorityRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckSubaccountAuthority")
    
    
    return
}

func NewCheckSubaccountAuthorityResponse() (response *CheckSubaccountAuthorityResponse) {
    response = &CheckSubaccountAuthorityResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckSubaccountAuthority
// 校验子账户是否拥有操作某资源的权限，该接口类似Kubernetes APIServer的SelfSubjectAccessReview
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  RESOURCENOTFOUND_TKEAPISERVERRESOURCENOTFOUND = "ResourceNotFound.TKEAPIServerResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CheckSubaccountAuthority(request *CheckSubaccountAuthorityRequest) (response *CheckSubaccountAuthorityResponse, err error) {
    return c.CheckSubaccountAuthorityWithContext(context.Background(), request)
}

// CheckSubaccountAuthority
// 校验子账户是否拥有操作某资源的权限，该接口类似Kubernetes APIServer的SelfSubjectAccessReview
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  RESOURCENOTFOUND_TKEAPISERVERRESOURCENOTFOUND = "ResourceNotFound.TKEAPIServerResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CheckSubaccountAuthorityWithContext(ctx context.Context, request *CheckSubaccountAuthorityRequest) (response *CheckSubaccountAuthorityResponse, err error) {
    if request == nil {
        request = NewCheckSubaccountAuthorityRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckSubaccountAuthority require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckSubaccountAuthorityResponse()
    err = c.Send(request, response)
    return
}

func NewCheckUseEksRequest() (request *CheckUseEksRequest) {
    request = &CheckUseEksRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckUseEks")
    
    
    return
}

func NewCheckUseEksResponse() (response *CheckUseEksResponse) {
    response = &CheckUseEksResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckUseEks
// 检查用户是否使用弹性容器服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckUseEks(request *CheckUseEksRequest) (response *CheckUseEksResponse, err error) {
    return c.CheckUseEksWithContext(context.Background(), request)
}

// CheckUseEks
// 检查用户是否使用弹性容器服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckUseEksWithContext(ctx context.Context, request *CheckUseEksRequest) (response *CheckUseEksResponse, err error) {
    if request == nil {
        request = NewCheckUseEksRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckUseEks require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckUseEksResponse()
    err = c.Send(request, response)
    return
}

func NewCheckUseTKERequest() (request *CheckUseTKERequest) {
    request = &CheckUseTKERequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CheckUseTKE")
    
    
    return
}

func NewCheckUseTKEResponse() (response *CheckUseTKEResponse) {
    response = &CheckUseTKEResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CheckUseTKE
// 检查是否是TKE新用户，包括回归用户
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckUseTKE(request *CheckUseTKERequest) (response *CheckUseTKEResponse, err error) {
    return c.CheckUseTKEWithContext(context.Background(), request)
}

// CheckUseTKE
// 检查是否是TKE新用户，包括回归用户
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CheckUseTKEWithContext(ctx context.Context, request *CheckUseTKERequest) (response *CheckUseTKEResponse, err error) {
    if request == nil {
        request = NewCheckUseTKERequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CheckUseTKE require credential")
    }

    request.SetContext(ctx)
    
    response = NewCheckUseTKEResponse()
    err = c.Send(request, response)
    return
}

func NewCreateBootstrapTokenRequest() (request *CreateBootstrapTokenRequest) {
    request = &CreateBootstrapTokenRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateBootstrapToken")
    
    
    return
}

func NewCreateBootstrapTokenResponse() (response *CreateBootstrapTokenResponse) {
    response = &CreateBootstrapTokenResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateBootstrapToken
// 创建BootstrapToken
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_KUBERESOURCEALREADYEXIST = "ResourceInUse.KubeResourceAlreadyExist"
func (c *Client) CreateBootstrapToken(request *CreateBootstrapTokenRequest) (response *CreateBootstrapTokenResponse, err error) {
    return c.CreateBootstrapTokenWithContext(context.Background(), request)
}

// CreateBootstrapToken
// 创建BootstrapToken
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_KUBERESOURCEALREADYEXIST = "ResourceInUse.KubeResourceAlreadyExist"
func (c *Client) CreateBootstrapTokenWithContext(ctx context.Context, request *CreateBootstrapTokenRequest) (response *CreateBootstrapTokenResponse, err error) {
    if request == nil {
        request = NewCreateBootstrapTokenRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateBootstrapToken require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateBootstrapTokenResponse()
    err = c.Send(request, response)
    return
}

func NewCreateCLSLogConfigRequest() (request *CreateCLSLogConfigRequest) {
    request = &CreateCLSLogConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateCLSLogConfig")
    
    
    return
}

func NewCreateCLSLogConfigResponse() (response *CreateCLSLogConfigResponse) {
    response = &CreateCLSLogConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateCLSLogConfig
// 创建日志采集配置
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreateCLSLogConfig(request *CreateCLSLogConfigRequest) (response *CreateCLSLogConfigResponse, err error) {
    return c.CreateCLSLogConfigWithContext(context.Background(), request)
}

// CreateCLSLogConfig
// 创建日志采集配置
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreateCLSLogConfigWithContext(ctx context.Context, request *CreateCLSLogConfigRequest) (response *CreateCLSLogConfigResponse, err error) {
    if request == nil {
        request = NewCreateCLSLogConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateCLSLogConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateCLSLogConfigResponse()
    err = c.Send(request, response)
    return
}

func NewCreateCloudRunHPARequest() (request *CreateCloudRunHPARequest) {
    request = &CreateCloudRunHPARequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateCloudRunHPA")
    
    
    return
}

func NewCreateCloudRunHPAResponse() (response *CreateCloudRunHPAResponse) {
    response = &CreateCloudRunHPAResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateCloudRunHPA
// 创建cloudrun伸缩组。
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateCloudRunHPA(request *CreateCloudRunHPARequest) (response *CreateCloudRunHPAResponse, err error) {
    return c.CreateCloudRunHPAWithContext(context.Background(), request)
}

// CreateCloudRunHPA
// 创建cloudrun伸缩组。
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateCloudRunHPAWithContext(ctx context.Context, request *CreateCloudRunHPARequest) (response *CreateCloudRunHPAResponse, err error) {
    if request == nil {
        request = NewCreateCloudRunHPARequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateCloudRunHPA require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateCloudRunHPAResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterRequest() (request *CreateClusterRequest) {
    request = &CreateClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateCluster")
    
    
    return
}

func NewCreateClusterResponse() (response *CreateClusterResponse) {
    response = &CreateClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateCluster
// 创建集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNUMBERNOTMATCH = "InternalError.CvmNumberNotMatch"
//  INTERNALERROR_CVMSTATUS = "InternalError.CvmStatus"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAUSGLIMIT = "InternalError.QuotaUSGLimit"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERCLUSTER = "InvalidParameter.CidrConflictWithOtherCluster"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCCIDR = "InvalidParameter.CidrConflictWithVpcCidr"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCGLOBALROUTE = "InvalidParameter.CidrConflictWithVpcGlobalRoute"
//  INVALIDPARAMETER_CIDRINVALID = "InvalidParameter.CidrInvalid"
//  INVALIDPARAMETER_INVALIDPRIVATENETWORKCIDR = "InvalidParameter.InvalidPrivateNetworkCIDR"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateCluster(request *CreateClusterRequest) (response *CreateClusterResponse, err error) {
    return c.CreateClusterWithContext(context.Background(), request)
}

// CreateCluster
// 创建集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNUMBERNOTMATCH = "InternalError.CvmNumberNotMatch"
//  INTERNALERROR_CVMSTATUS = "InternalError.CvmStatus"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAUSGLIMIT = "InternalError.QuotaUSGLimit"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRMASKSIZEOUTOFRANGE = "InvalidParameter.CIDRMaskSizeOutOfRange"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERCLUSTER = "InvalidParameter.CidrConflictWithOtherCluster"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCCIDR = "InvalidParameter.CidrConflictWithVpcCidr"
//  INVALIDPARAMETER_CIDRCONFLICTWITHVPCGLOBALROUTE = "InvalidParameter.CidrConflictWithVpcGlobalRoute"
//  INVALIDPARAMETER_CIDRINVALID = "InvalidParameter.CidrInvalid"
//  INVALIDPARAMETER_INVALIDPRIVATENETWORKCIDR = "InvalidParameter.InvalidPrivateNetworkCIDR"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateClusterWithContext(ctx context.Context, request *CreateClusterRequest) (response *CreateClusterResponse, err error) {
    if request == nil {
        request = NewCreateClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterAsGroupRequest() (request *CreateClusterAsGroupRequest) {
    request = &CreateClusterAsGroupRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterAsGroup")
    
    
    return
}

func NewCreateClusterAsGroupResponse() (response *CreateClusterAsGroupResponse) {
    response = &CreateClusterAsGroupResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterAsGroup
// 为已经存在的集群创建伸缩组
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterAsGroup(request *CreateClusterAsGroupRequest) (response *CreateClusterAsGroupResponse, err error) {
    return c.CreateClusterAsGroupWithContext(context.Background(), request)
}

// CreateClusterAsGroup
// 为已经存在的集群创建伸缩组
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterAsGroupWithContext(ctx context.Context, request *CreateClusterAsGroupRequest) (response *CreateClusterAsGroupResponse, err error) {
    if request == nil {
        request = NewCreateClusterAsGroupRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterAsGroup require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterAsGroupResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterEndpointRequest() (request *CreateClusterEndpointRequest) {
    request = &CreateClusterEndpointRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterEndpoint")
    
    
    return
}

func NewCreateClusterEndpointResponse() (response *CreateClusterEndpointResponse) {
    response = &CreateClusterEndpointResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterEndpoint
// 创建集群访问端口(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_EMPTYCLUSTERNOTSUPPORT = "InternalError.EmptyClusterNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterEndpoint(request *CreateClusterEndpointRequest) (response *CreateClusterEndpointResponse, err error) {
    return c.CreateClusterEndpointWithContext(context.Background(), request)
}

// CreateClusterEndpoint
// 创建集群访问端口(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_EMPTYCLUSTERNOTSUPPORT = "InternalError.EmptyClusterNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterEndpointWithContext(ctx context.Context, request *CreateClusterEndpointRequest) (response *CreateClusterEndpointResponse, err error) {
    if request == nil {
        request = NewCreateClusterEndpointRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterEndpoint require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterEndpointResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterEndpointVipRequest() (request *CreateClusterEndpointVipRequest) {
    request = &CreateClusterEndpointVipRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterEndpointVip")
    
    
    return
}

func NewCreateClusterEndpointVipResponse() (response *CreateClusterEndpointVipResponse) {
    response = &CreateClusterEndpointVipResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterEndpointVip
// 创建托管集群外网访问端口（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterEndpointVip(request *CreateClusterEndpointVipRequest) (response *CreateClusterEndpointVipResponse, err error) {
    return c.CreateClusterEndpointVipWithContext(context.Background(), request)
}

// CreateClusterEndpointVip
// 创建托管集群外网访问端口（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterEndpointVipWithContext(ctx context.Context, request *CreateClusterEndpointVipRequest) (response *CreateClusterEndpointVipResponse, err error) {
    if request == nil {
        request = NewCreateClusterEndpointVipRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterEndpointVip require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterEndpointVipResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterInstancesRequest() (request *CreateClusterInstancesRequest) {
    request = &CreateClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterInstances")
    
    
    return
}

func NewCreateClusterInstancesResponse() (response *CreateClusterInstancesResponse) {
    response = &CreateClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterInstances
// 扩展(新建)集群节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterInstances(request *CreateClusterInstancesRequest) (response *CreateClusterInstancesResponse, err error) {
    return c.CreateClusterInstancesWithContext(context.Background(), request)
}

// CreateClusterInstances
// 扩展(新建)集群节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateClusterInstancesWithContext(ctx context.Context, request *CreateClusterInstancesRequest) (response *CreateClusterInstancesResponse, err error) {
    if request == nil {
        request = NewCreateClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterNodePoolRequest() (request *CreateClusterNodePoolRequest) {
    request = &CreateClusterNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterNodePool")
    
    
    return
}

func NewCreateClusterNodePoolResponse() (response *CreateClusterNodePoolResponse) {
    response = &CreateClusterNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterNodePool
// 创建节点池
//
// 可能返回的错误码:
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ASASGNOTEXIST = "ResourceNotFound.AsAsgNotExist"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) CreateClusterNodePool(request *CreateClusterNodePoolRequest) (response *CreateClusterNodePoolResponse, err error) {
    return c.CreateClusterNodePoolWithContext(context.Background(), request)
}

// CreateClusterNodePool
// 创建节点池
//
// 可能返回的错误码:
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ASASGNOTEXIST = "ResourceNotFound.AsAsgNotExist"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) CreateClusterNodePoolWithContext(ctx context.Context, request *CreateClusterNodePoolRequest) (response *CreateClusterNodePoolResponse, err error) {
    if request == nil {
        request = NewCreateClusterNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterNodePoolFromExistingAsgRequest() (request *CreateClusterNodePoolFromExistingAsgRequest) {
    request = &CreateClusterNodePoolFromExistingAsgRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterNodePoolFromExistingAsg")
    
    
    return
}

func NewCreateClusterNodePoolFromExistingAsgResponse() (response *CreateClusterNodePoolFromExistingAsgResponse) {
    response = &CreateClusterNodePoolFromExistingAsgResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterNodePoolFromExistingAsg
// 从伸缩组创建节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateClusterNodePoolFromExistingAsg(request *CreateClusterNodePoolFromExistingAsgRequest) (response *CreateClusterNodePoolFromExistingAsgResponse, err error) {
    return c.CreateClusterNodePoolFromExistingAsgWithContext(context.Background(), request)
}

// CreateClusterNodePoolFromExistingAsg
// 从伸缩组创建节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateClusterNodePoolFromExistingAsgWithContext(ctx context.Context, request *CreateClusterNodePoolFromExistingAsgRequest) (response *CreateClusterNodePoolFromExistingAsgResponse, err error) {
    if request == nil {
        request = NewCreateClusterNodePoolFromExistingAsgRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterNodePoolFromExistingAsg require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterNodePoolFromExistingAsgResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterReleaseRequest() (request *CreateClusterReleaseRequest) {
    request = &CreateClusterReleaseRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterRelease")
    
    
    return
}

func NewCreateClusterReleaseResponse() (response *CreateClusterReleaseResponse) {
    response = &CreateClusterReleaseResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterRelease
// 在应用市场中集群创建应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateClusterRelease(request *CreateClusterReleaseRequest) (response *CreateClusterReleaseResponse, err error) {
    return c.CreateClusterReleaseWithContext(context.Background(), request)
}

// CreateClusterRelease
// 在应用市场中集群创建应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateClusterReleaseWithContext(ctx context.Context, request *CreateClusterReleaseRequest) (response *CreateClusterReleaseResponse, err error) {
    if request == nil {
        request = NewCreateClusterReleaseRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterRelease require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterReleaseResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterRouteRequest() (request *CreateClusterRouteRequest) {
    request = &CreateClusterRouteRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterRoute")
    
    
    return
}

func NewCreateClusterRouteResponse() (response *CreateClusterRouteResponse) {
    response = &CreateClusterRouteResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterRoute
// 创建集群路由
//
// 可能返回的错误码:
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDROUTOFROUTETABLE = "InternalError.CidrOutOfRouteTable"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_GATEWAYALREADYASSOCIATEDCIDR = "InternalError.GatewayAlreadyAssociatedCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ROUTETABLENOTFOUND = "ResourceNotFound.RouteTableNotFound"
func (c *Client) CreateClusterRoute(request *CreateClusterRouteRequest) (response *CreateClusterRouteResponse, err error) {
    return c.CreateClusterRouteWithContext(context.Background(), request)
}

// CreateClusterRoute
// 创建集群路由
//
// 可能返回的错误码:
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDROUTOFROUTETABLE = "InternalError.CidrOutOfRouteTable"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_GATEWAYALREADYASSOCIATEDCIDR = "InternalError.GatewayAlreadyAssociatedCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ROUTETABLENOTFOUND = "ResourceNotFound.RouteTableNotFound"
func (c *Client) CreateClusterRouteWithContext(ctx context.Context, request *CreateClusterRouteRequest) (response *CreateClusterRouteResponse, err error) {
    if request == nil {
        request = NewCreateClusterRouteRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterRoute require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterRouteResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterRouteTableRequest() (request *CreateClusterRouteTableRequest) {
    request = &CreateClusterRouteTableRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterRouteTable")
    
    
    return
}

func NewCreateClusterRouteTableResponse() (response *CreateClusterRouteTableResponse) {
    response = &CreateClusterRouteTableResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterRouteTable
// 创建集群路由表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INTERNALERROR_RESOURCEEXISTALREADY = "InternalError.ResourceExistAlready"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreateClusterRouteTable(request *CreateClusterRouteTableRequest) (response *CreateClusterRouteTableResponse, err error) {
    return c.CreateClusterRouteTableWithContext(context.Background(), request)
}

// CreateClusterRouteTable
// 创建集群路由表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INTERNALERROR_RESOURCEEXISTALREADY = "InternalError.ResourceExistAlready"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CIDRCONFLICTWITHOTHERROUTE = "InvalidParameter.CidrConflictWithOtherRoute"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreateClusterRouteTableWithContext(ctx context.Context, request *CreateClusterRouteTableRequest) (response *CreateClusterRouteTableResponse, err error) {
    if request == nil {
        request = NewCreateClusterRouteTableRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterRouteTable require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterRouteTableResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterVirtualNodeRequest() (request *CreateClusterVirtualNodeRequest) {
    request = &CreateClusterVirtualNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterVirtualNode")
    
    
    return
}

func NewCreateClusterVirtualNodeResponse() (response *CreateClusterVirtualNodeResponse) {
    response = &CreateClusterVirtualNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterVirtualNode
// 创建虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_SUBNETALREADYEXIST = "ResourceInUse.SubnetAlreadyExist"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
//  UNSUPPORTEDOPERATION_NOTSUPPORTINSTALLVIRTUALKUBELET = "UnsupportedOperation.NotSupportInstallVirtualKubelet"
func (c *Client) CreateClusterVirtualNode(request *CreateClusterVirtualNodeRequest) (response *CreateClusterVirtualNodeResponse, err error) {
    return c.CreateClusterVirtualNodeWithContext(context.Background(), request)
}

// CreateClusterVirtualNode
// 创建虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_SUBNETALREADYEXIST = "ResourceInUse.SubnetAlreadyExist"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
//  UNSUPPORTEDOPERATION_NOTSUPPORTINSTALLVIRTUALKUBELET = "UnsupportedOperation.NotSupportInstallVirtualKubelet"
func (c *Client) CreateClusterVirtualNodeWithContext(ctx context.Context, request *CreateClusterVirtualNodeRequest) (response *CreateClusterVirtualNodeResponse, err error) {
    if request == nil {
        request = NewCreateClusterVirtualNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterVirtualNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterVirtualNodeResponse()
    err = c.Send(request, response)
    return
}

func NewCreateClusterVirtualNodePoolRequest() (request *CreateClusterVirtualNodePoolRequest) {
    request = &CreateClusterVirtualNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateClusterVirtualNodePool")
    
    
    return
}

func NewCreateClusterVirtualNodePoolResponse() (response *CreateClusterVirtualNodePoolResponse) {
    response = &CreateClusterVirtualNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateClusterVirtualNodePool
// 创建虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_SUBNETNOTEXIST = "InvalidParameter.SubnetNotExist"
//  RESOURCEINUSE_SUBNETALREADYEXIST = "ResourceInUse.SubnetAlreadyExist"
//  UNSUPPORTEDOPERATION_NOTSUPPORTINSTALLVIRTUALKUBELET = "UnsupportedOperation.NotSupportInstallVirtualKubelet"
func (c *Client) CreateClusterVirtualNodePool(request *CreateClusterVirtualNodePoolRequest) (response *CreateClusterVirtualNodePoolResponse, err error) {
    return c.CreateClusterVirtualNodePoolWithContext(context.Background(), request)
}

// CreateClusterVirtualNodePool
// 创建虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_SUBNETNOTEXIST = "InvalidParameter.SubnetNotExist"
//  RESOURCEINUSE_SUBNETALREADYEXIST = "ResourceInUse.SubnetAlreadyExist"
//  UNSUPPORTEDOPERATION_NOTSUPPORTINSTALLVIRTUALKUBELET = "UnsupportedOperation.NotSupportInstallVirtualKubelet"
func (c *Client) CreateClusterVirtualNodePoolWithContext(ctx context.Context, request *CreateClusterVirtualNodePoolRequest) (response *CreateClusterVirtualNodePoolResponse, err error) {
    if request == nil {
        request = NewCreateClusterVirtualNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateClusterVirtualNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateClusterVirtualNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewCreateECMInstancesRequest() (request *CreateECMInstancesRequest) {
    request = &CreateECMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateECMInstances")
    
    
    return
}

func NewCreateECMInstancesResponse() (response *CreateECMInstancesResponse) {
    response = &CreateECMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateECMInstances
// 创建边缘计算ECM机器
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateECMInstances(request *CreateECMInstancesRequest) (response *CreateECMInstancesResponse, err error) {
    return c.CreateECMInstancesWithContext(context.Background(), request)
}

// CreateECMInstances
// 创建边缘计算ECM机器
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateECMInstancesWithContext(ctx context.Context, request *CreateECMInstancesRequest) (response *CreateECMInstancesResponse, err error) {
    if request == nil {
        request = NewCreateECMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateECMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateECMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEKSClusterRequest() (request *CreateEKSClusterRequest) {
    request = &CreateEKSClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEKSCluster")
    
    
    return
}

func NewCreateEKSClusterResponse() (response *CreateEKSClusterResponse) {
    response = &CreateEKSClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEKSCluster
// 创建弹性集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateEKSCluster(request *CreateEKSClusterRequest) (response *CreateEKSClusterResponse, err error) {
    return c.CreateEKSClusterWithContext(context.Background(), request)
}

// CreateEKSCluster
// 创建弹性集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateEKSClusterWithContext(ctx context.Context, request *CreateEKSClusterRequest) (response *CreateEKSClusterResponse, err error) {
    if request == nil {
        request = NewCreateEKSClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEKSCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEKSClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEKSContainerInstancesRequest() (request *CreateEKSContainerInstancesRequest) {
    request = &CreateEKSContainerInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEKSContainerInstances")
    
    
    return
}

func NewCreateEKSContainerInstancesResponse() (response *CreateEKSContainerInstancesResponse) {
    response = &CreateEKSContainerInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEKSContainerInstances
// 创建容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateEKSContainerInstances(request *CreateEKSContainerInstancesRequest) (response *CreateEKSContainerInstancesResponse, err error) {
    return c.CreateEKSContainerInstancesWithContext(context.Background(), request)
}

// CreateEKSContainerInstances
// 创建容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateEKSContainerInstancesWithContext(ctx context.Context, request *CreateEKSContainerInstancesRequest) (response *CreateEKSContainerInstancesResponse, err error) {
    if request == nil {
        request = NewCreateEKSContainerInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEKSContainerInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEKSContainerInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEKSInstancesRequest() (request *CreateEKSInstancesRequest) {
    request = &CreateEKSInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEKSInstances")
    
    
    return
}

func NewCreateEKSInstancesResponse() (response *CreateEKSInstancesResponse) {
    response = &CreateEKSInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEKSInstances
// 创建弹性容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateEKSInstances(request *CreateEKSInstancesRequest) (response *CreateEKSInstancesResponse, err error) {
    return c.CreateEKSInstancesWithContext(context.Background(), request)
}

// CreateEKSInstances
// 创建弹性容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateEKSInstancesWithContext(ctx context.Context, request *CreateEKSInstancesRequest) (response *CreateEKSInstancesResponse, err error) {
    if request == nil {
        request = NewCreateEKSInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEKSInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEKSInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEdgeCVMInstancesRequest() (request *CreateEdgeCVMInstancesRequest) {
    request = &CreateEdgeCVMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEdgeCVMInstances")
    
    
    return
}

func NewCreateEdgeCVMInstancesResponse() (response *CreateEdgeCVMInstancesResponse) {
    response = &CreateEdgeCVMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEdgeCVMInstances
// 创建边缘容器CVM机器
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateEdgeCVMInstances(request *CreateEdgeCVMInstancesRequest) (response *CreateEdgeCVMInstancesResponse, err error) {
    return c.CreateEdgeCVMInstancesWithContext(context.Background(), request)
}

// CreateEdgeCVMInstances
// 创建边缘容器CVM机器
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateEdgeCVMInstancesWithContext(ctx context.Context, request *CreateEdgeCVMInstancesRequest) (response *CreateEdgeCVMInstancesResponse, err error) {
    if request == nil {
        request = NewCreateEdgeCVMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEdgeCVMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEdgeCVMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEdgeLogConfigRequest() (request *CreateEdgeLogConfigRequest) {
    request = &CreateEdgeLogConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEdgeLogConfig")
    
    
    return
}

func NewCreateEdgeLogConfigResponse() (response *CreateEdgeLogConfigResponse) {
    response = &CreateEdgeLogConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEdgeLogConfig
// 创建边缘集群日志采集配置
//
// 可能返回的错误码:
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreateEdgeLogConfig(request *CreateEdgeLogConfigRequest) (response *CreateEdgeLogConfigResponse, err error) {
    return c.CreateEdgeLogConfigWithContext(context.Background(), request)
}

// CreateEdgeLogConfig
// 创建边缘集群日志采集配置
//
// 可能返回的错误码:
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreateEdgeLogConfigWithContext(ctx context.Context, request *CreateEdgeLogConfigRequest) (response *CreateEdgeLogConfigResponse, err error) {
    if request == nil {
        request = NewCreateEdgeLogConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEdgeLogConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEdgeLogConfigResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEksLogConfigRequest() (request *CreateEksLogConfigRequest) {
    request = &CreateEksLogConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEksLogConfig")
    
    
    return
}

func NewCreateEksLogConfigResponse() (response *CreateEksLogConfigResponse) {
    response = &CreateEksLogConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEksLogConfig
// 为弹性集群创建日志采集配置
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreateEksLogConfig(request *CreateEksLogConfigRequest) (response *CreateEksLogConfigResponse, err error) {
    return c.CreateEksLogConfigWithContext(context.Background(), request)
}

// CreateEksLogConfig
// 为弹性集群创建日志采集配置
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreateEksLogConfigWithContext(ctx context.Context, request *CreateEksLogConfigRequest) (response *CreateEksLogConfigResponse, err error) {
    if request == nil {
        request = NewCreateEksLogConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEksLogConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEksLogConfigResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEtcdInstanceRequest() (request *CreateEtcdInstanceRequest) {
    request = &CreateEtcdInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEtcdInstance")
    
    
    return
}

func NewCreateEtcdInstanceResponse() (response *CreateEtcdInstanceResponse) {
    response = &CreateEtcdInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEtcdInstance
// 创建etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED_QUOTAETCDLIMIT = "LimitExceeded.QuotaEtcdLimit"
func (c *Client) CreateEtcdInstance(request *CreateEtcdInstanceRequest) (response *CreateEtcdInstanceResponse, err error) {
    return c.CreateEtcdInstanceWithContext(context.Background(), request)
}

// CreateEtcdInstance
// 创建etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED_QUOTAETCDLIMIT = "LimitExceeded.QuotaEtcdLimit"
func (c *Client) CreateEtcdInstanceWithContext(ctx context.Context, request *CreateEtcdInstanceRequest) (response *CreateEtcdInstanceResponse, err error) {
    if request == nil {
        request = NewCreateEtcdInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEtcdInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEtcdInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEtcdSnapshotRequest() (request *CreateEtcdSnapshotRequest) {
    request = &CreateEtcdSnapshotRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEtcdSnapshot")
    
    
    return
}

func NewCreateEtcdSnapshotResponse() (response *CreateEtcdSnapshotResponse) {
    response = &CreateEtcdSnapshotResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEtcdSnapshot
// 创建etcd快照
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateEtcdSnapshot(request *CreateEtcdSnapshotRequest) (response *CreateEtcdSnapshotResponse, err error) {
    return c.CreateEtcdSnapshotWithContext(context.Background(), request)
}

// CreateEtcdSnapshot
// 创建etcd快照
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateEtcdSnapshotWithContext(ctx context.Context, request *CreateEtcdSnapshotRequest) (response *CreateEtcdSnapshotResponse, err error) {
    if request == nil {
        request = NewCreateEtcdSnapshotRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEtcdSnapshot require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEtcdSnapshotResponse()
    err = c.Send(request, response)
    return
}

func NewCreateEtcdSnapshotPolicyRequest() (request *CreateEtcdSnapshotPolicyRequest) {
    request = &CreateEtcdSnapshotPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateEtcdSnapshotPolicy")
    
    
    return
}

func NewCreateEtcdSnapshotPolicyResponse() (response *CreateEtcdSnapshotPolicyResponse) {
    response = &CreateEtcdSnapshotPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateEtcdSnapshotPolicy
// 创建etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateEtcdSnapshotPolicy(request *CreateEtcdSnapshotPolicyRequest) (response *CreateEtcdSnapshotPolicyResponse, err error) {
    return c.CreateEtcdSnapshotPolicyWithContext(context.Background(), request)
}

// CreateEtcdSnapshotPolicy
// 创建etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateEtcdSnapshotPolicyWithContext(ctx context.Context, request *CreateEtcdSnapshotPolicyRequest) (response *CreateEtcdSnapshotPolicyResponse, err error) {
    if request == nil {
        request = NewCreateEtcdSnapshotPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateEtcdSnapshotPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateEtcdSnapshotPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewCreateExternalNodePoolRequest() (request *CreateExternalNodePoolRequest) {
    request = &CreateExternalNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateExternalNodePool")
    
    
    return
}

func NewCreateExternalNodePoolResponse() (response *CreateExternalNodePoolResponse) {
    response = &CreateExternalNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateExternalNodePool
// 创建第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CreateExternalNodePool(request *CreateExternalNodePoolRequest) (response *CreateExternalNodePoolResponse, err error) {
    return c.CreateExternalNodePoolWithContext(context.Background(), request)
}

// CreateExternalNodePool
// 创建第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CreateExternalNodePoolWithContext(ctx context.Context, request *CreateExternalNodePoolRequest) (response *CreateExternalNodePoolResponse, err error) {
    if request == nil {
        request = NewCreateExternalNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateExternalNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateExternalNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewCreateHubClusterRequest() (request *CreateHubClusterRequest) {
    request = &CreateHubClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateHubCluster")
    
    
    return
}

func NewCreateHubClusterResponse() (response *CreateHubClusterResponse) {
    response = &CreateHubClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateHubCluster
// 创建Hub集群
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CreateHubCluster(request *CreateHubClusterRequest) (response *CreateHubClusterResponse, err error) {
    return c.CreateHubClusterWithContext(context.Background(), request)
}

// CreateHubCluster
// 创建Hub集群
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) CreateHubClusterWithContext(ctx context.Context, request *CreateHubClusterRequest) (response *CreateHubClusterResponse, err error) {
    if request == nil {
        request = NewCreateHubClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateHubCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateHubClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateImageCacheRequest() (request *CreateImageCacheRequest) {
    request = &CreateImageCacheRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateImageCache")
    
    
    return
}

func NewCreateImageCacheResponse() (response *CreateImageCacheResponse) {
    response = &CreateImageCacheResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateImageCache
// 创建镜像缓存的接口。创建过程中，请勿删除EKSCI实例和云盘，否则镜像缓存将创建失败。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateImageCache(request *CreateImageCacheRequest) (response *CreateImageCacheResponse, err error) {
    return c.CreateImageCacheWithContext(context.Background(), request)
}

// CreateImageCache
// 创建镜像缓存的接口。创建过程中，请勿删除EKSCI实例和云盘，否则镜像缓存将创建失败。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateImageCacheWithContext(ctx context.Context, request *CreateImageCacheRequest) (response *CreateImageCacheResponse, err error) {
    if request == nil {
        request = NewCreateImageCacheRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateImageCache require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateImageCacheResponse()
    err = c.Send(request, response)
    return
}

func NewCreateImageRegistryCredentialRequest() (request *CreateImageRegistryCredentialRequest) {
    request = &CreateImageRegistryCredentialRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateImageRegistryCredential")
    
    
    return
}

func NewCreateImageRegistryCredentialResponse() (response *CreateImageRegistryCredentialResponse) {
    response = &CreateImageRegistryCredentialResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateImageRegistryCredential
// 创建镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateImageRegistryCredential(request *CreateImageRegistryCredentialRequest) (response *CreateImageRegistryCredentialResponse, err error) {
    return c.CreateImageRegistryCredentialWithContext(context.Background(), request)
}

// CreateImageRegistryCredential
// 创建镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateImageRegistryCredentialWithContext(ctx context.Context, request *CreateImageRegistryCredentialRequest) (response *CreateImageRegistryCredentialResponse, err error) {
    if request == nil {
        request = NewCreateImageRegistryCredentialRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateImageRegistryCredential require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateImageRegistryCredentialResponse()
    err = c.Send(request, response)
    return
}

func NewCreateIndependentClusterRequest() (request *CreateIndependentClusterRequest) {
    request = &CreateIndependentClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateIndependentCluster")
    
    
    return
}

func NewCreateIndependentClusterResponse() (response *CreateIndependentClusterResponse) {
    response = &CreateIndependentClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateIndependentCluster
// 创建独立集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateIndependentCluster(request *CreateIndependentClusterRequest) (response *CreateIndependentClusterResponse, err error) {
    return c.CreateIndependentClusterWithContext(context.Background(), request)
}

// CreateIndependentCluster
// 创建独立集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateIndependentClusterWithContext(ctx context.Context, request *CreateIndependentClusterRequest) (response *CreateIndependentClusterResponse, err error) {
    if request == nil {
        request = NewCreateIndependentClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateIndependentCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateIndependentClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateKnativeServiceRequest() (request *CreateKnativeServiceRequest) {
    request = &CreateKnativeServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateKnativeService")
    
    
    return
}

func NewCreateKnativeServiceResponse() (response *CreateKnativeServiceResponse) {
    response = &CreateKnativeServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateKnativeService
// 创建knative服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateKnativeService(request *CreateKnativeServiceRequest) (response *CreateKnativeServiceResponse, err error) {
    return c.CreateKnativeServiceWithContext(context.Background(), request)
}

// CreateKnativeService
// 创建knative服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateKnativeServiceWithContext(ctx context.Context, request *CreateKnativeServiceRequest) (response *CreateKnativeServiceResponse, err error) {
    if request == nil {
        request = NewCreateKnativeServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateKnativeService require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateKnativeServiceResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePodRequest() (request *CreatePodRequest) {
    request = &CreatePodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePod")
    
    
    return
}

func NewCreatePodResponse() (response *CreatePodResponse) {
    response = &CreatePodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePod
// CreatePod 创建pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DFWGETWHITE = "InternalError.DfwGetWhite"
//  INTERNALERROR_INSUFFICIENTBALANCE = "InternalError.InsufficientBalance"
//  INTERNALERROR_NOPAYMENTACCESS = "InternalError.NoPaymentAccess"
//  INTERNALERROR_NOTVERIFIED = "InternalError.NotVerified"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLUSTERPODSLIMIT = "InternalError.QuotaMaxClusterPodsLimit"
//  INTERNALERROR_SUBNETNOAVAILABLEIP = "InternalError.SubnetNoAvailableIp"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINSUFFICIENT_SUBNETNOAVAILABLEIP = "ResourceInsufficient.SubnetNoAvailableIp"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
//  UNSUPPORTEDOPERATION_QUOTAMAXCLUSTERPODSLIMIT = "UnsupportedOperation.QuotaMaxClusterPodsLimit"
func (c *Client) CreatePod(request *CreatePodRequest) (response *CreatePodResponse, err error) {
    return c.CreatePodWithContext(context.Background(), request)
}

// CreatePod
// CreatePod 创建pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DFWGETWHITE = "InternalError.DfwGetWhite"
//  INTERNALERROR_INSUFFICIENTBALANCE = "InternalError.InsufficientBalance"
//  INTERNALERROR_NOPAYMENTACCESS = "InternalError.NoPaymentAccess"
//  INTERNALERROR_NOTVERIFIED = "InternalError.NotVerified"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLUSTERPODSLIMIT = "InternalError.QuotaMaxClusterPodsLimit"
//  INTERNALERROR_SUBNETNOAVAILABLEIP = "InternalError.SubnetNoAvailableIp"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINSUFFICIENT_SUBNETNOAVAILABLEIP = "ResourceInsufficient.SubnetNoAvailableIp"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
//  UNSUPPORTEDOPERATION_QUOTAMAXCLUSTERPODSLIMIT = "UnsupportedOperation.QuotaMaxClusterPodsLimit"
func (c *Client) CreatePodWithContext(ctx context.Context, request *CreatePodRequest) (response *CreatePodResponse, err error) {
    if request == nil {
        request = NewCreatePodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePod require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePodResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusAgentRequest() (request *CreatePrometheusAgentRequest) {
    request = &CreatePrometheusAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusAgent")
    
    
    return
}

func NewCreatePrometheusAgentResponse() (response *CreatePrometheusAgentResponse) {
    response = &CreatePrometheusAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusAgent
// 关联集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusAgent(request *CreatePrometheusAgentRequest) (response *CreatePrometheusAgentResponse, err error) {
    return c.CreatePrometheusAgentWithContext(context.Background(), request)
}

// CreatePrometheusAgent
// 关联集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusAgentWithContext(ctx context.Context, request *CreatePrometheusAgentRequest) (response *CreatePrometheusAgentResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusAgentResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusAlertPolicyRequest() (request *CreatePrometheusAlertPolicyRequest) {
    request = &CreatePrometheusAlertPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusAlertPolicy")
    
    
    return
}

func NewCreatePrometheusAlertPolicyResponse() (response *CreatePrometheusAlertPolicyResponse) {
    response = &CreatePrometheusAlertPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusAlertPolicy
// 创建告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusAlertPolicy(request *CreatePrometheusAlertPolicyRequest) (response *CreatePrometheusAlertPolicyResponse, err error) {
    return c.CreatePrometheusAlertPolicyWithContext(context.Background(), request)
}

// CreatePrometheusAlertPolicy
// 创建告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusAlertPolicyWithContext(ctx context.Context, request *CreatePrometheusAlertPolicyRequest) (response *CreatePrometheusAlertPolicyResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusAlertPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusAlertPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusAlertPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusAlertRuleRequest() (request *CreatePrometheusAlertRuleRequest) {
    request = &CreatePrometheusAlertRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusAlertRule")
    
    
    return
}

func NewCreatePrometheusAlertRuleResponse() (response *CreatePrometheusAlertRuleResponse) {
    response = &CreatePrometheusAlertRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusAlertRule
// 创建告警规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusAlertRule(request *CreatePrometheusAlertRuleRequest) (response *CreatePrometheusAlertRuleResponse, err error) {
    return c.CreatePrometheusAlertRuleWithContext(context.Background(), request)
}

// CreatePrometheusAlertRule
// 创建告警规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusAlertRuleWithContext(ctx context.Context, request *CreatePrometheusAlertRuleRequest) (response *CreatePrometheusAlertRuleResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusAlertRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusAlertRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusAlertRuleResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusClusterAgentRequest() (request *CreatePrometheusClusterAgentRequest) {
    request = &CreatePrometheusClusterAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusClusterAgent")
    
    
    return
}

func NewCreatePrometheusClusterAgentResponse() (response *CreatePrometheusClusterAgentResponse) {
    response = &CreatePrometheusClusterAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusClusterAgent
// 与云监控融合的2.0实例关联集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusClusterAgent(request *CreatePrometheusClusterAgentRequest) (response *CreatePrometheusClusterAgentResponse, err error) {
    return c.CreatePrometheusClusterAgentWithContext(context.Background(), request)
}

// CreatePrometheusClusterAgent
// 与云监控融合的2.0实例关联集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusClusterAgentWithContext(ctx context.Context, request *CreatePrometheusClusterAgentRequest) (response *CreatePrometheusClusterAgentResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusClusterAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusClusterAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusClusterAgentResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusConfigRequest() (request *CreatePrometheusConfigRequest) {
    request = &CreatePrometheusConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusConfig")
    
    
    return
}

func NewCreatePrometheusConfigResponse() (response *CreatePrometheusConfigResponse) {
    response = &CreatePrometheusConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusConfig
// 创建prometheus配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_RESOURCEEXISTALREADY = "ResourceInUse.ResourceExistAlready"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusConfig(request *CreatePrometheusConfigRequest) (response *CreatePrometheusConfigResponse, err error) {
    return c.CreatePrometheusConfigWithContext(context.Background(), request)
}

// CreatePrometheusConfig
// 创建prometheus配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_RESOURCEEXISTALREADY = "ResourceInUse.ResourceExistAlready"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) CreatePrometheusConfigWithContext(ctx context.Context, request *CreatePrometheusConfigRequest) (response *CreatePrometheusConfigResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusConfigResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusDashboardRequest() (request *CreatePrometheusDashboardRequest) {
    request = &CreatePrometheusDashboardRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusDashboard")
    
    
    return
}

func NewCreatePrometheusDashboardResponse() (response *CreatePrometheusDashboardResponse) {
    response = &CreatePrometheusDashboardResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusDashboard
// 创建grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusDashboard(request *CreatePrometheusDashboardRequest) (response *CreatePrometheusDashboardResponse, err error) {
    return c.CreatePrometheusDashboardWithContext(context.Background(), request)
}

// CreatePrometheusDashboard
// 创建grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) CreatePrometheusDashboardWithContext(ctx context.Context, request *CreatePrometheusDashboardRequest) (response *CreatePrometheusDashboardResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusDashboardRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusDashboard require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusDashboardResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusInstanceRequest() (request *CreatePrometheusInstanceRequest) {
    request = &CreatePrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusInstance")
    
    
    return
}

func NewCreatePrometheusInstanceResponse() (response *CreatePrometheusInstanceResponse) {
    response = &CreatePrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusInstance
// 创建托管prometheus实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreatePrometheusInstance(request *CreatePrometheusInstanceRequest) (response *CreatePrometheusInstanceResponse, err error) {
    return c.CreatePrometheusInstanceWithContext(context.Background(), request)
}

// CreatePrometheusInstance
// 创建托管prometheus实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreatePrometheusInstanceWithContext(ctx context.Context, request *CreatePrometheusInstanceRequest) (response *CreatePrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusRecordRuleRequest() (request *CreatePrometheusRecordRuleRequest) {
    request = &CreatePrometheusRecordRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusRecordRule")
    
    
    return
}

func NewCreatePrometheusRecordRuleResponse() (response *CreatePrometheusRecordRuleResponse) {
    response = &CreatePrometheusRecordRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusRecordRule
// 新增prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusRecordRule(request *CreatePrometheusRecordRuleRequest) (response *CreatePrometheusRecordRuleResponse, err error) {
    return c.CreatePrometheusRecordRuleWithContext(context.Background(), request)
}

// CreatePrometheusRecordRule
// 新增prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusRecordRuleWithContext(ctx context.Context, request *CreatePrometheusRecordRuleRequest) (response *CreatePrometheusRecordRuleResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusRecordRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusRecordRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusRecordRuleResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusRecordRuleYamlRequest() (request *CreatePrometheusRecordRuleYamlRequest) {
    request = &CreatePrometheusRecordRuleYamlRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusRecordRuleYaml")
    
    
    return
}

func NewCreatePrometheusRecordRuleYamlResponse() (response *CreatePrometheusRecordRuleYamlResponse) {
    response = &CreatePrometheusRecordRuleYamlResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusRecordRuleYaml
// 以Yaml的方式创建聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreatePrometheusRecordRuleYaml(request *CreatePrometheusRecordRuleYamlRequest) (response *CreatePrometheusRecordRuleYamlResponse, err error) {
    return c.CreatePrometheusRecordRuleYamlWithContext(context.Background(), request)
}

// CreatePrometheusRecordRuleYaml
// 以Yaml的方式创建聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreatePrometheusRecordRuleYamlWithContext(ctx context.Context, request *CreatePrometheusRecordRuleYamlRequest) (response *CreatePrometheusRecordRuleYamlResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusRecordRuleYamlRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusRecordRuleYaml require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusRecordRuleYamlResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusTempRequest() (request *CreatePrometheusTempRequest) {
    request = &CreatePrometheusTempRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusTemp")
    
    
    return
}

func NewCreatePrometheusTempResponse() (response *CreatePrometheusTempResponse) {
    response = &CreatePrometheusTempResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusTemp
// 创建一个云原生Prometheus模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusTemp(request *CreatePrometheusTempRequest) (response *CreatePrometheusTempResponse, err error) {
    return c.CreatePrometheusTempWithContext(context.Background(), request)
}

// CreatePrometheusTemp
// 创建一个云原生Prometheus模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusTempWithContext(ctx context.Context, request *CreatePrometheusTempRequest) (response *CreatePrometheusTempResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusTempRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusTemp require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusTempResponse()
    err = c.Send(request, response)
    return
}

func NewCreatePrometheusTemplateRequest() (request *CreatePrometheusTemplateRequest) {
    request = &CreatePrometheusTemplateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreatePrometheusTemplate")
    
    
    return
}

func NewCreatePrometheusTemplateResponse() (response *CreatePrometheusTemplateResponse) {
    response = &CreatePrometheusTemplateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreatePrometheusTemplate
// 创建一个云原生Prometheus模板实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusTemplate(request *CreatePrometheusTemplateRequest) (response *CreatePrometheusTemplateResponse, err error) {
    return c.CreatePrometheusTemplateWithContext(context.Background(), request)
}

// CreatePrometheusTemplate
// 创建一个云原生Prometheus模板实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) CreatePrometheusTemplateWithContext(ctx context.Context, request *CreatePrometheusTemplateRequest) (response *CreatePrometheusTemplateResponse, err error) {
    if request == nil {
        request = NewCreatePrometheusTemplateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreatePrometheusTemplate require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreatePrometheusTemplateResponse()
    err = c.Send(request, response)
    return
}

func NewCreateSecretRequest() (request *CreateSecretRequest) {
    request = &CreateSecretRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateSecret")
    
    
    return
}

func NewCreateSecretResponse() (response *CreateSecretResponse) {
    response = &CreateSecretResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateSecret
// 无
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) CreateSecret(request *CreateSecretRequest) (response *CreateSecretResponse, err error) {
    return c.CreateSecretWithContext(context.Background(), request)
}

// CreateSecret
// 无
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) CreateSecretWithContext(ctx context.Context, request *CreateSecretRequest) (response *CreateSecretResponse, err error) {
    if request == nil {
        request = NewCreateSecretRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateSecret require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateSecretResponse()
    err = c.Send(request, response)
    return
}

func NewCreateServiceRequest() (request *CreateServiceRequest) {
    request = &CreateServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateService")
    
    
    return
}

func NewCreateServiceResponse() (response *CreateServiceResponse) {
    response = &CreateServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateService
// 创建Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateService(request *CreateServiceRequest) (response *CreateServiceResponse, err error) {
    return c.CreateServiceWithContext(context.Background(), request)
}

// CreateService
// 创建Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateServiceWithContext(ctx context.Context, request *CreateServiceRequest) (response *CreateServiceResponse, err error) {
    if request == nil {
        request = NewCreateServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateService require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateServiceResponse()
    err = c.Send(request, response)
    return
}

func NewCreateTDCCExternalClusterRequest() (request *CreateTDCCExternalClusterRequest) {
    request = &CreateTDCCExternalClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateTDCCExternalCluster")
    
    
    return
}

func NewCreateTDCCExternalClusterResponse() (response *CreateTDCCExternalClusterResponse) {
    response = &CreateTDCCExternalClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateTDCCExternalCluster
// 创建TDCC注册集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateTDCCExternalCluster(request *CreateTDCCExternalClusterRequest) (response *CreateTDCCExternalClusterResponse, err error) {
    return c.CreateTDCCExternalClusterWithContext(context.Background(), request)
}

// CreateTDCCExternalCluster
// 创建TDCC注册集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateTDCCExternalClusterWithContext(ctx context.Context, request *CreateTDCCExternalClusterRequest) (response *CreateTDCCExternalClusterResponse, err error) {
    if request == nil {
        request = NewCreateTDCCExternalClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateTDCCExternalCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateTDCCExternalClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateTDCCHubClusterRequest() (request *CreateTDCCHubClusterRequest) {
    request = &CreateTDCCHubClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateTDCCHubCluster")
    
    
    return
}

func NewCreateTDCCHubClusterResponse() (response *CreateTDCCHubClusterResponse) {
    response = &CreateTDCCHubClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateTDCCHubCluster
// 创建TDCC Hub集群
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateTDCCHubCluster(request *CreateTDCCHubClusterRequest) (response *CreateTDCCHubClusterResponse, err error) {
    return c.CreateTDCCHubClusterWithContext(context.Background(), request)
}

// CreateTDCCHubCluster
// 创建TDCC Hub集群
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) CreateTDCCHubClusterWithContext(ctx context.Context, request *CreateTDCCHubClusterRequest) (response *CreateTDCCHubClusterResponse, err error) {
    if request == nil {
        request = NewCreateTDCCHubClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateTDCCHubCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateTDCCHubClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateTKEClusterRequest() (request *CreateTKEClusterRequest) {
    request = &CreateTKEClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateTKECluster")
    
    
    return
}

func NewCreateTKEClusterResponse() (response *CreateTKEClusterResponse) {
    response = &CreateTKEClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateTKECluster
// 创建TKE集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateTKECluster(request *CreateTKEClusterRequest) (response *CreateTKEClusterResponse, err error) {
    return c.CreateTKEClusterWithContext(context.Background(), request)
}

// CreateTKECluster
// 创建TKE集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERCLUSTER = "InternalError.CidrConflictWithOtherCluster"
//  INTERNALERROR_CIDRCONFLICTWITHOTHERROUTE = "InternalError.CidrConflictWithOtherRoute"
//  INTERNALERROR_CIDRCONFLICTWITHVPCCIDR = "InternalError.CidrConflictWithVpcCidr"
//  INTERNALERROR_CIDRCONFLICTWITHVPCGLOBALROUTE = "InternalError.CidrConflictWithVpcGlobalRoute"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) CreateTKEClusterWithContext(ctx context.Context, request *CreateTKEClusterRequest) (response *CreateTKEClusterResponse, err error) {
    if request == nil {
        request = NewCreateTKEClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateTKECluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateTKEClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateTKEEdgeClusterRequest() (request *CreateTKEEdgeClusterRequest) {
    request = &CreateTKEEdgeClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateTKEEdgeCluster")
    
    
    return
}

func NewCreateTKEEdgeClusterResponse() (response *CreateTKEEdgeClusterResponse) {
    response = &CreateTKEEdgeClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateTKEEdgeCluster
// 创建边缘计算集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateTKEEdgeCluster(request *CreateTKEEdgeClusterRequest) (response *CreateTKEEdgeClusterResponse, err error) {
    return c.CreateTKEEdgeClusterWithContext(context.Background(), request)
}

// CreateTKEEdgeCluster
// 创建边缘计算集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateTKEEdgeClusterWithContext(ctx context.Context, request *CreateTKEEdgeClusterRequest) (response *CreateTKEEdgeClusterResponse, err error) {
    if request == nil {
        request = NewCreateTKEEdgeClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateTKEEdgeCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateTKEEdgeClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateUpdateNodeUnitRequest() (request *CreateUpdateNodeUnitRequest) {
    request = &CreateUpdateNodeUnitRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateUpdateNodeUnit")
    
    
    return
}

func NewCreateUpdateNodeUnitResponse() (response *CreateUpdateNodeUnitResponse) {
    response = &CreateUpdateNodeUnitResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateUpdateNodeUnit
// 创建更新NodeUnit
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateUpdateNodeUnit(request *CreateUpdateNodeUnitRequest) (response *CreateUpdateNodeUnitResponse, err error) {
    return c.CreateUpdateNodeUnitWithContext(context.Background(), request)
}

// CreateUpdateNodeUnit
// 创建更新NodeUnit
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) CreateUpdateNodeUnitWithContext(ctx context.Context, request *CreateUpdateNodeUnitRequest) (response *CreateUpdateNodeUnitResponse, err error) {
    if request == nil {
        request = NewCreateUpdateNodeUnitRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateUpdateNodeUnit require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateUpdateNodeUnitResponse()
    err = c.Send(request, response)
    return
}

func NewCreateVirtualClusterRequest() (request *CreateVirtualClusterRequest) {
    request = &CreateVirtualClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateVirtualCluster")
    
    
    return
}

func NewCreateVirtualClusterResponse() (response *CreateVirtualClusterResponse) {
    response = &CreateVirtualClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateVirtualCluster
// 创建虚拟容器集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateVirtualCluster(request *CreateVirtualClusterRequest) (response *CreateVirtualClusterResponse, err error) {
    return c.CreateVirtualClusterWithContext(context.Background(), request)
}

// CreateVirtualCluster
// 创建虚拟容器集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) CreateVirtualClusterWithContext(ctx context.Context, request *CreateVirtualClusterRequest) (response *CreateVirtualClusterResponse, err error) {
    if request == nil {
        request = NewCreateVirtualClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateVirtualCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateVirtualClusterResponse()
    err = c.Send(request, response)
    return
}

func NewCreateVirtualClusterAddonRequest() (request *CreateVirtualClusterAddonRequest) {
    request = &CreateVirtualClusterAddonRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateVirtualClusterAddon")
    
    
    return
}

func NewCreateVirtualClusterAddonResponse() (response *CreateVirtualClusterAddonResponse) {
    response = &CreateVirtualClusterAddonResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateVirtualClusterAddon
// 创建虚拟集群插件
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
func (c *Client) CreateVirtualClusterAddon(request *CreateVirtualClusterAddonRequest) (response *CreateVirtualClusterAddonResponse, err error) {
    return c.CreateVirtualClusterAddonWithContext(context.Background(), request)
}

// CreateVirtualClusterAddon
// 创建虚拟集群插件
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
func (c *Client) CreateVirtualClusterAddonWithContext(ctx context.Context, request *CreateVirtualClusterAddonRequest) (response *CreateVirtualClusterAddonResponse, err error) {
    if request == nil {
        request = NewCreateVirtualClusterAddonRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateVirtualClusterAddon require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateVirtualClusterAddonResponse()
    err = c.Send(request, response)
    return
}

func NewCreateVirtualServiceRequest() (request *CreateVirtualServiceRequest) {
    request = &CreateVirtualServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "CreateVirtualService")
    
    
    return
}

func NewCreateVirtualServiceResponse() (response *CreateVirtualServiceResponse) {
    response = &CreateVirtualServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// CreateVirtualService
// 创建虚拟服务.
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateVirtualService(request *CreateVirtualServiceRequest) (response *CreateVirtualServiceResponse, err error) {
    return c.CreateVirtualServiceWithContext(context.Background(), request)
}

// CreateVirtualService
// 创建虚拟服务.
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) CreateVirtualServiceWithContext(ctx context.Context, request *CreateVirtualServiceRequest) (response *CreateVirtualServiceResponse, err error) {
    if request == nil {
        request = NewCreateVirtualServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("CreateVirtualService require credential")
    }

    request.SetContext(ctx)
    
    response = NewCreateVirtualServiceResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteAlarmPoliciesRequest() (request *DeleteAlarmPoliciesRequest) {
    request = &DeleteAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteAlarmPolicies")
    
    
    return
}

func NewDeleteAlarmPoliciesResponse() (response *DeleteAlarmPoliciesResponse) {
    response = &DeleteAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteAlarmPolicies
// 删除告警策略，支持批量删除
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
func (c *Client) DeleteAlarmPolicies(request *DeleteAlarmPoliciesRequest) (response *DeleteAlarmPoliciesResponse, err error) {
    return c.DeleteAlarmPoliciesWithContext(context.Background(), request)
}

// DeleteAlarmPolicies
// 删除告警策略，支持批量删除
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
func (c *Client) DeleteAlarmPoliciesWithContext(ctx context.Context, request *DeleteAlarmPoliciesRequest) (response *DeleteAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDeleteAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteBootstrapTokensRequest() (request *DeleteBootstrapTokensRequest) {
    request = &DeleteBootstrapTokensRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteBootstrapTokens")
    
    
    return
}

func NewDeleteBootstrapTokensResponse() (response *DeleteBootstrapTokensResponse) {
    response = &DeleteBootstrapTokensResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteBootstrapTokens
// 删除BootstrapToken
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
func (c *Client) DeleteBootstrapTokens(request *DeleteBootstrapTokensRequest) (response *DeleteBootstrapTokensResponse, err error) {
    return c.DeleteBootstrapTokensWithContext(context.Background(), request)
}

// DeleteBootstrapTokens
// 删除BootstrapToken
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
func (c *Client) DeleteBootstrapTokensWithContext(ctx context.Context, request *DeleteBootstrapTokensRequest) (response *DeleteBootstrapTokensResponse, err error) {
    if request == nil {
        request = NewDeleteBootstrapTokensRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteBootstrapTokens require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteBootstrapTokensResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteCloudRunHPARequest() (request *DeleteCloudRunHPARequest) {
    request = &DeleteCloudRunHPARequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteCloudRunHPA")
    
    
    return
}

func NewDeleteCloudRunHPAResponse() (response *DeleteCloudRunHPAResponse) {
    response = &DeleteCloudRunHPAResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteCloudRunHPA
// 删除cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteCloudRunHPA(request *DeleteCloudRunHPARequest) (response *DeleteCloudRunHPAResponse, err error) {
    return c.DeleteCloudRunHPAWithContext(context.Background(), request)
}

// DeleteCloudRunHPA
// 删除cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteCloudRunHPAWithContext(ctx context.Context, request *DeleteCloudRunHPARequest) (response *DeleteCloudRunHPAResponse, err error) {
    if request == nil {
        request = NewDeleteCloudRunHPARequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteCloudRunHPA require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteCloudRunHPAResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterRequest() (request *DeleteClusterRequest) {
    request = &DeleteClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteCluster")
    
    
    return
}

func NewDeleteClusterResponse() (response *DeleteClusterResponse) {
    response = &DeleteClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteCluster
// 删除集群(YUNAPI V3版本)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED_CLUSTERINDELETIONPROTECTION = "OperationDenied.ClusterInDeletionProtection"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DeleteCluster(request *DeleteClusterRequest) (response *DeleteClusterResponse, err error) {
    return c.DeleteClusterWithContext(context.Background(), request)
}

// DeleteCluster
// 删除集群(YUNAPI V3版本)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED_CLUSTERINDELETIONPROTECTION = "OperationDenied.ClusterInDeletionProtection"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DeleteClusterWithContext(ctx context.Context, request *DeleteClusterRequest) (response *DeleteClusterResponse, err error) {
    if request == nil {
        request = NewDeleteClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterAsGroupsRequest() (request *DeleteClusterAsGroupsRequest) {
    request = &DeleteClusterAsGroupsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterAsGroups")
    
    
    return
}

func NewDeleteClusterAsGroupsResponse() (response *DeleteClusterAsGroupsResponse) {
    response = &DeleteClusterAsGroupsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterAsGroups
// 删除集群伸缩组
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DeleteClusterAsGroups(request *DeleteClusterAsGroupsRequest) (response *DeleteClusterAsGroupsResponse, err error) {
    return c.DeleteClusterAsGroupsWithContext(context.Background(), request)
}

// DeleteClusterAsGroups
// 删除集群伸缩组
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_QUOTAMAXRTLIMIT = "InternalError.QuotaMaxRtLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DeleteClusterAsGroupsWithContext(ctx context.Context, request *DeleteClusterAsGroupsRequest) (response *DeleteClusterAsGroupsResponse, err error) {
    if request == nil {
        request = NewDeleteClusterAsGroupsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterAsGroups require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterAsGroupsResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterCIDRFromCcnRequest() (request *DeleteClusterCIDRFromCcnRequest) {
    request = &DeleteClusterCIDRFromCcnRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterCIDRFromCcn")
    
    
    return
}

func NewDeleteClusterCIDRFromCcnResponse() (response *DeleteClusterCIDRFromCcnResponse) {
    response = &DeleteClusterCIDRFromCcnResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterCIDRFromCcn
// 从云联网删除集群CIDR的路由
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeleteClusterCIDRFromCcn(request *DeleteClusterCIDRFromCcnRequest) (response *DeleteClusterCIDRFromCcnResponse, err error) {
    return c.DeleteClusterCIDRFromCcnWithContext(context.Background(), request)
}

// DeleteClusterCIDRFromCcn
// 从云联网删除集群CIDR的路由
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeleteClusterCIDRFromCcnWithContext(ctx context.Context, request *DeleteClusterCIDRFromCcnRequest) (response *DeleteClusterCIDRFromCcnResponse, err error) {
    if request == nil {
        request = NewDeleteClusterCIDRFromCcnRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterCIDRFromCcn require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterCIDRFromCcnResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterCIDRFromVbcRequest() (request *DeleteClusterCIDRFromVbcRequest) {
    request = &DeleteClusterCIDRFromVbcRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterCIDRFromVbc")
    
    
    return
}

func NewDeleteClusterCIDRFromVbcResponse() (response *DeleteClusterCIDRFromVbcResponse) {
    response = &DeleteClusterCIDRFromVbcResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterCIDRFromVbc
// 从云联网删除集群CIDR
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) DeleteClusterCIDRFromVbc(request *DeleteClusterCIDRFromVbcRequest) (response *DeleteClusterCIDRFromVbcResponse, err error) {
    return c.DeleteClusterCIDRFromVbcWithContext(context.Background(), request)
}

// DeleteClusterCIDRFromVbc
// 从云联网删除集群CIDR
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) DeleteClusterCIDRFromVbcWithContext(ctx context.Context, request *DeleteClusterCIDRFromVbcRequest) (response *DeleteClusterCIDRFromVbcResponse, err error) {
    if request == nil {
        request = NewDeleteClusterCIDRFromVbcRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterCIDRFromVbc require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterCIDRFromVbcResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterEndpointRequest() (request *DeleteClusterEndpointRequest) {
    request = &DeleteClusterEndpointRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterEndpoint")
    
    
    return
}

func NewDeleteClusterEndpointResponse() (response *DeleteClusterEndpointResponse) {
    response = &DeleteClusterEndpointResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterEndpoint
// 删除集群访问端口(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteClusterEndpoint(request *DeleteClusterEndpointRequest) (response *DeleteClusterEndpointResponse, err error) {
    return c.DeleteClusterEndpointWithContext(context.Background(), request)
}

// DeleteClusterEndpoint
// 删除集群访问端口(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteClusterEndpointWithContext(ctx context.Context, request *DeleteClusterEndpointRequest) (response *DeleteClusterEndpointResponse, err error) {
    if request == nil {
        request = NewDeleteClusterEndpointRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterEndpoint require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterEndpointResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterEndpointVipRequest() (request *DeleteClusterEndpointVipRequest) {
    request = &DeleteClusterEndpointVipRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterEndpointVip")
    
    
    return
}

func NewDeleteClusterEndpointVipResponse() (response *DeleteClusterEndpointVipResponse) {
    response = &DeleteClusterEndpointVipResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterEndpointVip
// 删除托管集群外网访问端口（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteClusterEndpointVip(request *DeleteClusterEndpointVipRequest) (response *DeleteClusterEndpointVipResponse, err error) {
    return c.DeleteClusterEndpointVipWithContext(context.Background(), request)
}

// DeleteClusterEndpointVip
// 删除托管集群外网访问端口（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteClusterEndpointVipWithContext(ctx context.Context, request *DeleteClusterEndpointVipRequest) (response *DeleteClusterEndpointVipResponse, err error) {
    if request == nil {
        request = NewDeleteClusterEndpointVipRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterEndpointVip require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterEndpointVipResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterInstancesRequest() (request *DeleteClusterInstancesRequest) {
    request = &DeleteClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterInstances")
    
    
    return
}

func NewDeleteClusterInstancesResponse() (response *DeleteClusterInstancesResponse) {
    response = &DeleteClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterInstances
// 删除集群中的实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) DeleteClusterInstances(request *DeleteClusterInstancesRequest) (response *DeleteClusterInstancesResponse, err error) {
    return c.DeleteClusterInstancesWithContext(context.Background(), request)
}

// DeleteClusterInstances
// 删除集群中的实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) DeleteClusterInstancesWithContext(ctx context.Context, request *DeleteClusterInstancesRequest) (response *DeleteClusterInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterNodePoolRequest() (request *DeleteClusterNodePoolRequest) {
    request = &DeleteClusterNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterNodePool")
    
    
    return
}

func NewDeleteClusterNodePoolResponse() (response *DeleteClusterNodePoolResponse) {
    response = &DeleteClusterNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterNodePool
// 删除节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteClusterNodePool(request *DeleteClusterNodePoolRequest) (response *DeleteClusterNodePoolResponse, err error) {
    return c.DeleteClusterNodePoolWithContext(context.Background(), request)
}

// DeleteClusterNodePool
// 删除节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteClusterNodePoolWithContext(ctx context.Context, request *DeleteClusterNodePoolRequest) (response *DeleteClusterNodePoolResponse, err error) {
    if request == nil {
        request = NewDeleteClusterNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterRouteRequest() (request *DeleteClusterRouteRequest) {
    request = &DeleteClusterRouteRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterRoute")
    
    
    return
}

func NewDeleteClusterRouteResponse() (response *DeleteClusterRouteResponse) {
    response = &DeleteClusterRouteResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterRoute
// 删除集群路由
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DeleteClusterRoute(request *DeleteClusterRouteRequest) (response *DeleteClusterRouteResponse, err error) {
    return c.DeleteClusterRouteWithContext(context.Background(), request)
}

// DeleteClusterRoute
// 删除集群路由
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DeleteClusterRouteWithContext(ctx context.Context, request *DeleteClusterRouteRequest) (response *DeleteClusterRouteResponse, err error) {
    if request == nil {
        request = NewDeleteClusterRouteRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterRoute require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterRouteResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterRouteTableRequest() (request *DeleteClusterRouteTableRequest) {
    request = &DeleteClusterRouteTableRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterRouteTable")
    
    
    return
}

func NewDeleteClusterRouteTableResponse() (response *DeleteClusterRouteTableResponse) {
    response = &DeleteClusterRouteTableResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterRouteTable
// 删除集群路由表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_ROUTETABLENOTEMPTY = "InternalError.RouteTableNotEmpty"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
func (c *Client) DeleteClusterRouteTable(request *DeleteClusterRouteTableRequest) (response *DeleteClusterRouteTableResponse, err error) {
    return c.DeleteClusterRouteTableWithContext(context.Background(), request)
}

// DeleteClusterRouteTable
// 删除集群路由表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_ROUTETABLENOTEMPTY = "InternalError.RouteTableNotEmpty"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
func (c *Client) DeleteClusterRouteTableWithContext(ctx context.Context, request *DeleteClusterRouteTableRequest) (response *DeleteClusterRouteTableResponse, err error) {
    if request == nil {
        request = NewDeleteClusterRouteTableRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterRouteTable require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterRouteTableResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterVirtualNodeRequest() (request *DeleteClusterVirtualNodeRequest) {
    request = &DeleteClusterVirtualNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterVirtualNode")
    
    
    return
}

func NewDeleteClusterVirtualNodeResponse() (response *DeleteClusterVirtualNodeResponse) {
    response = &DeleteClusterVirtualNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterVirtualNode
// 删除虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteClusterVirtualNode(request *DeleteClusterVirtualNodeRequest) (response *DeleteClusterVirtualNodeResponse, err error) {
    return c.DeleteClusterVirtualNodeWithContext(context.Background(), request)
}

// DeleteClusterVirtualNode
// 删除虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteClusterVirtualNodeWithContext(ctx context.Context, request *DeleteClusterVirtualNodeRequest) (response *DeleteClusterVirtualNodeResponse, err error) {
    if request == nil {
        request = NewDeleteClusterVirtualNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterVirtualNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterVirtualNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteClusterVirtualNodePoolRequest() (request *DeleteClusterVirtualNodePoolRequest) {
    request = &DeleteClusterVirtualNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteClusterVirtualNodePool")
    
    
    return
}

func NewDeleteClusterVirtualNodePoolResponse() (response *DeleteClusterVirtualNodePoolResponse) {
    response = &DeleteClusterVirtualNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteClusterVirtualNodePool
// 删除虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEINUSE_EXISTRUNNINGPOD = "ResourceInUse.ExistRunningPod"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DeleteClusterVirtualNodePool(request *DeleteClusterVirtualNodePoolRequest) (response *DeleteClusterVirtualNodePoolResponse, err error) {
    return c.DeleteClusterVirtualNodePoolWithContext(context.Background(), request)
}

// DeleteClusterVirtualNodePool
// 删除虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEINUSE_EXISTRUNNINGPOD = "ResourceInUse.ExistRunningPod"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DeleteClusterVirtualNodePoolWithContext(ctx context.Context, request *DeleteClusterVirtualNodePoolRequest) (response *DeleteClusterVirtualNodePoolResponse, err error) {
    if request == nil {
        request = NewDeleteClusterVirtualNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteClusterVirtualNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteClusterVirtualNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteContainerProbeResultRequest() (request *DeleteContainerProbeResultRequest) {
    request = &DeleteContainerProbeResultRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteContainerProbeResult")
    
    
    return
}

func NewDeleteContainerProbeResultResponse() (response *DeleteContainerProbeResultResponse) {
    response = &DeleteContainerProbeResultResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteContainerProbeResult
// DeleteContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DeleteContainerProbeResult(request *DeleteContainerProbeResultRequest) (response *DeleteContainerProbeResultResponse, err error) {
    return c.DeleteContainerProbeResultWithContext(context.Background(), request)
}

// DeleteContainerProbeResult
// DeleteContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DeleteContainerProbeResultWithContext(ctx context.Context, request *DeleteContainerProbeResultRequest) (response *DeleteContainerProbeResultResponse, err error) {
    if request == nil {
        request = NewDeleteContainerProbeResultRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteContainerProbeResult require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteContainerProbeResultResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteECMInstancesRequest() (request *DeleteECMInstancesRequest) {
    request = &DeleteECMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteECMInstances")
    
    
    return
}

func NewDeleteECMInstancesResponse() (response *DeleteECMInstancesResponse) {
    response = &DeleteECMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteECMInstances
// 删除ECM实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteECMInstances(request *DeleteECMInstancesRequest) (response *DeleteECMInstancesResponse, err error) {
    return c.DeleteECMInstancesWithContext(context.Background(), request)
}

// DeleteECMInstances
// 删除ECM实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteECMInstancesWithContext(ctx context.Context, request *DeleteECMInstancesRequest) (response *DeleteECMInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteECMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteECMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteECMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEKSClusterRequest() (request *DeleteEKSClusterRequest) {
    request = &DeleteEKSClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEKSCluster")
    
    
    return
}

func NewDeleteEKSClusterResponse() (response *DeleteEKSClusterResponse) {
    response = &DeleteEKSClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEKSCluster
// 删除弹性集群(yunapiv3)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSCluster(request *DeleteEKSClusterRequest) (response *DeleteEKSClusterResponse, err error) {
    return c.DeleteEKSClusterWithContext(context.Background(), request)
}

// DeleteEKSCluster
// 删除弹性集群(yunapiv3)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSClusterWithContext(ctx context.Context, request *DeleteEKSClusterRequest) (response *DeleteEKSClusterResponse, err error) {
    if request == nil {
        request = NewDeleteEKSClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEKSCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEKSClusterResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEKSContainerInstancesRequest() (request *DeleteEKSContainerInstancesRequest) {
    request = &DeleteEKSContainerInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEKSContainerInstances")
    
    
    return
}

func NewDeleteEKSContainerInstancesResponse() (response *DeleteEKSContainerInstancesResponse) {
    response = &DeleteEKSContainerInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEKSContainerInstances
// 删除容器实例，可批量删除
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSContainerInstances(request *DeleteEKSContainerInstancesRequest) (response *DeleteEKSContainerInstancesResponse, err error) {
    return c.DeleteEKSContainerInstancesWithContext(context.Background(), request)
}

// DeleteEKSContainerInstances
// 删除容器实例，可批量删除
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSContainerInstancesWithContext(ctx context.Context, request *DeleteEKSContainerInstancesRequest) (response *DeleteEKSContainerInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteEKSContainerInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEKSContainerInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEKSContainerInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEKSInstancesRequest() (request *DeleteEKSInstancesRequest) {
    request = &DeleteEKSInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEKSInstances")
    
    
    return
}

func NewDeleteEKSInstancesResponse() (response *DeleteEKSInstancesResponse) {
    response = &DeleteEKSInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEKSInstances
// 删除弹性容器实例，可批量删除
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSInstances(request *DeleteEKSInstancesRequest) (response *DeleteEKSInstancesResponse, err error) {
    return c.DeleteEKSInstancesWithContext(context.Background(), request)
}

// DeleteEKSInstances
// 删除弹性容器实例，可批量删除
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEKSInstancesWithContext(ctx context.Context, request *DeleteEKSInstancesRequest) (response *DeleteEKSInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteEKSInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEKSInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEKSInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEKSNodeRequest() (request *DeleteEKSNodeRequest) {
    request = &DeleteEKSNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEKSNode")
    
    
    return
}

func NewDeleteEKSNodeResponse() (response *DeleteEKSNodeResponse) {
    response = &DeleteEKSNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEKSNode
// 删除EKS节点
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteEKSNode(request *DeleteEKSNodeRequest) (response *DeleteEKSNodeResponse, err error) {
    return c.DeleteEKSNodeWithContext(context.Background(), request)
}

// DeleteEKSNode
// 删除EKS节点
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteEKSNodeWithContext(ctx context.Context, request *DeleteEKSNodeRequest) (response *DeleteEKSNodeResponse, err error) {
    if request == nil {
        request = NewDeleteEKSNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEKSNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEKSNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEdgeCVMInstancesRequest() (request *DeleteEdgeCVMInstancesRequest) {
    request = &DeleteEdgeCVMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEdgeCVMInstances")
    
    
    return
}

func NewDeleteEdgeCVMInstancesResponse() (response *DeleteEdgeCVMInstancesResponse) {
    response = &DeleteEdgeCVMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEdgeCVMInstances
// 删除边缘容器CVM实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEdgeCVMInstances(request *DeleteEdgeCVMInstancesRequest) (response *DeleteEdgeCVMInstancesResponse, err error) {
    return c.DeleteEdgeCVMInstancesWithContext(context.Background(), request)
}

// DeleteEdgeCVMInstances
// 删除边缘容器CVM实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEdgeCVMInstancesWithContext(ctx context.Context, request *DeleteEdgeCVMInstancesRequest) (response *DeleteEdgeCVMInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteEdgeCVMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEdgeCVMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEdgeCVMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEdgeClusterInstancesRequest() (request *DeleteEdgeClusterInstancesRequest) {
    request = &DeleteEdgeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEdgeClusterInstances")
    
    
    return
}

func NewDeleteEdgeClusterInstancesResponse() (response *DeleteEdgeClusterInstancesResponse) {
    response = &DeleteEdgeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEdgeClusterInstances
// 删除边缘计算实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEdgeClusterInstances(request *DeleteEdgeClusterInstancesRequest) (response *DeleteEdgeClusterInstancesResponse, err error) {
    return c.DeleteEdgeClusterInstancesWithContext(context.Background(), request)
}

// DeleteEdgeClusterInstances
// 删除边缘计算实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteEdgeClusterInstancesWithContext(ctx context.Context, request *DeleteEdgeClusterInstancesRequest) (response *DeleteEdgeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewDeleteEdgeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEdgeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEdgeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEksAlarmPoliciesRequest() (request *DeleteEksAlarmPoliciesRequest) {
    request = &DeleteEksAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEksAlarmPolicies")
    
    
    return
}

func NewDeleteEksAlarmPoliciesResponse() (response *DeleteEksAlarmPoliciesResponse) {
    response = &DeleteEksAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEksAlarmPolicies
// 删除弹性集群告警策略，支持批量删除 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteEksAlarmPolicies(request *DeleteEksAlarmPoliciesRequest) (response *DeleteEksAlarmPoliciesResponse, err error) {
    return c.DeleteEksAlarmPoliciesWithContext(context.Background(), request)
}

// DeleteEksAlarmPolicies
// 删除弹性集群告警策略，支持批量删除 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteEksAlarmPoliciesWithContext(ctx context.Context, request *DeleteEksAlarmPoliciesRequest) (response *DeleteEksAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDeleteEksAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEksAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEksAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEtcdInstanceRequest() (request *DeleteEtcdInstanceRequest) {
    request = &DeleteEtcdInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEtcdInstance")
    
    
    return
}

func NewDeleteEtcdInstanceResponse() (response *DeleteEtcdInstanceResponse) {
    response = &DeleteEtcdInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEtcdInstance
// 删除etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdInstance(request *DeleteEtcdInstanceRequest) (response *DeleteEtcdInstanceResponse, err error) {
    return c.DeleteEtcdInstanceWithContext(context.Background(), request)
}

// DeleteEtcdInstance
// 删除etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdInstanceWithContext(ctx context.Context, request *DeleteEtcdInstanceRequest) (response *DeleteEtcdInstanceResponse, err error) {
    if request == nil {
        request = NewDeleteEtcdInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEtcdInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEtcdInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEtcdSnapshotRequest() (request *DeleteEtcdSnapshotRequest) {
    request = &DeleteEtcdSnapshotRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEtcdSnapshot")
    
    
    return
}

func NewDeleteEtcdSnapshotResponse() (response *DeleteEtcdSnapshotResponse) {
    response = &DeleteEtcdSnapshotResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEtcdSnapshot
// 删除etcd快照
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdSnapshot(request *DeleteEtcdSnapshotRequest) (response *DeleteEtcdSnapshotResponse, err error) {
    return c.DeleteEtcdSnapshotWithContext(context.Background(), request)
}

// DeleteEtcdSnapshot
// 删除etcd快照
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdSnapshotWithContext(ctx context.Context, request *DeleteEtcdSnapshotRequest) (response *DeleteEtcdSnapshotResponse, err error) {
    if request == nil {
        request = NewDeleteEtcdSnapshotRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEtcdSnapshot require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEtcdSnapshotResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteEtcdSnapshotPolicyRequest() (request *DeleteEtcdSnapshotPolicyRequest) {
    request = &DeleteEtcdSnapshotPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteEtcdSnapshotPolicy")
    
    
    return
}

func NewDeleteEtcdSnapshotPolicyResponse() (response *DeleteEtcdSnapshotPolicyResponse) {
    response = &DeleteEtcdSnapshotPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteEtcdSnapshotPolicy
// 删除etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdSnapshotPolicy(request *DeleteEtcdSnapshotPolicyRequest) (response *DeleteEtcdSnapshotPolicyResponse, err error) {
    return c.DeleteEtcdSnapshotPolicyWithContext(context.Background(), request)
}

// DeleteEtcdSnapshotPolicy
// 删除etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DeleteEtcdSnapshotPolicyWithContext(ctx context.Context, request *DeleteEtcdSnapshotPolicyRequest) (response *DeleteEtcdSnapshotPolicyResponse, err error) {
    if request == nil {
        request = NewDeleteEtcdSnapshotPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteEtcdSnapshotPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteEtcdSnapshotPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteExternalNodeRequest() (request *DeleteExternalNodeRequest) {
    request = &DeleteExternalNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteExternalNode")
    
    
    return
}

func NewDeleteExternalNodeResponse() (response *DeleteExternalNodeResponse) {
    response = &DeleteExternalNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteExternalNode
// 删除第三方节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteExternalNode(request *DeleteExternalNodeRequest) (response *DeleteExternalNodeResponse, err error) {
    return c.DeleteExternalNodeWithContext(context.Background(), request)
}

// DeleteExternalNode
// 删除第三方节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeleteExternalNodeWithContext(ctx context.Context, request *DeleteExternalNodeRequest) (response *DeleteExternalNodeResponse, err error) {
    if request == nil {
        request = NewDeleteExternalNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteExternalNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteExternalNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteExternalNodePoolRequest() (request *DeleteExternalNodePoolRequest) {
    request = &DeleteExternalNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteExternalNodePool")
    
    
    return
}

func NewDeleteExternalNodePoolResponse() (response *DeleteExternalNodePoolResponse) {
    response = &DeleteExternalNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteExternalNodePool
// 删除第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DeleteExternalNodePool(request *DeleteExternalNodePoolRequest) (response *DeleteExternalNodePoolResponse, err error) {
    return c.DeleteExternalNodePoolWithContext(context.Background(), request)
}

// DeleteExternalNodePool
// 删除第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DeleteExternalNodePoolWithContext(ctx context.Context, request *DeleteExternalNodePoolRequest) (response *DeleteExternalNodePoolResponse, err error) {
    if request == nil {
        request = NewDeleteExternalNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteExternalNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteExternalNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteImageCachesRequest() (request *DeleteImageCachesRequest) {
    request = &DeleteImageCachesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteImageCaches")
    
    
    return
}

func NewDeleteImageCachesResponse() (response *DeleteImageCachesResponse) {
    response = &DeleteImageCachesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteImageCaches
// 批量删除镜像缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteImageCaches(request *DeleteImageCachesRequest) (response *DeleteImageCachesResponse, err error) {
    return c.DeleteImageCachesWithContext(context.Background(), request)
}

// DeleteImageCaches
// 批量删除镜像缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteImageCachesWithContext(ctx context.Context, request *DeleteImageCachesRequest) (response *DeleteImageCachesResponse, err error) {
    if request == nil {
        request = NewDeleteImageCachesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteImageCaches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteImageCachesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteImageRegistryCredentialsRequest() (request *DeleteImageRegistryCredentialsRequest) {
    request = &DeleteImageRegistryCredentialsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteImageRegistryCredentials")
    
    
    return
}

func NewDeleteImageRegistryCredentialsResponse() (response *DeleteImageRegistryCredentialsResponse) {
    response = &DeleteImageRegistryCredentialsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteImageRegistryCredentials
// 删除镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteImageRegistryCredentials(request *DeleteImageRegistryCredentialsRequest) (response *DeleteImageRegistryCredentialsResponse, err error) {
    return c.DeleteImageRegistryCredentialsWithContext(context.Background(), request)
}

// DeleteImageRegistryCredentials
// 删除镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteImageRegistryCredentialsWithContext(ctx context.Context, request *DeleteImageRegistryCredentialsRequest) (response *DeleteImageRegistryCredentialsResponse, err error) {
    if request == nil {
        request = NewDeleteImageRegistryCredentialsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteImageRegistryCredentials require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteImageRegistryCredentialsResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteNodeUnitRequest() (request *DeleteNodeUnitRequest) {
    request = &DeleteNodeUnitRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteNodeUnit")
    
    
    return
}

func NewDeleteNodeUnitResponse() (response *DeleteNodeUnitResponse) {
    response = &DeleteNodeUnitResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteNodeUnit
// 删除NodeUnit
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteNodeUnit(request *DeleteNodeUnitRequest) (response *DeleteNodeUnitResponse, err error) {
    return c.DeleteNodeUnitWithContext(context.Background(), request)
}

// DeleteNodeUnit
// 删除NodeUnit
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteNodeUnitWithContext(ctx context.Context, request *DeleteNodeUnitRequest) (response *DeleteNodeUnitResponse, err error) {
    if request == nil {
        request = NewDeleteNodeUnitRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteNodeUnit require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteNodeUnitResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePodRequest() (request *DeletePodRequest) {
    request = &DeletePodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePod")
    
    
    return
}

func NewDeletePodResponse() (response *DeletePodResponse) {
    response = &DeletePodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePod
// 删除指定pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeletePod(request *DeletePodRequest) (response *DeletePodResponse, err error) {
    return c.DeletePodWithContext(context.Background(), request)
}

// DeletePod
// 删除指定pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeletePodWithContext(ctx context.Context, request *DeletePodRequest) (response *DeletePodResponse, err error) {
    if request == nil {
        request = NewDeletePodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePod require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePodResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePodsByIdRequest() (request *DeletePodsByIdRequest) {
    request = &DeletePodsByIdRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePodsById")
    
    
    return
}

func NewDeletePodsByIdResponse() (response *DeletePodsByIdResponse) {
    response = &DeletePodsByIdResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePodsById
// 指定eksId删除pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeletePodsById(request *DeletePodsByIdRequest) (response *DeletePodsByIdResponse, err error) {
    return c.DeletePodsByIdWithContext(context.Background(), request)
}

// DeletePodsById
// 指定eksId删除pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DeletePodsByIdWithContext(ctx context.Context, request *DeletePodsByIdRequest) (response *DeletePodsByIdResponse, err error) {
    if request == nil {
        request = NewDeletePodsByIdRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePodsById require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePodsByIdResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusAgentRequest() (request *DeletePrometheusAgentRequest) {
    request = &DeletePrometheusAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusAgent")
    
    
    return
}

func NewDeletePrometheusAgentResponse() (response *DeletePrometheusAgentResponse) {
    response = &DeletePrometheusAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusAgent
// 删除托管Prometheus agent
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) DeletePrometheusAgent(request *DeletePrometheusAgentRequest) (response *DeletePrometheusAgentResponse, err error) {
    return c.DeletePrometheusAgentWithContext(context.Background(), request)
}

// DeletePrometheusAgent
// 删除托管Prometheus agent
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) DeletePrometheusAgentWithContext(ctx context.Context, request *DeletePrometheusAgentRequest) (response *DeletePrometheusAgentResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusAgentResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusAlertPolicyRequest() (request *DeletePrometheusAlertPolicyRequest) {
    request = &DeletePrometheusAlertPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusAlertPolicy")
    
    
    return
}

func NewDeletePrometheusAlertPolicyResponse() (response *DeletePrometheusAlertPolicyResponse) {
    response = &DeletePrometheusAlertPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusAlertPolicy
// 删除2.0实例告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusAlertPolicy(request *DeletePrometheusAlertPolicyRequest) (response *DeletePrometheusAlertPolicyResponse, err error) {
    return c.DeletePrometheusAlertPolicyWithContext(context.Background(), request)
}

// DeletePrometheusAlertPolicy
// 删除2.0实例告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusAlertPolicyWithContext(ctx context.Context, request *DeletePrometheusAlertPolicyRequest) (response *DeletePrometheusAlertPolicyResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusAlertPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusAlertPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusAlertPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusAlertRuleRequest() (request *DeletePrometheusAlertRuleRequest) {
    request = &DeletePrometheusAlertRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusAlertRule")
    
    
    return
}

func NewDeletePrometheusAlertRuleResponse() (response *DeletePrometheusAlertRuleResponse) {
    response = &DeletePrometheusAlertRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusAlertRule
// 删除告警规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusAlertRule(request *DeletePrometheusAlertRuleRequest) (response *DeletePrometheusAlertRuleResponse, err error) {
    return c.DeletePrometheusAlertRuleWithContext(context.Background(), request)
}

// DeletePrometheusAlertRule
// 删除告警规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusAlertRuleWithContext(ctx context.Context, request *DeletePrometheusAlertRuleRequest) (response *DeletePrometheusAlertRuleResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusAlertRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusAlertRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusAlertRuleResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusClusterAgentRequest() (request *DeletePrometheusClusterAgentRequest) {
    request = &DeletePrometheusClusterAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusClusterAgent")
    
    
    return
}

func NewDeletePrometheusClusterAgentResponse() (response *DeletePrometheusClusterAgentResponse) {
    response = &DeletePrometheusClusterAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusClusterAgent
// 解除2.0实例的集群关联
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) DeletePrometheusClusterAgent(request *DeletePrometheusClusterAgentRequest) (response *DeletePrometheusClusterAgentResponse, err error) {
    return c.DeletePrometheusClusterAgentWithContext(context.Background(), request)
}

// DeletePrometheusClusterAgent
// 解除2.0实例的集群关联
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) DeletePrometheusClusterAgentWithContext(ctx context.Context, request *DeletePrometheusClusterAgentRequest) (response *DeletePrometheusClusterAgentResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusClusterAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusClusterAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusClusterAgentResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusConfigRequest() (request *DeletePrometheusConfigRequest) {
    request = &DeletePrometheusConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusConfig")
    
    
    return
}

func NewDeletePrometheusConfigResponse() (response *DeletePrometheusConfigResponse) {
    response = &DeletePrometheusConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusConfig
// 删除Prometheus配置，如果目标不存在，将返回成功
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeletePrometheusConfig(request *DeletePrometheusConfigRequest) (response *DeletePrometheusConfigResponse, err error) {
    return c.DeletePrometheusConfigWithContext(context.Background(), request)
}

// DeletePrometheusConfig
// 删除Prometheus配置，如果目标不存在，将返回成功
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DeletePrometheusConfigWithContext(ctx context.Context, request *DeletePrometheusConfigRequest) (response *DeletePrometheusConfigResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusConfigResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusDashboardRequest() (request *DeletePrometheusDashboardRequest) {
    request = &DeletePrometheusDashboardRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusDashboard")
    
    
    return
}

func NewDeletePrometheusDashboardResponse() (response *DeletePrometheusDashboardResponse) {
    response = &DeletePrometheusDashboardResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusDashboard
// 删除grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusDashboard(request *DeletePrometheusDashboardRequest) (response *DeletePrometheusDashboardResponse, err error) {
    return c.DeletePrometheusDashboardWithContext(context.Background(), request)
}

// DeletePrometheusDashboard
// 删除grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusDashboardWithContext(ctx context.Context, request *DeletePrometheusDashboardRequest) (response *DeletePrometheusDashboardResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusDashboardRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusDashboard require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusDashboardResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusInstanceRequest() (request *DeletePrometheusInstanceRequest) {
    request = &DeletePrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusInstance")
    
    
    return
}

func NewDeletePrometheusInstanceResponse() (response *DeletePrometheusInstanceResponse) {
    response = &DeletePrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusInstance
// 删除prometheus实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusInstance(request *DeletePrometheusInstanceRequest) (response *DeletePrometheusInstanceResponse, err error) {
    return c.DeletePrometheusInstanceWithContext(context.Background(), request)
}

// DeletePrometheusInstance
// 删除prometheus实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusInstanceWithContext(ctx context.Context, request *DeletePrometheusInstanceRequest) (response *DeletePrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusRecordRuleRequest() (request *DeletePrometheusRecordRuleRequest) {
    request = &DeletePrometheusRecordRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusRecordRule")
    
    
    return
}

func NewDeletePrometheusRecordRuleResponse() (response *DeletePrometheusRecordRuleResponse) {
    response = &DeletePrometheusRecordRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusRecordRule
// 删除Prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DeletePrometheusRecordRule(request *DeletePrometheusRecordRuleRequest) (response *DeletePrometheusRecordRuleResponse, err error) {
    return c.DeletePrometheusRecordRuleWithContext(context.Background(), request)
}

// DeletePrometheusRecordRule
// 删除Prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DeletePrometheusRecordRuleWithContext(ctx context.Context, request *DeletePrometheusRecordRuleRequest) (response *DeletePrometheusRecordRuleResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusRecordRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusRecordRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusRecordRuleResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusRecordRuleYamlRequest() (request *DeletePrometheusRecordRuleYamlRequest) {
    request = &DeletePrometheusRecordRuleYamlRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusRecordRuleYaml")
    
    
    return
}

func NewDeletePrometheusRecordRuleYamlResponse() (response *DeletePrometheusRecordRuleYamlResponse) {
    response = &DeletePrometheusRecordRuleYamlResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusRecordRuleYaml
// 删除聚合实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusRecordRuleYaml(request *DeletePrometheusRecordRuleYamlRequest) (response *DeletePrometheusRecordRuleYamlResponse, err error) {
    return c.DeletePrometheusRecordRuleYamlWithContext(context.Background(), request)
}

// DeletePrometheusRecordRuleYaml
// 删除聚合实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DeletePrometheusRecordRuleYamlWithContext(ctx context.Context, request *DeletePrometheusRecordRuleYamlRequest) (response *DeletePrometheusRecordRuleYamlResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusRecordRuleYamlRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusRecordRuleYaml require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusRecordRuleYamlResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusTempRequest() (request *DeletePrometheusTempRequest) {
    request = &DeletePrometheusTempRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusTemp")
    
    
    return
}

func NewDeletePrometheusTempResponse() (response *DeletePrometheusTempResponse) {
    response = &DeletePrometheusTempResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusTemp
// 删除一个云原生Prometheus配置模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTemp(request *DeletePrometheusTempRequest) (response *DeletePrometheusTempResponse, err error) {
    return c.DeletePrometheusTempWithContext(context.Background(), request)
}

// DeletePrometheusTemp
// 删除一个云原生Prometheus配置模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTempWithContext(ctx context.Context, request *DeletePrometheusTempRequest) (response *DeletePrometheusTempResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusTempRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusTemp require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusTempResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusTempSyncRequest() (request *DeletePrometheusTempSyncRequest) {
    request = &DeletePrometheusTempSyncRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusTempSync")
    
    
    return
}

func NewDeletePrometheusTempSyncResponse() (response *DeletePrometheusTempSyncResponse) {
    response = &DeletePrometheusTempSyncResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusTempSync
// 解除模板同步，这将会删除目标中该模板所生产的配置，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTempSync(request *DeletePrometheusTempSyncRequest) (response *DeletePrometheusTempSyncResponse, err error) {
    return c.DeletePrometheusTempSyncWithContext(context.Background(), request)
}

// DeletePrometheusTempSync
// 解除模板同步，这将会删除目标中该模板所生产的配置，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTempSyncWithContext(ctx context.Context, request *DeletePrometheusTempSyncRequest) (response *DeletePrometheusTempSyncResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusTempSyncRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusTempSync require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusTempSyncResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusTemplateRequest() (request *DeletePrometheusTemplateRequest) {
    request = &DeletePrometheusTemplateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusTemplate")
    
    
    return
}

func NewDeletePrometheusTemplateResponse() (response *DeletePrometheusTemplateResponse) {
    response = &DeletePrometheusTemplateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusTemplate
// 删除一个云原生Prometheus配置模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTemplate(request *DeletePrometheusTemplateRequest) (response *DeletePrometheusTemplateResponse, err error) {
    return c.DeletePrometheusTemplateWithContext(context.Background(), request)
}

// DeletePrometheusTemplate
// 删除一个云原生Prometheus配置模板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTemplateWithContext(ctx context.Context, request *DeletePrometheusTemplateRequest) (response *DeletePrometheusTemplateResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusTemplateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusTemplate require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusTemplateResponse()
    err = c.Send(request, response)
    return
}

func NewDeletePrometheusTemplateSyncRequest() (request *DeletePrometheusTemplateSyncRequest) {
    request = &DeletePrometheusTemplateSyncRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeletePrometheusTemplateSync")
    
    
    return
}

func NewDeletePrometheusTemplateSyncResponse() (response *DeletePrometheusTemplateSyncResponse) {
    response = &DeletePrometheusTemplateSyncResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeletePrometheusTemplateSync
// 取消模板同步，这将会删除目标中该模板所生产的配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTemplateSync(request *DeletePrometheusTemplateSyncRequest) (response *DeletePrometheusTemplateSyncResponse, err error) {
    return c.DeletePrometheusTemplateSyncWithContext(context.Background(), request)
}

// DeletePrometheusTemplateSync
// 取消模板同步，这将会删除目标中该模板所生产的配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeletePrometheusTemplateSyncWithContext(ctx context.Context, request *DeletePrometheusTemplateSyncRequest) (response *DeletePrometheusTemplateSyncResponse, err error) {
    if request == nil {
        request = NewDeletePrometheusTemplateSyncRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeletePrometheusTemplateSync require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeletePrometheusTemplateSyncResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteSecretRequest() (request *DeleteSecretRequest) {
    request = &DeleteSecretRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteSecret")
    
    
    return
}

func NewDeleteSecretResponse() (response *DeleteSecretResponse) {
    response = &DeleteSecretResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteSecret
// 删除秘钥
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeleteSecret(request *DeleteSecretRequest) (response *DeleteSecretResponse, err error) {
    return c.DeleteSecretWithContext(context.Background(), request)
}

// DeleteSecret
// 删除秘钥
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DeleteSecretWithContext(ctx context.Context, request *DeleteSecretRequest) (response *DeleteSecretResponse, err error) {
    if request == nil {
        request = NewDeleteSecretRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteSecret require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteSecretResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteServiceRequest() (request *DeleteServiceRequest) {
    request = &DeleteServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteService")
    
    
    return
}

func NewDeleteServiceResponse() (response *DeleteServiceResponse) {
    response = &DeleteServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteService
// 删除Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DeleteService(request *DeleteServiceRequest) (response *DeleteServiceResponse, err error) {
    return c.DeleteServiceWithContext(context.Background(), request)
}

// DeleteService
// 删除Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DeleteServiceWithContext(ctx context.Context, request *DeleteServiceRequest) (response *DeleteServiceResponse, err error) {
    if request == nil {
        request = NewDeleteServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteService require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteServiceResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteTDCCExternalClusterRequest() (request *DeleteTDCCExternalClusterRequest) {
    request = &DeleteTDCCExternalClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteTDCCExternalCluster")
    
    
    return
}

func NewDeleteTDCCExternalClusterResponse() (response *DeleteTDCCExternalClusterResponse) {
    response = &DeleteTDCCExternalClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteTDCCExternalCluster
// 删除注册集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED_CLUSTERINDELETIONPROTECTION = "OperationDenied.ClusterInDeletionProtection"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DeleteTDCCExternalCluster(request *DeleteTDCCExternalClusterRequest) (response *DeleteTDCCExternalClusterResponse, err error) {
    return c.DeleteTDCCExternalClusterWithContext(context.Background(), request)
}

// DeleteTDCCExternalCluster
// 删除注册集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED_CLUSTERINDELETIONPROTECTION = "OperationDenied.ClusterInDeletionProtection"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DeleteTDCCExternalClusterWithContext(ctx context.Context, request *DeleteTDCCExternalClusterRequest) (response *DeleteTDCCExternalClusterResponse, err error) {
    if request == nil {
        request = NewDeleteTDCCExternalClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteTDCCExternalCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteTDCCExternalClusterResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteTKEEdgeClusterRequest() (request *DeleteTKEEdgeClusterRequest) {
    request = &DeleteTKEEdgeClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteTKEEdgeCluster")
    
    
    return
}

func NewDeleteTKEEdgeClusterResponse() (response *DeleteTKEEdgeClusterResponse) {
    response = &DeleteTKEEdgeClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteTKEEdgeCluster
// 删除边缘计算集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteTKEEdgeCluster(request *DeleteTKEEdgeClusterRequest) (response *DeleteTKEEdgeClusterResponse, err error) {
    return c.DeleteTKEEdgeClusterWithContext(context.Background(), request)
}

// DeleteTKEEdgeCluster
// 删除边缘计算集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DeleteTKEEdgeClusterWithContext(ctx context.Context, request *DeleteTKEEdgeClusterRequest) (response *DeleteTKEEdgeClusterResponse, err error) {
    if request == nil {
        request = NewDeleteTKEEdgeClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteTKEEdgeCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteTKEEdgeClusterResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteTkeEdgeAlarmPoliciesRequest() (request *DeleteTkeEdgeAlarmPoliciesRequest) {
    request = &DeleteTkeEdgeAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteTkeEdgeAlarmPolicies")
    
    
    return
}

func NewDeleteTkeEdgeAlarmPoliciesResponse() (response *DeleteTkeEdgeAlarmPoliciesResponse) {
    response = &DeleteTkeEdgeAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteTkeEdgeAlarmPolicies
// 删除边缘集群告警策略，支持批量删除 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteTkeEdgeAlarmPolicies(request *DeleteTkeEdgeAlarmPoliciesRequest) (response *DeleteTkeEdgeAlarmPoliciesResponse, err error) {
    return c.DeleteTkeEdgeAlarmPoliciesWithContext(context.Background(), request)
}

// DeleteTkeEdgeAlarmPolicies
// 删除边缘集群告警策略，支持批量删除 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DeleteTkeEdgeAlarmPoliciesWithContext(ctx context.Context, request *DeleteTkeEdgeAlarmPoliciesRequest) (response *DeleteTkeEdgeAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDeleteTkeEdgeAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteTkeEdgeAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteTkeEdgeAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteVirtualClusterRequest() (request *DeleteVirtualClusterRequest) {
    request = &DeleteVirtualClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteVirtualCluster")
    
    
    return
}

func NewDeleteVirtualClusterResponse() (response *DeleteVirtualClusterResponse) {
    response = &DeleteVirtualClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteVirtualCluster
// 删除虚拟集群，只有集群内服务为空时才能删除.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteVirtualCluster(request *DeleteVirtualClusterRequest) (response *DeleteVirtualClusterResponse, err error) {
    return c.DeleteVirtualClusterWithContext(context.Background(), request)
}

// DeleteVirtualCluster
// 删除虚拟集群，只有集群内服务为空时才能删除.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteVirtualClusterWithContext(ctx context.Context, request *DeleteVirtualClusterRequest) (response *DeleteVirtualClusterResponse, err error) {
    if request == nil {
        request = NewDeleteVirtualClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteVirtualCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteVirtualClusterResponse()
    err = c.Send(request, response)
    return
}

func NewDeleteVirtualServicesRequest() (request *DeleteVirtualServicesRequest) {
    request = &DeleteVirtualServicesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DeleteVirtualServices")
    
    
    return
}

func NewDeleteVirtualServicesResponse() (response *DeleteVirtualServicesResponse) {
    response = &DeleteVirtualServicesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DeleteVirtualServices
// 删除虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteVirtualServices(request *DeleteVirtualServicesRequest) (response *DeleteVirtualServicesResponse, err error) {
    return c.DeleteVirtualServicesWithContext(context.Background(), request)
}

// DeleteVirtualServices
// 删除虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DeleteVirtualServicesWithContext(ctx context.Context, request *DeleteVirtualServicesRequest) (response *DeleteVirtualServicesResponse, err error) {
    if request == nil {
        request = NewDeleteVirtualServicesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DeleteVirtualServices require credential")
    }

    request.SetContext(ctx)
    
    response = NewDeleteVirtualServicesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeAlarmPoliciesRequest() (request *DescribeAlarmPoliciesRequest) {
    request = &DescribeAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeAlarmPolicies")
    
    
    return
}

func NewDescribeAlarmPoliciesResponse() (response *DescribeAlarmPoliciesResponse) {
    response = &DescribeAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeAlarmPolicies
// 获取告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeAlarmPolicies(request *DescribeAlarmPoliciesRequest) (response *DescribeAlarmPoliciesResponse, err error) {
    return c.DescribeAlarmPoliciesWithContext(context.Background(), request)
}

// DescribeAlarmPolicies
// 获取告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeAlarmPoliciesWithContext(ctx context.Context, request *DescribeAlarmPoliciesRequest) (response *DescribeAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDescribeAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeAvailableClusterVersionRequest() (request *DescribeAvailableClusterVersionRequest) {
    request = &DescribeAvailableClusterVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeAvailableClusterVersion")
    
    
    return
}

func NewDescribeAvailableClusterVersionResponse() (response *DescribeAvailableClusterVersionResponse) {
    response = &DescribeAvailableClusterVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeAvailableClusterVersion
// 获取集群可以升级的所有版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeAvailableClusterVersion(request *DescribeAvailableClusterVersionRequest) (response *DescribeAvailableClusterVersionResponse, err error) {
    return c.DescribeAvailableClusterVersionWithContext(context.Background(), request)
}

// DescribeAvailableClusterVersion
// 获取集群可以升级的所有版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeAvailableClusterVersionWithContext(ctx context.Context, request *DescribeAvailableClusterVersionRequest) (response *DescribeAvailableClusterVersionResponse, err error) {
    if request == nil {
        request = NewDescribeAvailableClusterVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeAvailableClusterVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeAvailableClusterVersionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeAvailableTKEEdgeVersionRequest() (request *DescribeAvailableTKEEdgeVersionRequest) {
    request = &DescribeAvailableTKEEdgeVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeAvailableTKEEdgeVersion")
    
    
    return
}

func NewDescribeAvailableTKEEdgeVersionResponse() (response *DescribeAvailableTKEEdgeVersionResponse) {
    response = &DescribeAvailableTKEEdgeVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeAvailableTKEEdgeVersion
// 边缘计算支持的k8s版本
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeAvailableTKEEdgeVersion(request *DescribeAvailableTKEEdgeVersionRequest) (response *DescribeAvailableTKEEdgeVersionResponse, err error) {
    return c.DescribeAvailableTKEEdgeVersionWithContext(context.Background(), request)
}

// DescribeAvailableTKEEdgeVersion
// 边缘计算支持的k8s版本
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeAvailableTKEEdgeVersionWithContext(ctx context.Context, request *DescribeAvailableTKEEdgeVersionRequest) (response *DescribeAvailableTKEEdgeVersionResponse, err error) {
    if request == nil {
        request = NewDescribeAvailableTKEEdgeVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeAvailableTKEEdgeVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeAvailableTKEEdgeVersionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeBootstrapTokensRequest() (request *DescribeBootstrapTokensRequest) {
    request = &DescribeBootstrapTokensRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeBootstrapTokens")
    
    
    return
}

func NewDescribeBootstrapTokensResponse() (response *DescribeBootstrapTokensResponse) {
    response = &DescribeBootstrapTokensResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeBootstrapTokens
// 查询BootstrapTokens列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeBootstrapTokens(request *DescribeBootstrapTokensRequest) (response *DescribeBootstrapTokensResponse, err error) {
    return c.DescribeBootstrapTokensWithContext(context.Background(), request)
}

// DescribeBootstrapTokens
// 查询BootstrapTokens列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeBootstrapTokensWithContext(ctx context.Context, request *DescribeBootstrapTokensRequest) (response *DescribeBootstrapTokensResponse, err error) {
    if request == nil {
        request = NewDescribeBootstrapTokensRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeBootstrapTokens require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeBootstrapTokensResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCcnInstancesRequest() (request *DescribeCcnInstancesRequest) {
    request = &DescribeCcnInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCcnInstances")
    
    
    return
}

func NewDescribeCcnInstancesResponse() (response *DescribeCcnInstancesResponse) {
    response = &DescribeCcnInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCcnInstances
// 用于查询vpc是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeCcnInstances(request *DescribeCcnInstancesRequest) (response *DescribeCcnInstancesResponse, err error) {
    return c.DescribeCcnInstancesWithContext(context.Background(), request)
}

// DescribeCcnInstances
// 用于查询vpc是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeCcnInstancesWithContext(ctx context.Context, request *DescribeCcnInstancesRequest) (response *DescribeCcnInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeCcnInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCcnInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCcnInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCcnRoutesRequest() (request *DescribeCcnRoutesRequest) {
    request = &DescribeCcnRoutesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCcnRoutes")
    
    
    return
}

func NewDescribeCcnRoutesResponse() (response *DescribeCcnRoutesResponse) {
    response = &DescribeCcnRoutesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCcnRoutes
// 用于查询tke集群CIDR是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeCcnRoutes(request *DescribeCcnRoutesRequest) (response *DescribeCcnRoutesResponse, err error) {
    return c.DescribeCcnRoutesWithContext(context.Background(), request)
}

// DescribeCcnRoutes
// 用于查询tke集群CIDR是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeCcnRoutesWithContext(ctx context.Context, request *DescribeCcnRoutesRequest) (response *DescribeCcnRoutesResponse, err error) {
    if request == nil {
        request = NewDescribeCcnRoutesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCcnRoutes require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCcnRoutesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCloudRunClusterQuotaRequest() (request *DescribeCloudRunClusterQuotaRequest) {
    request = &DescribeCloudRunClusterQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCloudRunClusterQuota")
    
    
    return
}

func NewDescribeCloudRunClusterQuotaResponse() (response *DescribeCloudRunClusterQuotaResponse) {
    response = &DescribeCloudRunClusterQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCloudRunClusterQuota
// 获取CloudRun集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeCloudRunClusterQuota(request *DescribeCloudRunClusterQuotaRequest) (response *DescribeCloudRunClusterQuotaResponse, err error) {
    return c.DescribeCloudRunClusterQuotaWithContext(context.Background(), request)
}

// DescribeCloudRunClusterQuota
// 获取CloudRun集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeCloudRunClusterQuotaWithContext(ctx context.Context, request *DescribeCloudRunClusterQuotaRequest) (response *DescribeCloudRunClusterQuotaResponse, err error) {
    if request == nil {
        request = NewDescribeCloudRunClusterQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCloudRunClusterQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCloudRunClusterQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCloudRunEventRequest() (request *DescribeCloudRunEventRequest) {
    request = &DescribeCloudRunEventRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCloudRunEvent")
    
    
    return
}

func NewDescribeCloudRunEventResponse() (response *DescribeCloudRunEventResponse) {
    response = &DescribeCloudRunEventResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCloudRunEvent
// 查询event列表
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunEvent(request *DescribeCloudRunEventRequest) (response *DescribeCloudRunEventResponse, err error) {
    return c.DescribeCloudRunEventWithContext(context.Background(), request)
}

// DescribeCloudRunEvent
// 查询event列表
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunEventWithContext(ctx context.Context, request *DescribeCloudRunEventRequest) (response *DescribeCloudRunEventResponse, err error) {
    if request == nil {
        request = NewDescribeCloudRunEventRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCloudRunEvent require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCloudRunEventResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCloudRunHPARequest() (request *DescribeCloudRunHPARequest) {
    request = &DescribeCloudRunHPARequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCloudRunHPA")
    
    
    return
}

func NewDescribeCloudRunHPAResponse() (response *DescribeCloudRunHPAResponse) {
    response = &DescribeCloudRunHPAResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCloudRunHPA
// 查询cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunHPA(request *DescribeCloudRunHPARequest) (response *DescribeCloudRunHPAResponse, err error) {
    return c.DescribeCloudRunHPAWithContext(context.Background(), request)
}

// DescribeCloudRunHPA
// 查询cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunHPAWithContext(ctx context.Context, request *DescribeCloudRunHPARequest) (response *DescribeCloudRunHPAResponse, err error) {
    if request == nil {
        request = NewDescribeCloudRunHPARequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCloudRunHPA require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCloudRunHPAResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCloudRunLogSwitchesRequest() (request *DescribeCloudRunLogSwitchesRequest) {
    request = &DescribeCloudRunLogSwitchesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCloudRunLogSwitches")
    
    
    return
}

func NewDescribeCloudRunLogSwitchesResponse() (response *DescribeCloudRunLogSwitchesResponse) {
    response = &DescribeCloudRunLogSwitchesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCloudRunLogSwitches
// 查询cloudrun日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeCloudRunLogSwitches(request *DescribeCloudRunLogSwitchesRequest) (response *DescribeCloudRunLogSwitchesResponse, err error) {
    return c.DescribeCloudRunLogSwitchesWithContext(context.Background(), request)
}

// DescribeCloudRunLogSwitches
// 查询cloudrun日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeCloudRunLogSwitchesWithContext(ctx context.Context, request *DescribeCloudRunLogSwitchesRequest) (response *DescribeCloudRunLogSwitchesResponse, err error) {
    if request == nil {
        request = NewDescribeCloudRunLogSwitchesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCloudRunLogSwitches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCloudRunLogSwitchesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCloudRunPodRequest() (request *DescribeCloudRunPodRequest) {
    request = &DescribeCloudRunPodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCloudRunPod")
    
    
    return
}

func NewDescribeCloudRunPodResponse() (response *DescribeCloudRunPodResponse) {
    response = &DescribeCloudRunPodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCloudRunPod
// 查询CloudRun Pod详情
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunPod(request *DescribeCloudRunPodRequest) (response *DescribeCloudRunPodResponse, err error) {
    return c.DescribeCloudRunPodWithContext(context.Background(), request)
}

// DescribeCloudRunPod
// 查询CloudRun Pod详情
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeCloudRunPodWithContext(ctx context.Context, request *DescribeCloudRunPodRequest) (response *DescribeCloudRunPodResponse, err error) {
    if request == nil {
        request = NewDescribeCloudRunPodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCloudRunPod require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCloudRunPodResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClsLogSetsRequest() (request *DescribeClsLogSetsRequest) {
    request = &DescribeClsLogSetsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClsLogSets")
    
    
    return
}

func NewDescribeClsLogSetsResponse() (response *DescribeClsLogSetsResponse) {
    response = &DescribeClsLogSetsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClsLogSets
// 列出CLS日志集
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClsLogSets(request *DescribeClsLogSetsRequest) (response *DescribeClsLogSetsResponse, err error) {
    return c.DescribeClsLogSetsWithContext(context.Background(), request)
}

// DescribeClsLogSets
// 列出CLS日志集
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClsLogSetsWithContext(ctx context.Context, request *DescribeClsLogSetsRequest) (response *DescribeClsLogSetsResponse, err error) {
    if request == nil {
        request = NewDescribeClsLogSetsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClsLogSets require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClsLogSetsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClsLogTopicsRequest() (request *DescribeClsLogTopicsRequest) {
    request = &DescribeClsLogTopicsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClsLogTopics")
    
    
    return
}

func NewDescribeClsLogTopicsResponse() (response *DescribeClsLogTopicsResponse) {
    response = &DescribeClsLogTopicsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClsLogTopics
// 列出CLS日志主题
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClsLogTopics(request *DescribeClsLogTopicsRequest) (response *DescribeClsLogTopicsResponse, err error) {
    return c.DescribeClsLogTopicsWithContext(context.Background(), request)
}

// DescribeClsLogTopics
// 列出CLS日志主题
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClsLogTopicsWithContext(ctx context.Context, request *DescribeClsLogTopicsRequest) (response *DescribeClsLogTopicsResponse, err error) {
    if request == nil {
        request = NewDescribeClsLogTopicsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClsLogTopics require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClsLogTopicsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterAsGroupOptionRequest() (request *DescribeClusterAsGroupOptionRequest) {
    request = &DescribeClusterAsGroupOptionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterAsGroupOption")
    
    
    return
}

func NewDescribeClusterAsGroupOptionResponse() (response *DescribeClusterAsGroupOptionResponse) {
    response = &DescribeClusterAsGroupOptionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterAsGroupOption
// 集群弹性伸缩配置
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterAsGroupOption(request *DescribeClusterAsGroupOptionRequest) (response *DescribeClusterAsGroupOptionResponse, err error) {
    return c.DescribeClusterAsGroupOptionWithContext(context.Background(), request)
}

// DescribeClusterAsGroupOption
// 集群弹性伸缩配置
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterAsGroupOptionWithContext(ctx context.Context, request *DescribeClusterAsGroupOptionRequest) (response *DescribeClusterAsGroupOptionResponse, err error) {
    if request == nil {
        request = NewDescribeClusterAsGroupOptionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterAsGroupOption require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterAsGroupOptionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterAsGroupsRequest() (request *DescribeClusterAsGroupsRequest) {
    request = &DescribeClusterAsGroupsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterAsGroups")
    
    
    return
}

func NewDescribeClusterAsGroupsResponse() (response *DescribeClusterAsGroupsResponse) {
    response = &DescribeClusterAsGroupsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterAsGroups
// 集群关联的伸缩组列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
func (c *Client) DescribeClusterAsGroups(request *DescribeClusterAsGroupsRequest) (response *DescribeClusterAsGroupsResponse, err error) {
    return c.DescribeClusterAsGroupsWithContext(context.Background(), request)
}

// DescribeClusterAsGroups
// 集群关联的伸缩组列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
func (c *Client) DescribeClusterAsGroupsWithContext(ctx context.Context, request *DescribeClusterAsGroupsRequest) (response *DescribeClusterAsGroupsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterAsGroupsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterAsGroups require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterAsGroupsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterAuthenticationOptionsRequest() (request *DescribeClusterAuthenticationOptionsRequest) {
    request = &DescribeClusterAuthenticationOptionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterAuthenticationOptions")
    
    
    return
}

func NewDescribeClusterAuthenticationOptionsResponse() (response *DescribeClusterAuthenticationOptionsResponse) {
    response = &DescribeClusterAuthenticationOptionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterAuthenticationOptions
// 查看集群认证配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterAuthenticationOptions(request *DescribeClusterAuthenticationOptionsRequest) (response *DescribeClusterAuthenticationOptionsResponse, err error) {
    return c.DescribeClusterAuthenticationOptionsWithContext(context.Background(), request)
}

// DescribeClusterAuthenticationOptions
// 查看集群认证配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterAuthenticationOptionsWithContext(ctx context.Context, request *DescribeClusterAuthenticationOptionsRequest) (response *DescribeClusterAuthenticationOptionsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterAuthenticationOptionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterAuthenticationOptions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterAuthenticationOptionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterAuthorizationModeRequest() (request *DescribeClusterAuthorizationModeRequest) {
    request = &DescribeClusterAuthorizationModeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterAuthorizationMode")
    
    
    return
}

func NewDescribeClusterAuthorizationModeResponse() (response *DescribeClusterAuthorizationModeResponse) {
    response = &DescribeClusterAuthorizationModeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterAuthorizationMode
// 获取集群的授权模式
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeClusterAuthorizationMode(request *DescribeClusterAuthorizationModeRequest) (response *DescribeClusterAuthorizationModeResponse, err error) {
    return c.DescribeClusterAuthorizationModeWithContext(context.Background(), request)
}

// DescribeClusterAuthorizationMode
// 获取集群的授权模式
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeClusterAuthorizationModeWithContext(ctx context.Context, request *DescribeClusterAuthorizationModeRequest) (response *DescribeClusterAuthorizationModeResponse, err error) {
    if request == nil {
        request = NewDescribeClusterAuthorizationModeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterAuthorizationMode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterAuthorizationModeResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterAvailableExtraArgsRequest() (request *DescribeClusterAvailableExtraArgsRequest) {
    request = &DescribeClusterAvailableExtraArgsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterAvailableExtraArgs")
    
    
    return
}

func NewDescribeClusterAvailableExtraArgsResponse() (response *DescribeClusterAvailableExtraArgsResponse) {
    response = &DescribeClusterAvailableExtraArgsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterAvailableExtraArgs
// 查询集群可用的自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterAvailableExtraArgs(request *DescribeClusterAvailableExtraArgsRequest) (response *DescribeClusterAvailableExtraArgsResponse, err error) {
    return c.DescribeClusterAvailableExtraArgsWithContext(context.Background(), request)
}

// DescribeClusterAvailableExtraArgs
// 查询集群可用的自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterAvailableExtraArgsWithContext(ctx context.Context, request *DescribeClusterAvailableExtraArgsRequest) (response *DescribeClusterAvailableExtraArgsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterAvailableExtraArgsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterAvailableExtraArgs require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterAvailableExtraArgsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterCIDRsRequest() (request *DescribeClusterCIDRsRequest) {
    request = &DescribeClusterCIDRsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterCIDRs")
    
    
    return
}

func NewDescribeClusterCIDRsResponse() (response *DescribeClusterCIDRsResponse) {
    response = &DescribeClusterCIDRsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterCIDRs
// 查询集群VPC下使用的CIDR
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterCIDRs(request *DescribeClusterCIDRsRequest) (response *DescribeClusterCIDRsResponse, err error) {
    return c.DescribeClusterCIDRsWithContext(context.Background(), request)
}

// DescribeClusterCIDRs
// 查询集群VPC下使用的CIDR
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterCIDRsWithContext(ctx context.Context, request *DescribeClusterCIDRsRequest) (response *DescribeClusterCIDRsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterCIDRsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterCIDRs require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterCIDRsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterCommonNamesRequest() (request *DescribeClusterCommonNamesRequest) {
    request = &DescribeClusterCommonNamesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterCommonNames")
    
    
    return
}

func NewDescribeClusterCommonNamesResponse() (response *DescribeClusterCommonNamesResponse) {
    response = &DescribeClusterCommonNamesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterCommonNames
// 获取指定子账户在RBAC授权模式中对应kube-apiserver客户端证书的CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为50
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeClusterCommonNames(request *DescribeClusterCommonNamesRequest) (response *DescribeClusterCommonNamesResponse, err error) {
    return c.DescribeClusterCommonNamesWithContext(context.Background(), request)
}

// DescribeClusterCommonNames
// 获取指定子账户在RBAC授权模式中对应kube-apiserver客户端证书的CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为50
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeClusterCommonNamesWithContext(ctx context.Context, request *DescribeClusterCommonNamesRequest) (response *DescribeClusterCommonNamesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterCommonNamesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterCommonNames require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterCommonNamesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterControllersRequest() (request *DescribeClusterControllersRequest) {
    request = &DescribeClusterControllersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterControllers")
    
    
    return
}

func NewDescribeClusterControllersResponse() (response *DescribeClusterControllersResponse) {
    response = &DescribeClusterControllersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterControllers
// 用于查询Kubernetes的各个原生控制器是否开启
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterControllers(request *DescribeClusterControllersRequest) (response *DescribeClusterControllersResponse, err error) {
    return c.DescribeClusterControllersWithContext(context.Background(), request)
}

// DescribeClusterControllers
// 用于查询Kubernetes的各个原生控制器是否开启
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterControllersWithContext(ctx context.Context, request *DescribeClusterControllersRequest) (response *DescribeClusterControllersResponse, err error) {
    if request == nil {
        request = NewDescribeClusterControllersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterControllers require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterControllersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterCreateProgressRequest() (request *DescribeClusterCreateProgressRequest) {
    request = &DescribeClusterCreateProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterCreateProgress")
    
    
    return
}

func NewDescribeClusterCreateProgressResponse() (response *DescribeClusterCreateProgressResponse) {
    response = &DescribeClusterCreateProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterCreateProgress
// 获取集群创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterCreateProgress(request *DescribeClusterCreateProgressRequest) (response *DescribeClusterCreateProgressResponse, err error) {
    return c.DescribeClusterCreateProgressWithContext(context.Background(), request)
}

// DescribeClusterCreateProgress
// 获取集群创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterCreateProgressWithContext(ctx context.Context, request *DescribeClusterCreateProgressRequest) (response *DescribeClusterCreateProgressResponse, err error) {
    if request == nil {
        request = NewDescribeClusterCreateProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterCreateProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterCreateProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterEndpointStatusRequest() (request *DescribeClusterEndpointStatusRequest) {
    request = &DescribeClusterEndpointStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterEndpointStatus")
    
    
    return
}

func NewDescribeClusterEndpointStatusResponse() (response *DescribeClusterEndpointStatusResponse) {
    response = &DescribeClusterEndpointStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterEndpointStatus
// 查询集群访问端口状态(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_KUBERNETESINTERNAL = "InternalError.KubernetesInternal"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterEndpointStatus(request *DescribeClusterEndpointStatusRequest) (response *DescribeClusterEndpointStatusResponse, err error) {
    return c.DescribeClusterEndpointStatusWithContext(context.Background(), request)
}

// DescribeClusterEndpointStatus
// 查询集群访问端口状态(独立集群开启内网/外网访问，托管集群支持开启内网访问)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_KUBERNETESINTERNAL = "InternalError.KubernetesInternal"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterEndpointStatusWithContext(ctx context.Context, request *DescribeClusterEndpointStatusRequest) (response *DescribeClusterEndpointStatusResponse, err error) {
    if request == nil {
        request = NewDescribeClusterEndpointStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterEndpointStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterEndpointStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterEndpointVipStatusRequest() (request *DescribeClusterEndpointVipStatusRequest) {
    request = &DescribeClusterEndpointVipStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterEndpointVipStatus")
    
    
    return
}

func NewDescribeClusterEndpointVipStatusResponse() (response *DescribeClusterEndpointVipStatusResponse) {
    response = &DescribeClusterEndpointVipStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterEndpointVipStatus
// 查询集群开启端口流程状态(仅支持托管集群外网端口)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterEndpointVipStatus(request *DescribeClusterEndpointVipStatusRequest) (response *DescribeClusterEndpointVipStatusResponse, err error) {
    return c.DescribeClusterEndpointVipStatusWithContext(context.Background(), request)
}

// DescribeClusterEndpointVipStatus
// 查询集群开启端口流程状态(仅支持托管集群外网端口)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_DFWGETUSGCOUNT = "InternalError.DfwGetUSGCount"
//  INTERNALERROR_DFWGETUSGQUOTA = "InternalError.DfwGetUSGQuota"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterEndpointVipStatusWithContext(ctx context.Context, request *DescribeClusterEndpointVipStatusRequest) (response *DescribeClusterEndpointVipStatusResponse, err error) {
    if request == nil {
        request = NewDescribeClusterEndpointVipStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterEndpointVipStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterEndpointVipStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterEndpointsRequest() (request *DescribeClusterEndpointsRequest) {
    request = &DescribeClusterEndpointsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterEndpoints")
    
    
    return
}

func NewDescribeClusterEndpointsResponse() (response *DescribeClusterEndpointsResponse) {
    response = &DescribeClusterEndpointsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterEndpoints
// 获取集群的访问地址，包括内网地址，外网地址，外网域名，外网访问安全策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterEndpoints(request *DescribeClusterEndpointsRequest) (response *DescribeClusterEndpointsResponse, err error) {
    return c.DescribeClusterEndpointsWithContext(context.Background(), request)
}

// DescribeClusterEndpoints
// 获取集群的访问地址，包括内网地址，外网地址，外网域名，外网访问安全策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterEndpointsWithContext(ctx context.Context, request *DescribeClusterEndpointsRequest) (response *DescribeClusterEndpointsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterEndpointsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterEndpoints require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterEndpointsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterExtraArgsRequest() (request *DescribeClusterExtraArgsRequest) {
    request = &DescribeClusterExtraArgsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterExtraArgs")
    
    
    return
}

func NewDescribeClusterExtraArgsResponse() (response *DescribeClusterExtraArgsResponse) {
    response = &DescribeClusterExtraArgsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterExtraArgs
// 查询集群自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterExtraArgs(request *DescribeClusterExtraArgsRequest) (response *DescribeClusterExtraArgsResponse, err error) {
    return c.DescribeClusterExtraArgsWithContext(context.Background(), request)
}

// DescribeClusterExtraArgs
// 查询集群自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterExtraArgsWithContext(ctx context.Context, request *DescribeClusterExtraArgsRequest) (response *DescribeClusterExtraArgsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterExtraArgsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterExtraArgs require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterExtraArgsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterHealthyStatusRequest() (request *DescribeClusterHealthyStatusRequest) {
    request = &DescribeClusterHealthyStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterHealthyStatus")
    
    
    return
}

func NewDescribeClusterHealthyStatusResponse() (response *DescribeClusterHealthyStatusResponse) {
    response = &DescribeClusterHealthyStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterHealthyStatus
// 描述集群目前的健康状态 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterHealthyStatus(request *DescribeClusterHealthyStatusRequest) (response *DescribeClusterHealthyStatusResponse, err error) {
    return c.DescribeClusterHealthyStatusWithContext(context.Background(), request)
}

// DescribeClusterHealthyStatus
// 描述集群目前的健康状态 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterHealthyStatusWithContext(ctx context.Context, request *DescribeClusterHealthyStatusRequest) (response *DescribeClusterHealthyStatusResponse, err error) {
    if request == nil {
        request = NewDescribeClusterHealthyStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterHealthyStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterHealthyStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterInspectionOverviewsRequest() (request *DescribeClusterInspectionOverviewsRequest) {
    request = &DescribeClusterInspectionOverviewsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterInspectionOverviews")
    
    
    return
}

func NewDescribeClusterInspectionOverviewsResponse() (response *DescribeClusterInspectionOverviewsResponse) {
    response = &DescribeClusterInspectionOverviewsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterInspectionOverviews
// 获得集群巡检报告列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterInspectionOverviews(request *DescribeClusterInspectionOverviewsRequest) (response *DescribeClusterInspectionOverviewsResponse, err error) {
    return c.DescribeClusterInspectionOverviewsWithContext(context.Background(), request)
}

// DescribeClusterInspectionOverviews
// 获得集群巡检报告列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterInspectionOverviewsWithContext(ctx context.Context, request *DescribeClusterInspectionOverviewsRequest) (response *DescribeClusterInspectionOverviewsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterInspectionOverviewsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterInspectionOverviews require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterInspectionOverviewsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterInspectionReportRequest() (request *DescribeClusterInspectionReportRequest) {
    request = &DescribeClusterInspectionReportRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterInspectionReport")
    
    
    return
}

func NewDescribeClusterInspectionReportResponse() (response *DescribeClusterInspectionReportResponse) {
    response = &DescribeClusterInspectionReportResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterInspectionReport
// 获得集群巡检报告页详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterInspectionReport(request *DescribeClusterInspectionReportRequest) (response *DescribeClusterInspectionReportResponse, err error) {
    return c.DescribeClusterInspectionReportWithContext(context.Background(), request)
}

// DescribeClusterInspectionReport
// 获得集群巡检报告页详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterInspectionReportWithContext(ctx context.Context, request *DescribeClusterInspectionReportRequest) (response *DescribeClusterInspectionReportResponse, err error) {
    if request == nil {
        request = NewDescribeClusterInspectionReportRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterInspectionReport require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterInspectionReportResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterInspectionsRequest() (request *DescribeClusterInspectionsRequest) {
    request = &DescribeClusterInspectionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterInspections")
    
    
    return
}

func NewDescribeClusterInspectionsResponse() (response *DescribeClusterInspectionsResponse) {
    response = &DescribeClusterInspectionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterInspections
// 集群巡检概览
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterInspections(request *DescribeClusterInspectionsRequest) (response *DescribeClusterInspectionsResponse, err error) {
    return c.DescribeClusterInspectionsWithContext(context.Background(), request)
}

// DescribeClusterInspections
// 集群巡检概览
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterInspectionsWithContext(ctx context.Context, request *DescribeClusterInspectionsRequest) (response *DescribeClusterInspectionsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterInspectionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterInspections require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterInspectionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterInstanceIdsRequest() (request *DescribeClusterInstanceIdsRequest) {
    request = &DescribeClusterInstanceIdsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterInstanceIds")
    
    
    return
}

func NewDescribeClusterInstanceIdsResponse() (response *DescribeClusterInstanceIdsResponse) {
    response = &DescribeClusterInstanceIdsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterInstanceIds
// 获取集群节点ID列表【仅内部使用】
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
func (c *Client) DescribeClusterInstanceIds(request *DescribeClusterInstanceIdsRequest) (response *DescribeClusterInstanceIdsResponse, err error) {
    return c.DescribeClusterInstanceIdsWithContext(context.Background(), request)
}

// DescribeClusterInstanceIds
// 获取集群节点ID列表【仅内部使用】
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
func (c *Client) DescribeClusterInstanceIdsWithContext(ctx context.Context, request *DescribeClusterInstanceIdsRequest) (response *DescribeClusterInstanceIdsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterInstanceIdsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterInstanceIds require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterInstanceIdsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterInstancesRequest() (request *DescribeClusterInstancesRequest) {
    request = &DescribeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterInstances")
    
    
    return
}

func NewDescribeClusterInstancesResponse() (response *DescribeClusterInstancesResponse) {
    response = &DescribeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterInstances
//  查询集群下节点实例信息 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterInstances(request *DescribeClusterInstancesRequest) (response *DescribeClusterInstancesResponse, err error) {
    return c.DescribeClusterInstancesWithContext(context.Background(), request)
}

// DescribeClusterInstances
//  查询集群下节点实例信息 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterInstancesWithContext(ctx context.Context, request *DescribeClusterInstancesRequest) (response *DescribeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterKubeconfigRequest() (request *DescribeClusterKubeconfigRequest) {
    request = &DescribeClusterKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterKubeconfig")
    
    
    return
}

func NewDescribeClusterKubeconfigResponse() (response *DescribeClusterKubeconfigResponse) {
    response = &DescribeClusterKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterKubeconfig
// 获取集群的kubeconfig文件，不同子账户获取自己的kubeconfig文件，该文件中有每个子账户自己的kube-apiserver的客户端证书，默认首次调此接口时候创建客户端证书，时效20年，未授予任何权限，如果是集群所有者或者主账户，则默认是cluster-admin权限。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterKubeconfig(request *DescribeClusterKubeconfigRequest) (response *DescribeClusterKubeconfigResponse, err error) {
    return c.DescribeClusterKubeconfigWithContext(context.Background(), request)
}

// DescribeClusterKubeconfig
// 获取集群的kubeconfig文件，不同子账户获取自己的kubeconfig文件，该文件中有每个子账户自己的kube-apiserver的客户端证书，默认首次调此接口时候创建客户端证书，时效20年，未授予任何权限，如果是集群所有者或者主账户，则默认是cluster-admin权限。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterKubeconfigWithContext(ctx context.Context, request *DescribeClusterKubeconfigRequest) (response *DescribeClusterKubeconfigResponse, err error) {
    if request == nil {
        request = NewDescribeClusterKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterMigrationRequest() (request *DescribeClusterMigrationRequest) {
    request = &DescribeClusterMigrationRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterMigration")
    
    
    return
}

func NewDescribeClusterMigrationResponse() (response *DescribeClusterMigrationResponse) {
    response = &DescribeClusterMigrationResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterMigration
// 获取TKE集群迁移状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterMigration(request *DescribeClusterMigrationRequest) (response *DescribeClusterMigrationResponse, err error) {
    return c.DescribeClusterMigrationWithContext(context.Background(), request)
}

// DescribeClusterMigration
// 获取TKE集群迁移状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterMigrationWithContext(ctx context.Context, request *DescribeClusterMigrationRequest) (response *DescribeClusterMigrationResponse, err error) {
    if request == nil {
        request = NewDescribeClusterMigrationRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterMigration require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterMigrationResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterNamespacesRequest() (request *DescribeClusterNamespacesRequest) {
    request = &DescribeClusterNamespacesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterNamespaces")
    
    
    return
}

func NewDescribeClusterNamespacesResponse() (response *DescribeClusterNamespacesResponse) {
    response = &DescribeClusterNamespacesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterNamespaces
// 获取集群命名空间列表信息，包括名称、状态、创建时间
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterNamespaces(request *DescribeClusterNamespacesRequest) (response *DescribeClusterNamespacesResponse, err error) {
    return c.DescribeClusterNamespacesWithContext(context.Background(), request)
}

// DescribeClusterNamespaces
// 获取集群命名空间列表信息，包括名称、状态、创建时间
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterNamespacesWithContext(ctx context.Context, request *DescribeClusterNamespacesRequest) (response *DescribeClusterNamespacesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterNamespacesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterNamespaces require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterNamespacesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterNodePoolDetailRequest() (request *DescribeClusterNodePoolDetailRequest) {
    request = &DescribeClusterNodePoolDetailRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterNodePoolDetail")
    
    
    return
}

func NewDescribeClusterNodePoolDetailResponse() (response *DescribeClusterNodePoolDetailResponse) {
    response = &DescribeClusterNodePoolDetailResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterNodePoolDetail
// 查询节点池详情
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterNodePoolDetail(request *DescribeClusterNodePoolDetailRequest) (response *DescribeClusterNodePoolDetailResponse, err error) {
    return c.DescribeClusterNodePoolDetailWithContext(context.Background(), request)
}

// DescribeClusterNodePoolDetail
// 查询节点池详情
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterNodePoolDetailWithContext(ctx context.Context, request *DescribeClusterNodePoolDetailRequest) (response *DescribeClusterNodePoolDetailResponse, err error) {
    if request == nil {
        request = NewDescribeClusterNodePoolDetailRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterNodePoolDetail require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterNodePoolDetailResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterNodePoolsRequest() (request *DescribeClusterNodePoolsRequest) {
    request = &DescribeClusterNodePoolsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterNodePools")
    
    
    return
}

func NewDescribeClusterNodePoolsResponse() (response *DescribeClusterNodePoolsResponse) {
    response = &DescribeClusterNodePoolsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterNodePools
// 查询节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterNodePools(request *DescribeClusterNodePoolsRequest) (response *DescribeClusterNodePoolsResponse, err error) {
    return c.DescribeClusterNodePoolsWithContext(context.Background(), request)
}

// DescribeClusterNodePools
// 查询节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterNodePoolsWithContext(ctx context.Context, request *DescribeClusterNodePoolsRequest) (response *DescribeClusterNodePoolsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterNodePoolsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterNodePools require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterNodePoolsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterPendingReleasesRequest() (request *DescribeClusterPendingReleasesRequest) {
    request = &DescribeClusterPendingReleasesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterPendingReleases")
    
    
    return
}

func NewDescribeClusterPendingReleasesResponse() (response *DescribeClusterPendingReleasesResponse) {
    response = &DescribeClusterPendingReleasesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterPendingReleases
// 在应用市场中查询正在安装中的应用列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterPendingReleases(request *DescribeClusterPendingReleasesRequest) (response *DescribeClusterPendingReleasesResponse, err error) {
    return c.DescribeClusterPendingReleasesWithContext(context.Background(), request)
}

// DescribeClusterPendingReleases
// 在应用市场中查询正在安装中的应用列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterPendingReleasesWithContext(ctx context.Context, request *DescribeClusterPendingReleasesRequest) (response *DescribeClusterPendingReleasesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterPendingReleasesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterPendingReleases require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterPendingReleasesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterPodsRequest() (request *DescribeClusterPodsRequest) {
    request = &DescribeClusterPodsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterPods")
    
    
    return
}

func NewDescribeClusterPodsResponse() (response *DescribeClusterPodsResponse) {
    response = &DescribeClusterPodsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterPods
// 该接口获取集群内Pod相关的详细描述信息，参考kubernetes API获取pod，只对内部短期使用
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_KUBERESOURCEALREADYEXIST = "ResourceInUse.KubeResourceAlreadyExist"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
func (c *Client) DescribeClusterPods(request *DescribeClusterPodsRequest) (response *DescribeClusterPodsResponse, err error) {
    return c.DescribeClusterPodsWithContext(context.Background(), request)
}

// DescribeClusterPods
// 该接口获取集群内Pod相关的详细描述信息，参考kubernetes API获取pod，只对内部短期使用
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_KUBERESOURCEALREADYEXIST = "ResourceInUse.KubeResourceAlreadyExist"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
func (c *Client) DescribeClusterPodsWithContext(ctx context.Context, request *DescribeClusterPodsRequest) (response *DescribeClusterPodsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterPodsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterPods require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterPodsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterReleaseDetailsRequest() (request *DescribeClusterReleaseDetailsRequest) {
    request = &DescribeClusterReleaseDetailsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterReleaseDetails")
    
    
    return
}

func NewDescribeClusterReleaseDetailsResponse() (response *DescribeClusterReleaseDetailsResponse) {
    response = &DescribeClusterReleaseDetailsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterReleaseDetails
// 查询通过应用市场安装的某个应用详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleaseDetails(request *DescribeClusterReleaseDetailsRequest) (response *DescribeClusterReleaseDetailsResponse, err error) {
    return c.DescribeClusterReleaseDetailsWithContext(context.Background(), request)
}

// DescribeClusterReleaseDetails
// 查询通过应用市场安装的某个应用详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleaseDetailsWithContext(ctx context.Context, request *DescribeClusterReleaseDetailsRequest) (response *DescribeClusterReleaseDetailsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterReleaseDetailsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterReleaseDetails require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterReleaseDetailsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterReleaseHistoryRequest() (request *DescribeClusterReleaseHistoryRequest) {
    request = &DescribeClusterReleaseHistoryRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterReleaseHistory")
    
    
    return
}

func NewDescribeClusterReleaseHistoryResponse() (response *DescribeClusterReleaseHistoryResponse) {
    response = &DescribeClusterReleaseHistoryResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterReleaseHistory
// 查询集群在应用市场中某个已安装应用的版本历史
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleaseHistory(request *DescribeClusterReleaseHistoryRequest) (response *DescribeClusterReleaseHistoryResponse, err error) {
    return c.DescribeClusterReleaseHistoryWithContext(context.Background(), request)
}

// DescribeClusterReleaseHistory
// 查询集群在应用市场中某个已安装应用的版本历史
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleaseHistoryWithContext(ctx context.Context, request *DescribeClusterReleaseHistoryRequest) (response *DescribeClusterReleaseHistoryResponse, err error) {
    if request == nil {
        request = NewDescribeClusterReleaseHistoryRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterReleaseHistory require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterReleaseHistoryResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterReleasesRequest() (request *DescribeClusterReleasesRequest) {
    request = &DescribeClusterReleasesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterReleases")
    
    
    return
}

func NewDescribeClusterReleasesResponse() (response *DescribeClusterReleasesResponse) {
    response = &DescribeClusterReleasesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterReleases
// 查询集群在应用市场中已安装应用列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleases(request *DescribeClusterReleasesRequest) (response *DescribeClusterReleasesResponse, err error) {
    return c.DescribeClusterReleasesWithContext(context.Background(), request)
}

// DescribeClusterReleases
// 查询集群在应用市场中已安装应用列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterReleasesWithContext(ctx context.Context, request *DescribeClusterReleasesRequest) (response *DescribeClusterReleasesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterReleasesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterReleases require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterReleasesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterResourceLabelsRequest() (request *DescribeClusterResourceLabelsRequest) {
    request = &DescribeClusterResourceLabelsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterResourceLabels")
    
    
    return
}

func NewDescribeClusterResourceLabelsResponse() (response *DescribeClusterResourceLabelsResponse) {
    response = &DescribeClusterResourceLabelsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterResourceLabels
// 获取集群资源标签列表（仅内部可见）
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterResourceLabels(request *DescribeClusterResourceLabelsRequest) (response *DescribeClusterResourceLabelsResponse, err error) {
    return c.DescribeClusterResourceLabelsWithContext(context.Background(), request)
}

// DescribeClusterResourceLabels
// 获取集群资源标签列表（仅内部可见）
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusterResourceLabelsWithContext(ctx context.Context, request *DescribeClusterResourceLabelsRequest) (response *DescribeClusterResourceLabelsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterResourceLabelsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterResourceLabels require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterResourceLabelsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterRouteTablesRequest() (request *DescribeClusterRouteTablesRequest) {
    request = &DescribeClusterRouteTablesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterRouteTables")
    
    
    return
}

func NewDescribeClusterRouteTablesResponse() (response *DescribeClusterRouteTablesResponse) {
    response = &DescribeClusterRouteTablesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterRouteTables
// 查询集群路由表
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
func (c *Client) DescribeClusterRouteTables(request *DescribeClusterRouteTablesRequest) (response *DescribeClusterRouteTablesResponse, err error) {
    return c.DescribeClusterRouteTablesWithContext(context.Background(), request)
}

// DescribeClusterRouteTables
// 查询集群路由表
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
func (c *Client) DescribeClusterRouteTablesWithContext(ctx context.Context, request *DescribeClusterRouteTablesRequest) (response *DescribeClusterRouteTablesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterRouteTablesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterRouteTables require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterRouteTablesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterRoutesRequest() (request *DescribeClusterRoutesRequest) {
    request = &DescribeClusterRoutesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterRoutes")
    
    
    return
}

func NewDescribeClusterRoutesResponse() (response *DescribeClusterRoutesResponse) {
    response = &DescribeClusterRoutesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterRoutes
// 查询集群路由
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterRoutes(request *DescribeClusterRoutesRequest) (response *DescribeClusterRoutesResponse, err error) {
    return c.DescribeClusterRoutesWithContext(context.Background(), request)
}

// DescribeClusterRoutes
// 查询集群路由
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterRoutesWithContext(ctx context.Context, request *DescribeClusterRoutesRequest) (response *DescribeClusterRoutesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterRoutesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterRoutes require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterRoutesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterRuntimeVersionRequest() (request *DescribeClusterRuntimeVersionRequest) {
    request = &DescribeClusterRuntimeVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterRuntimeVersion")
    
    
    return
}

func NewDescribeClusterRuntimeVersionResponse() (response *DescribeClusterRuntimeVersionResponse) {
    response = &DescribeClusterRuntimeVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterRuntimeVersion
// 查询当前集群运行时版本，以及升级可选版本信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterRuntimeVersion(request *DescribeClusterRuntimeVersionRequest) (response *DescribeClusterRuntimeVersionResponse, err error) {
    return c.DescribeClusterRuntimeVersionWithContext(context.Background(), request)
}

// DescribeClusterRuntimeVersion
// 查询当前集群运行时版本，以及升级可选版本信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClusterRuntimeVersionWithContext(ctx context.Context, request *DescribeClusterRuntimeVersionRequest) (response *DescribeClusterRuntimeVersionResponse, err error) {
    if request == nil {
        request = NewDescribeClusterRuntimeVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterRuntimeVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterRuntimeVersionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterSecurityRequest() (request *DescribeClusterSecurityRequest) {
    request = &DescribeClusterSecurityRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterSecurity")
    
    
    return
}

func NewDescribeClusterSecurityResponse() (response *DescribeClusterSecurityResponse) {
    response = &DescribeClusterSecurityResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterSecurity
// 集群的密钥信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_COMPONENTCLIENTHTTP = "InternalError.ComponentClientHttp"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_LBCOMMON = "InternalError.LbCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CIDRINVALID = "InvalidParameter.CidrInvalid"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterSecurity(request *DescribeClusterSecurityRequest) (response *DescribeClusterSecurityResponse, err error) {
    return c.DescribeClusterSecurityWithContext(context.Background(), request)
}

// DescribeClusterSecurity
// 集群的密钥信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_COMPONENTCLIENTHTTP = "InternalError.ComponentClientHttp"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_LBCOMMON = "InternalError.LbCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CIDRINVALID = "InvalidParameter.CidrInvalid"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERESOURCENOTFOUND = "ResourceNotFound.KubeResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeClusterSecurityWithContext(ctx context.Context, request *DescribeClusterSecurityRequest) (response *DescribeClusterSecurityResponse, err error) {
    if request == nil {
        request = NewDescribeClusterSecurityRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterSecurity require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterSecurityResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterSecurityGroupRequest() (request *DescribeClusterSecurityGroupRequest) {
    request = &DescribeClusterSecurityGroupRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterSecurityGroup")
    
    
    return
}

func NewDescribeClusterSecurityGroupResponse() (response *DescribeClusterSecurityGroupResponse) {
    response = &DescribeClusterSecurityGroupResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterSecurityGroup
// 查询集群安全组信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterSecurityGroup(request *DescribeClusterSecurityGroupRequest) (response *DescribeClusterSecurityGroupResponse, err error) {
    return c.DescribeClusterSecurityGroupWithContext(context.Background(), request)
}

// DescribeClusterSecurityGroup
// 查询集群安全组信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeClusterSecurityGroupWithContext(ctx context.Context, request *DescribeClusterSecurityGroupRequest) (response *DescribeClusterSecurityGroupResponse, err error) {
    if request == nil {
        request = NewDescribeClusterSecurityGroupRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterSecurityGroup require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterSecurityGroupResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterServicesRequest() (request *DescribeClusterServicesRequest) {
    request = &DescribeClusterServicesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterServices")
    
    
    return
}

func NewDescribeClusterServicesResponse() (response *DescribeClusterServicesResponse) {
    response = &DescribeClusterServicesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterServices
// 该接口获取集群内Service相关的详细描述信息，参考kubernetes API获取Service，只对内部短期使用
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_NORMGETLB = "InternalError.NormGetLb"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterServices(request *DescribeClusterServicesRequest) (response *DescribeClusterServicesResponse, err error) {
    return c.DescribeClusterServicesWithContext(context.Background(), request)
}

// DescribeClusterServices
// 该接口获取集群内Service相关的详细描述信息，参考kubernetes API获取Service，只对内部短期使用
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_NORMGETLB = "InternalError.NormGetLb"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeClusterServicesWithContext(ctx context.Context, request *DescribeClusterServicesRequest) (response *DescribeClusterServicesResponse, err error) {
    if request == nil {
        request = NewDescribeClusterServicesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterServices require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterServicesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterStaticInstallerRequest() (request *DescribeClusterStaticInstallerRequest) {
    request = &DescribeClusterStaticInstallerRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterStaticInstaller")
    
    
    return
}

func NewDescribeClusterStaticInstallerResponse() (response *DescribeClusterStaticInstallerResponse) {
    response = &DescribeClusterStaticInstallerResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterStaticInstaller
// 获取集群节点静态安装脚本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeClusterStaticInstaller(request *DescribeClusterStaticInstallerRequest) (response *DescribeClusterStaticInstallerResponse, err error) {
    return c.DescribeClusterStaticInstallerWithContext(context.Background(), request)
}

// DescribeClusterStaticInstaller
// 获取集群节点静态安装脚本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeClusterStaticInstallerWithContext(ctx context.Context, request *DescribeClusterStaticInstallerRequest) (response *DescribeClusterStaticInstallerResponse, err error) {
    if request == nil {
        request = NewDescribeClusterStaticInstallerRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterStaticInstaller require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterStaticInstallerResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterStatusRequest() (request *DescribeClusterStatusRequest) {
    request = &DescribeClusterStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterStatus")
    
    
    return
}

func NewDescribeClusterStatusResponse() (response *DescribeClusterStatusResponse) {
    response = &DescribeClusterStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterStatus
// 查看集群状态列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterStatus(request *DescribeClusterStatusRequest) (response *DescribeClusterStatusResponse, err error) {
    return c.DescribeClusterStatusWithContext(context.Background(), request)
}

// DescribeClusterStatus
// 查看集群状态列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeClusterStatusWithContext(ctx context.Context, request *DescribeClusterStatusRequest) (response *DescribeClusterStatusResponse, err error) {
    if request == nil {
        request = NewDescribeClusterStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterVirtualNodeRequest() (request *DescribeClusterVirtualNodeRequest) {
    request = &DescribeClusterVirtualNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterVirtualNode")
    
    
    return
}

func NewDescribeClusterVirtualNodeResponse() (response *DescribeClusterVirtualNodeResponse) {
    response = &DescribeClusterVirtualNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterVirtualNode
// 查看虚拟节点列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterVirtualNode(request *DescribeClusterVirtualNodeRequest) (response *DescribeClusterVirtualNodeResponse, err error) {
    return c.DescribeClusterVirtualNodeWithContext(context.Background(), request)
}

// DescribeClusterVirtualNode
// 查看虚拟节点列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterVirtualNodeWithContext(ctx context.Context, request *DescribeClusterVirtualNodeRequest) (response *DescribeClusterVirtualNodeResponse, err error) {
    if request == nil {
        request = NewDescribeClusterVirtualNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterVirtualNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterVirtualNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClusterVirtualNodePoolsRequest() (request *DescribeClusterVirtualNodePoolsRequest) {
    request = &DescribeClusterVirtualNodePoolsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusterVirtualNodePools")
    
    
    return
}

func NewDescribeClusterVirtualNodePoolsResponse() (response *DescribeClusterVirtualNodePoolsResponse) {
    response = &DescribeClusterVirtualNodePoolsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusterVirtualNodePools
// 查看虚拟节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterVirtualNodePools(request *DescribeClusterVirtualNodePoolsRequest) (response *DescribeClusterVirtualNodePoolsResponse, err error) {
    return c.DescribeClusterVirtualNodePoolsWithContext(context.Background(), request)
}

// DescribeClusterVirtualNodePools
// 查看虚拟节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeClusterVirtualNodePoolsWithContext(ctx context.Context, request *DescribeClusterVirtualNodePoolsRequest) (response *DescribeClusterVirtualNodePoolsResponse, err error) {
    if request == nil {
        request = NewDescribeClusterVirtualNodePoolsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusterVirtualNodePools require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClusterVirtualNodePoolsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersRequest() (request *DescribeClustersRequest) {
    request = &DescribeClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClusters")
    
    
    return
}

func NewDescribeClustersResponse() (response *DescribeClustersResponse) {
    response = &DescribeClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClusters
// 查询集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClusters(request *DescribeClustersRequest) (response *DescribeClustersResponse, err error) {
    return c.DescribeClustersWithContext(context.Background(), request)
}

// DescribeClusters
// 查询集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeClustersWithContext(ctx context.Context, request *DescribeClustersRequest) (response *DescribeClustersResponse, err error) {
    if request == nil {
        request = NewDescribeClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersCostCacheWarmedRequest() (request *DescribeClustersCostCacheWarmedRequest) {
    request = &DescribeClustersCostCacheWarmedRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersCostCacheWarmed")
    
    
    return
}

func NewDescribeClustersCostCacheWarmedResponse() (response *DescribeClustersCostCacheWarmedResponse) {
    response = &DescribeClustersCostCacheWarmedResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersCostCacheWarmed
// 集群的成本数据是否已经缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostCacheWarmed(request *DescribeClustersCostCacheWarmedRequest) (response *DescribeClustersCostCacheWarmedResponse, err error) {
    return c.DescribeClustersCostCacheWarmedWithContext(context.Background(), request)
}

// DescribeClustersCostCacheWarmed
// 集群的成本数据是否已经缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostCacheWarmedWithContext(ctx context.Context, request *DescribeClustersCostCacheWarmedRequest) (response *DescribeClustersCostCacheWarmedResponse, err error) {
    if request == nil {
        request = NewDescribeClustersCostCacheWarmedRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersCostCacheWarmed require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersCostCacheWarmedResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersCostQueryAggregatedRequest() (request *DescribeClustersCostQueryAggregatedRequest) {
    request = &DescribeClustersCostQueryAggregatedRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersCostQueryAggregated")
    
    
    return
}

func NewDescribeClustersCostQueryAggregatedResponse() (response *DescribeClustersCostQueryAggregatedResponse) {
    response = &DescribeClustersCostQueryAggregatedResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersCostQueryAggregated
// 搜索集群成本相关聚合数据，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据，包括 cpu、ram使用效率等
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostQueryAggregated(request *DescribeClustersCostQueryAggregatedRequest) (response *DescribeClustersCostQueryAggregatedResponse, err error) {
    return c.DescribeClustersCostQueryAggregatedWithContext(context.Background(), request)
}

// DescribeClustersCostQueryAggregated
// 搜索集群成本相关聚合数据，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据，包括 cpu、ram使用效率等
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostQueryAggregatedWithContext(ctx context.Context, request *DescribeClustersCostQueryAggregatedRequest) (response *DescribeClustersCostQueryAggregatedResponse, err error) {
    if request == nil {
        request = NewDescribeClustersCostQueryAggregatedRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersCostQueryAggregated require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersCostQueryAggregatedResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersCostStatesRequest() (request *DescribeClustersCostStatesRequest) {
    request = &DescribeClustersCostStatesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersCostStates")
    
    
    return
}

func NewDescribeClustersCostStatesResponse() (response *DescribeClustersCostStatesResponse) {
    response = &DescribeClustersCostStatesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersCostStates
// 集群成本概览列表数据
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostStates(request *DescribeClustersCostStatesRequest) (response *DescribeClustersCostStatesResponse, err error) {
    return c.DescribeClustersCostStatesWithContext(context.Background(), request)
}

// DescribeClustersCostStates
// 集群成本概览列表数据
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostStatesWithContext(ctx context.Context, request *DescribeClustersCostStatesRequest) (response *DescribeClustersCostStatesResponse, err error) {
    if request == nil {
        request = NewDescribeClustersCostStatesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersCostStates require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersCostStatesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersCostSumAggregatedRequest() (request *DescribeClustersCostSumAggregatedRequest) {
    request = &DescribeClustersCostSumAggregatedRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersCostSumAggregated")
    
    
    return
}

func NewDescribeClustersCostSumAggregatedResponse() (response *DescribeClustersCostSumAggregatedResponse) {
    response = &DescribeClustersCostSumAggregatedResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersCostSumAggregated
// 按照维度聚合后的该维度对应的总成本数据，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostSumAggregated(request *DescribeClustersCostSumAggregatedRequest) (response *DescribeClustersCostSumAggregatedResponse, err error) {
    return c.DescribeClustersCostSumAggregatedWithContext(context.Background(), request)
}

// DescribeClustersCostSumAggregated
// 按照维度聚合后的该维度对应的总成本数据，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostSumAggregatedWithContext(ctx context.Context, request *DescribeClustersCostSumAggregatedRequest) (response *DescribeClustersCostSumAggregatedResponse, err error) {
    if request == nil {
        request = NewDescribeClustersCostSumAggregatedRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersCostSumAggregated require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersCostSumAggregatedResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersCostTopAggregatedRequest() (request *DescribeClustersCostTopAggregatedRequest) {
    request = &DescribeClustersCostTopAggregatedRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersCostTopAggregated")
    
    
    return
}

func NewDescribeClustersCostTopAggregatedResponse() (response *DescribeClustersCostTopAggregatedResponse) {
    response = &DescribeClustersCostTopAggregatedResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersCostTopAggregated
// 获取集群成本相关聚合数据的TOP N排序列表，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据，包括 cpu、ram使用效率等
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostTopAggregated(request *DescribeClustersCostTopAggregatedRequest) (response *DescribeClustersCostTopAggregatedResponse, err error) {
    return c.DescribeClustersCostTopAggregatedWithContext(context.Background(), request)
}

// DescribeClustersCostTopAggregated
// 获取集群成本相关聚合数据的TOP N排序列表，比如按照 聚合维度，cluster、namespace、node、deployment、daemonset、statefulset、job、controller、pod、container 聚合后的数据，包括 cpu、ram使用效率等
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeClustersCostTopAggregatedWithContext(ctx context.Context, request *DescribeClustersCostTopAggregatedRequest) (response *DescribeClustersCostTopAggregatedResponse, err error) {
    if request == nil {
        request = NewDescribeClustersCostTopAggregatedRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersCostTopAggregated require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersCostTopAggregatedResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeClustersResourceStatusRequest() (request *DescribeClustersResourceStatusRequest) {
    request = &DescribeClustersResourceStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeClustersResourceStatus")
    
    
    return
}

func NewDescribeClustersResourceStatusResponse() (response *DescribeClustersResourceStatusResponse) {
    response = &DescribeClustersResourceStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeClustersResourceStatus
// 获取集群资源状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClustersResourceStatus(request *DescribeClustersResourceStatusRequest) (response *DescribeClustersResourceStatusResponse, err error) {
    return c.DescribeClustersResourceStatusWithContext(context.Background(), request)
}

// DescribeClustersResourceStatus
// 获取集群资源状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeClustersResourceStatusWithContext(ctx context.Context, request *DescribeClustersResourceStatusRequest) (response *DescribeClustersResourceStatusResponse, err error) {
    if request == nil {
        request = NewDescribeClustersResourceStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeClustersResourceStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeClustersResourceStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeContainerLogRequest() (request *DescribeContainerLogRequest) {
    request = &DescribeContainerLogRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeContainerLog")
    
    
    return
}

func NewDescribeContainerLogResponse() (response *DescribeContainerLogResponse) {
    response = &DescribeContainerLogResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeContainerLog
// 查询容器组中容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeContainerLog(request *DescribeContainerLogRequest) (response *DescribeContainerLogResponse, err error) {
    return c.DescribeContainerLogWithContext(context.Background(), request)
}

// DescribeContainerLog
// 查询容器组中容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeContainerLogWithContext(ctx context.Context, request *DescribeContainerLogRequest) (response *DescribeContainerLogResponse, err error) {
    if request == nil {
        request = NewDescribeContainerLogRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeContainerLog require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeContainerLogResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCostAggregatedMetaInfoRequest() (request *DescribeCostAggregatedMetaInfoRequest) {
    request = &DescribeCostAggregatedMetaInfoRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCostAggregatedMetaInfo")
    
    
    return
}

func NewDescribeCostAggregatedMetaInfoResponse() (response *DescribeCostAggregatedMetaInfoResponse) {
    response = &DescribeCostAggregatedMetaInfoResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCostAggregatedMetaInfo
// 获取集群成本聚合记录的元信息数据，包括某个聚合记录包含的容器的类型（pause、normal）以及容器是否设置了requestlimit等(NoRequestsNoLimits、NoRequestsHasLimits、HasRequestsNoLimits、HasRequestsHasLimits)
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeCostAggregatedMetaInfo(request *DescribeCostAggregatedMetaInfoRequest) (response *DescribeCostAggregatedMetaInfoResponse, err error) {
    return c.DescribeCostAggregatedMetaInfoWithContext(context.Background(), request)
}

// DescribeCostAggregatedMetaInfo
// 获取集群成本聚合记录的元信息数据，包括某个聚合记录包含的容器的类型（pause、normal）以及容器是否设置了requestlimit等(NoRequestsNoLimits、NoRequestsHasLimits、HasRequestsNoLimits、HasRequestsHasLimits)
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeCostAggregatedMetaInfoWithContext(ctx context.Context, request *DescribeCostAggregatedMetaInfoRequest) (response *DescribeCostAggregatedMetaInfoResponse, err error) {
    if request == nil {
        request = NewDescribeCostAggregatedMetaInfoRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCostAggregatedMetaInfo require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCostAggregatedMetaInfoResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeCostTaskProgressRequest() (request *DescribeCostTaskProgressRequest) {
    request = &DescribeCostTaskProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeCostTaskProgress")
    
    
    return
}

func NewDescribeCostTaskProgressResponse() (response *DescribeCostTaskProgressResponse) {
    response = &DescribeCostTaskProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeCostTaskProgress
// 获取成本分析运维任务进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeCostTaskProgress(request *DescribeCostTaskProgressRequest) (response *DescribeCostTaskProgressResponse, err error) {
    return c.DescribeCostTaskProgressWithContext(context.Background(), request)
}

// DescribeCostTaskProgress
// 获取成本分析运维任务进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeCostTaskProgressWithContext(ctx context.Context, request *DescribeCostTaskProgressRequest) (response *DescribeCostTaskProgressResponse, err error) {
    if request == nil {
        request = NewDescribeCostTaskProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeCostTaskProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeCostTaskProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeECMInstancesRequest() (request *DescribeECMInstancesRequest) {
    request = &DescribeECMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeECMInstances")
    
    
    return
}

func NewDescribeECMInstancesResponse() (response *DescribeECMInstancesResponse) {
    response = &DescribeECMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeECMInstances
// 获取ECM实例相关信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeECMInstances(request *DescribeECMInstancesRequest) (response *DescribeECMInstancesResponse, err error) {
    return c.DescribeECMInstancesWithContext(context.Background(), request)
}

// DescribeECMInstances
// 获取ECM实例相关信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeECMInstancesWithContext(ctx context.Context, request *DescribeECMInstancesRequest) (response *DescribeECMInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeECMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeECMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeECMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSClusterAuthorizationModeRequest() (request *DescribeEKSClusterAuthorizationModeRequest) {
    request = &DescribeEKSClusterAuthorizationModeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSClusterAuthorizationMode")
    
    
    return
}

func NewDescribeEKSClusterAuthorizationModeResponse() (response *DescribeEKSClusterAuthorizationModeResponse) {
    response = &DescribeEKSClusterAuthorizationModeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSClusterAuthorizationMode
// 获取EKS集群授权模式
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterAuthorizationMode(request *DescribeEKSClusterAuthorizationModeRequest) (response *DescribeEKSClusterAuthorizationModeResponse, err error) {
    return c.DescribeEKSClusterAuthorizationModeWithContext(context.Background(), request)
}

// DescribeEKSClusterAuthorizationMode
// 获取EKS集群授权模式
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterAuthorizationModeWithContext(ctx context.Context, request *DescribeEKSClusterAuthorizationModeRequest) (response *DescribeEKSClusterAuthorizationModeResponse, err error) {
    if request == nil {
        request = NewDescribeEKSClusterAuthorizationModeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSClusterAuthorizationMode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSClusterAuthorizationModeResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSClusterCommonNamesRequest() (request *DescribeEKSClusterCommonNamesRequest) {
    request = &DescribeEKSClusterCommonNamesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSClusterCommonNames")
    
    
    return
}

func NewDescribeEKSClusterCommonNamesResponse() (response *DescribeEKSClusterCommonNamesResponse) {
    response = &DescribeEKSClusterCommonNamesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSClusterCommonNames
// 获取指定子账户的对应kube-apiserver的客户端证书中CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为50
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeEKSClusterCommonNames(request *DescribeEKSClusterCommonNamesRequest) (response *DescribeEKSClusterCommonNamesResponse, err error) {
    return c.DescribeEKSClusterCommonNamesWithContext(context.Background(), request)
}

// DescribeEKSClusterCommonNames
// 获取指定子账户的对应kube-apiserver的客户端证书中CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为50
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeEKSClusterCommonNamesWithContext(ctx context.Context, request *DescribeEKSClusterCommonNamesRequest) (response *DescribeEKSClusterCommonNamesResponse, err error) {
    if request == nil {
        request = NewDescribeEKSClusterCommonNamesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSClusterCommonNames require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSClusterCommonNamesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSClusterCredentialRequest() (request *DescribeEKSClusterCredentialRequest) {
    request = &DescribeEKSClusterCredentialRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSClusterCredential")
    
    
    return
}

func NewDescribeEKSClusterCredentialResponse() (response *DescribeEKSClusterCredentialResponse) {
    response = &DescribeEKSClusterCredentialResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSClusterCredential
// 获取弹性容器集群的接入认证信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterCredential(request *DescribeEKSClusterCredentialRequest) (response *DescribeEKSClusterCredentialResponse, err error) {
    return c.DescribeEKSClusterCredentialWithContext(context.Background(), request)
}

// DescribeEKSClusterCredential
// 获取弹性容器集群的接入认证信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterCredentialWithContext(ctx context.Context, request *DescribeEKSClusterCredentialRequest) (response *DescribeEKSClusterCredentialResponse, err error) {
    if request == nil {
        request = NewDescribeEKSClusterCredentialRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSClusterCredential require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSClusterCredentialResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSClusterStatusRequest() (request *DescribeEKSClusterStatusRequest) {
    request = &DescribeEKSClusterStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSClusterStatus")
    
    
    return
}

func NewDescribeEKSClusterStatusResponse() (response *DescribeEKSClusterStatusResponse) {
    response = &DescribeEKSClusterStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSClusterStatus
// 获取弹性容器集群的当前状态以及过程信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterStatus(request *DescribeEKSClusterStatusRequest) (response *DescribeEKSClusterStatusResponse, err error) {
    return c.DescribeEKSClusterStatusWithContext(context.Background(), request)
}

// DescribeEKSClusterStatus
// 获取弹性容器集群的当前状态以及过程信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusterStatusWithContext(ctx context.Context, request *DescribeEKSClusterStatusRequest) (response *DescribeEKSClusterStatusResponse, err error) {
    if request == nil {
        request = NewDescribeEKSClusterStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSClusterStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSClusterStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSClustersRequest() (request *DescribeEKSClustersRequest) {
    request = &DescribeEKSClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSClusters")
    
    
    return
}

func NewDescribeEKSClustersResponse() (response *DescribeEKSClustersResponse) {
    response = &DescribeEKSClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSClusters
// 查询弹性集群列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClusters(request *DescribeEKSClustersRequest) (response *DescribeEKSClustersResponse, err error) {
    return c.DescribeEKSClustersWithContext(context.Background(), request)
}

// DescribeEKSClusters
// 查询弹性集群列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSClustersWithContext(ctx context.Context, request *DescribeEKSClustersRequest) (response *DescribeEKSClustersResponse, err error) {
    if request == nil {
        request = NewDescribeEKSClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSContainerInstanceEventRequest() (request *DescribeEKSContainerInstanceEventRequest) {
    request = &DescribeEKSContainerInstanceEventRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSContainerInstanceEvent")
    
    
    return
}

func NewDescribeEKSContainerInstanceEventResponse() (response *DescribeEKSContainerInstanceEventResponse) {
    response = &DescribeEKSContainerInstanceEventResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSContainerInstanceEvent
// 查询容器实例的事件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINSUFFICIENT = "ResourceInsufficient"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCESSOLDOUT = "ResourcesSoldOut"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSContainerInstanceEvent(request *DescribeEKSContainerInstanceEventRequest) (response *DescribeEKSContainerInstanceEventResponse, err error) {
    return c.DescribeEKSContainerInstanceEventWithContext(context.Background(), request)
}

// DescribeEKSContainerInstanceEvent
// 查询容器实例的事件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINSUFFICIENT = "ResourceInsufficient"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCESSOLDOUT = "ResourcesSoldOut"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEKSContainerInstanceEventWithContext(ctx context.Context, request *DescribeEKSContainerInstanceEventRequest) (response *DescribeEKSContainerInstanceEventResponse, err error) {
    if request == nil {
        request = NewDescribeEKSContainerInstanceEventRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSContainerInstanceEvent require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSContainerInstanceEventResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSContainerInstanceRegionsRequest() (request *DescribeEKSContainerInstanceRegionsRequest) {
    request = &DescribeEKSContainerInstanceRegionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSContainerInstanceRegions")
    
    
    return
}

func NewDescribeEKSContainerInstanceRegionsResponse() (response *DescribeEKSContainerInstanceRegionsResponse) {
    response = &DescribeEKSContainerInstanceRegionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSContainerInstanceRegions
// 查询容器实例支持的地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEKSContainerInstanceRegions(request *DescribeEKSContainerInstanceRegionsRequest) (response *DescribeEKSContainerInstanceRegionsResponse, err error) {
    return c.DescribeEKSContainerInstanceRegionsWithContext(context.Background(), request)
}

// DescribeEKSContainerInstanceRegions
// 查询容器实例支持的地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEKSContainerInstanceRegionsWithContext(ctx context.Context, request *DescribeEKSContainerInstanceRegionsRequest) (response *DescribeEKSContainerInstanceRegionsResponse, err error) {
    if request == nil {
        request = NewDescribeEKSContainerInstanceRegionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSContainerInstanceRegions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSContainerInstanceRegionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSContainerInstancesRequest() (request *DescribeEKSContainerInstancesRequest) {
    request = &DescribeEKSContainerInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSContainerInstances")
    
    
    return
}

func NewDescribeEKSContainerInstancesResponse() (response *DescribeEKSContainerInstancesResponse) {
    response = &DescribeEKSContainerInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSContainerInstances
// 查询容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEKSContainerInstances(request *DescribeEKSContainerInstancesRequest) (response *DescribeEKSContainerInstancesResponse, err error) {
    return c.DescribeEKSContainerInstancesWithContext(context.Background(), request)
}

// DescribeEKSContainerInstances
// 查询容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEKSContainerInstancesWithContext(ctx context.Context, request *DescribeEKSContainerInstancesRequest) (response *DescribeEKSContainerInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeEKSContainerInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSContainerInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSContainerInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSInstanceRegionsRequest() (request *DescribeEKSInstanceRegionsRequest) {
    request = &DescribeEKSInstanceRegionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSInstanceRegions")
    
    
    return
}

func NewDescribeEKSInstanceRegionsResponse() (response *DescribeEKSInstanceRegionsResponse) {
    response = &DescribeEKSInstanceRegionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSInstanceRegions
// 查询容器实例支持的地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEKSInstanceRegions(request *DescribeEKSInstanceRegionsRequest) (response *DescribeEKSInstanceRegionsResponse, err error) {
    return c.DescribeEKSInstanceRegionsWithContext(context.Background(), request)
}

// DescribeEKSInstanceRegions
// 查询容器实例支持的地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEKSInstanceRegionsWithContext(ctx context.Context, request *DescribeEKSInstanceRegionsRequest) (response *DescribeEKSInstanceRegionsResponse, err error) {
    if request == nil {
        request = NewDescribeEKSInstanceRegionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSInstanceRegions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSInstanceRegionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEKSInstancesRequest() (request *DescribeEKSInstancesRequest) {
    request = &DescribeEKSInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEKSInstances")
    
    
    return
}

func NewDescribeEKSInstancesResponse() (response *DescribeEKSInstancesResponse) {
    response = &DescribeEKSInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEKSInstances
// 查询弹性容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEKSInstances(request *DescribeEKSInstancesRequest) (response *DescribeEKSInstancesResponse, err error) {
    return c.DescribeEKSInstancesWithContext(context.Background(), request)
}

// DescribeEKSInstances
// 查询弹性容器实例
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEKSInstancesWithContext(ctx context.Context, request *DescribeEKSInstancesRequest) (response *DescribeEKSInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeEKSInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEKSInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEKSInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeAvailableExtraArgsRequest() (request *DescribeEdgeAvailableExtraArgsRequest) {
    request = &DescribeEdgeAvailableExtraArgsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeAvailableExtraArgs")
    
    
    return
}

func NewDescribeEdgeAvailableExtraArgsResponse() (response *DescribeEdgeAvailableExtraArgsResponse) {
    response = &DescribeEdgeAvailableExtraArgsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeAvailableExtraArgs
// 查询边缘容器集群可用的自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEdgeAvailableExtraArgs(request *DescribeEdgeAvailableExtraArgsRequest) (response *DescribeEdgeAvailableExtraArgsResponse, err error) {
    return c.DescribeEdgeAvailableExtraArgsWithContext(context.Background(), request)
}

// DescribeEdgeAvailableExtraArgs
// 查询边缘容器集群可用的自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEdgeAvailableExtraArgsWithContext(ctx context.Context, request *DescribeEdgeAvailableExtraArgsRequest) (response *DescribeEdgeAvailableExtraArgsResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeAvailableExtraArgsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeAvailableExtraArgs require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeAvailableExtraArgsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeCVMInstancesRequest() (request *DescribeEdgeCVMInstancesRequest) {
    request = &DescribeEdgeCVMInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeCVMInstances")
    
    
    return
}

func NewDescribeEdgeCVMInstancesResponse() (response *DescribeEdgeCVMInstancesResponse) {
    response = &DescribeEdgeCVMInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeCVMInstances
// 获取边缘容器CVM实例相关信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeCVMInstances(request *DescribeEdgeCVMInstancesRequest) (response *DescribeEdgeCVMInstancesResponse, err error) {
    return c.DescribeEdgeCVMInstancesWithContext(context.Background(), request)
}

// DescribeEdgeCVMInstances
// 获取边缘容器CVM实例相关信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeCVMInstancesWithContext(ctx context.Context, request *DescribeEdgeCVMInstancesRequest) (response *DescribeEdgeCVMInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeCVMInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeCVMInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeCVMInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeClusterExtraArgsRequest() (request *DescribeEdgeClusterExtraArgsRequest) {
    request = &DescribeEdgeClusterExtraArgsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeClusterExtraArgs")
    
    
    return
}

func NewDescribeEdgeClusterExtraArgsResponse() (response *DescribeEdgeClusterExtraArgsResponse) {
    response = &DescribeEdgeClusterExtraArgsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeClusterExtraArgs
// 查询边缘集群自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeClusterExtraArgs(request *DescribeEdgeClusterExtraArgsRequest) (response *DescribeEdgeClusterExtraArgsResponse, err error) {
    return c.DescribeEdgeClusterExtraArgsWithContext(context.Background(), request)
}

// DescribeEdgeClusterExtraArgs
// 查询边缘集群自定义参数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeClusterExtraArgsWithContext(ctx context.Context, request *DescribeEdgeClusterExtraArgsRequest) (response *DescribeEdgeClusterExtraArgsResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeClusterExtraArgsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeClusterExtraArgs require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeClusterExtraArgsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeClusterInstancesRequest() (request *DescribeEdgeClusterInstancesRequest) {
    request = &DescribeEdgeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeClusterInstances")
    
    
    return
}

func NewDescribeEdgeClusterInstancesResponse() (response *DescribeEdgeClusterInstancesResponse) {
    response = &DescribeEdgeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeClusterInstances
// 查询边缘计算集群的节点信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeClusterInstances(request *DescribeEdgeClusterInstancesRequest) (response *DescribeEdgeClusterInstancesResponse, err error) {
    return c.DescribeEdgeClusterInstancesWithContext(context.Background(), request)
}

// DescribeEdgeClusterInstances
// 查询边缘计算集群的节点信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeClusterInstancesWithContext(ctx context.Context, request *DescribeEdgeClusterInstancesRequest) (response *DescribeEdgeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeDashboardIDRequest() (request *DescribeEdgeDashboardIDRequest) {
    request = &DescribeEdgeDashboardIDRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeDashboardID")
    
    
    return
}

func NewDescribeEdgeDashboardIDResponse() (response *DescribeEdgeDashboardIDResponse) {
    response = &DescribeEdgeDashboardIDResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeDashboardID(request *DescribeEdgeDashboardIDRequest) (response *DescribeEdgeDashboardIDResponse, err error) {
    return c.DescribeEdgeDashboardIDWithContext(context.Background(), request)
}

// DescribeEdgeDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeDashboardIDWithContext(ctx context.Context, request *DescribeEdgeDashboardIDRequest) (response *DescribeEdgeDashboardIDResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeDashboardIDRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeDashboardID require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeDashboardIDResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeEniRequest() (request *DescribeEdgeEniRequest) {
    request = &DescribeEdgeEniRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeEni")
    
    
    return
}

func NewDescribeEdgeEniResponse() (response *DescribeEdgeEniResponse) {
    response = &DescribeEdgeEniResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeEni
// 获取边缘集群是否开启支持独立网卡
//
// 可能返回的错误码:
//  AUTHFAILURE_INVALIDAUTHORIZATION = "AuthFailure.InvalidAuthorization"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeEni(request *DescribeEdgeEniRequest) (response *DescribeEdgeEniResponse, err error) {
    return c.DescribeEdgeEniWithContext(context.Background(), request)
}

// DescribeEdgeEni
// 获取边缘集群是否开启支持独立网卡
//
// 可能返回的错误码:
//  AUTHFAILURE_INVALIDAUTHORIZATION = "AuthFailure.InvalidAuthorization"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeEniWithContext(ctx context.Context, request *DescribeEdgeEniRequest) (response *DescribeEdgeEniResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeEniRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeEni require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeEniResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeLogSwitchesRequest() (request *DescribeEdgeLogSwitchesRequest) {
    request = &DescribeEdgeLogSwitchesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeLogSwitches")
    
    
    return
}

func NewDescribeEdgeLogSwitchesResponse() (response *DescribeEdgeLogSwitchesResponse) {
    response = &DescribeEdgeLogSwitchesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeLogSwitches
// 获取事件、审计和日志的状态接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeLogSwitches(request *DescribeEdgeLogSwitchesRequest) (response *DescribeEdgeLogSwitchesResponse, err error) {
    return c.DescribeEdgeLogSwitchesWithContext(context.Background(), request)
}

// DescribeEdgeLogSwitches
// 获取事件、审计和日志的状态接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeLogSwitchesWithContext(ctx context.Context, request *DescribeEdgeLogSwitchesRequest) (response *DescribeEdgeLogSwitchesResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeLogSwitchesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeLogSwitches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeLogSwitchesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeRegionRequest() (request *DescribeEdgeRegionRequest) {
    request = &DescribeEdgeRegionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeRegion")
    
    
    return
}

func NewDescribeEdgeRegionResponse() (response *DescribeEdgeRegionResponse) {
    response = &DescribeEdgeRegionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeRegion
// 获取边缘集群的区域列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeEdgeRegion(request *DescribeEdgeRegionRequest) (response *DescribeEdgeRegionResponse, err error) {
    return c.DescribeEdgeRegionWithContext(context.Background(), request)
}

// DescribeEdgeRegion
// 获取边缘集群的区域列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeEdgeRegionWithContext(ctx context.Context, request *DescribeEdgeRegionRequest) (response *DescribeEdgeRegionResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeRegionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeRegion require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeRegionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEdgeSSHRequest() (request *DescribeEdgeSSHRequest) {
    request = &DescribeEdgeSSHRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEdgeSSH")
    
    
    return
}

func NewDescribeEdgeSSHResponse() (response *DescribeEdgeSSHResponse) {
    response = &DescribeEdgeSSHResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEdgeSSH
// 获取边缘集群SSH登录内网节点状态
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeSSH(request *DescribeEdgeSSHRequest) (response *DescribeEdgeSSHResponse, err error) {
    return c.DescribeEdgeSSHWithContext(context.Background(), request)
}

// DescribeEdgeSSH
// 获取边缘集群SSH登录内网节点状态
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeEdgeSSHWithContext(ctx context.Context, request *DescribeEdgeSSHRequest) (response *DescribeEdgeSSHResponse, err error) {
    if request == nil {
        request = NewDescribeEdgeSSHRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEdgeSSH require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEdgeSSHResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEksAlarmPoliciesRequest() (request *DescribeEksAlarmPoliciesRequest) {
    request = &DescribeEksAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEksAlarmPolicies")
    
    
    return
}

func NewDescribeEksAlarmPoliciesResponse() (response *DescribeEksAlarmPoliciesResponse) {
    response = &DescribeEksAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEksAlarmPolicies
// 查询弹性集群的告警策略列表 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEksAlarmPolicies(request *DescribeEksAlarmPoliciesRequest) (response *DescribeEksAlarmPoliciesResponse, err error) {
    return c.DescribeEksAlarmPoliciesWithContext(context.Background(), request)
}

// DescribeEksAlarmPolicies
// 查询弹性集群的告警策略列表 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeEksAlarmPoliciesWithContext(ctx context.Context, request *DescribeEksAlarmPoliciesRequest) (response *DescribeEksAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDescribeEksAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEksAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEksAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEksAlarmSettingRequest() (request *DescribeEksAlarmSettingRequest) {
    request = &DescribeEksAlarmSettingRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEksAlarmSetting")
    
    
    return
}

func NewDescribeEksAlarmSettingResponse() (response *DescribeEksAlarmSettingResponse) {
    response = &DescribeEksAlarmSettingResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEksAlarmSetting
// 查询集群列表的监控告警是否设置 
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeEksAlarmSetting(request *DescribeEksAlarmSettingRequest) (response *DescribeEksAlarmSettingResponse, err error) {
    return c.DescribeEksAlarmSettingWithContext(context.Background(), request)
}

// DescribeEksAlarmSetting
// 查询集群列表的监控告警是否设置 
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) DescribeEksAlarmSettingWithContext(ctx context.Context, request *DescribeEksAlarmSettingRequest) (response *DescribeEksAlarmSettingResponse, err error) {
    if request == nil {
        request = NewDescribeEksAlarmSettingRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEksAlarmSetting require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEksAlarmSettingResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEksContainerInstanceLogRequest() (request *DescribeEksContainerInstanceLogRequest) {
    request = &DescribeEksContainerInstanceLogRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEksContainerInstanceLog")
    
    
    return
}

func NewDescribeEksContainerInstanceLogResponse() (response *DescribeEksContainerInstanceLogResponse) {
    response = &DescribeEksContainerInstanceLogResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEksContainerInstanceLog
// 查询容器实例中容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_EKSCONTAINERSTATUS = "ResourceUnavailable.EksContainerStatus"
func (c *Client) DescribeEksContainerInstanceLog(request *DescribeEksContainerInstanceLogRequest) (response *DescribeEksContainerInstanceLogResponse, err error) {
    return c.DescribeEksContainerInstanceLogWithContext(context.Background(), request)
}

// DescribeEksContainerInstanceLog
// 查询容器实例中容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  RESOURCEUNAVAILABLE_EKSCONTAINERSTATUS = "ResourceUnavailable.EksContainerStatus"
func (c *Client) DescribeEksContainerInstanceLogWithContext(ctx context.Context, request *DescribeEksContainerInstanceLogRequest) (response *DescribeEksContainerInstanceLogResponse, err error) {
    if request == nil {
        request = NewDescribeEksContainerInstanceLogRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEksContainerInstanceLog require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEksContainerInstanceLogResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEksLogSwitchesRequest() (request *DescribeEksLogSwitchesRequest) {
    request = &DescribeEksLogSwitchesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEksLogSwitches")
    
    
    return
}

func NewDescribeEksLogSwitchesResponse() (response *DescribeEksLogSwitchesResponse) {
    response = &DescribeEksLogSwitchesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEksLogSwitches
// 查询Eks集群日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeEksLogSwitches(request *DescribeEksLogSwitchesRequest) (response *DescribeEksLogSwitchesResponse, err error) {
    return c.DescribeEksLogSwitchesWithContext(context.Background(), request)
}

// DescribeEksLogSwitches
// 查询Eks集群日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeEksLogSwitchesWithContext(ctx context.Context, request *DescribeEksLogSwitchesRequest) (response *DescribeEksLogSwitchesResponse, err error) {
    if request == nil {
        request = NewDescribeEksLogSwitchesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEksLogSwitches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEksLogSwitchesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEnableVpcCniProgressRequest() (request *DescribeEnableVpcCniProgressRequest) {
    request = &DescribeEnableVpcCniProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEnableVpcCniProgress")
    
    
    return
}

func NewDescribeEnableVpcCniProgressResponse() (response *DescribeEnableVpcCniProgressResponse) {
    response = &DescribeEnableVpcCniProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEnableVpcCniProgress
// 本接口用于查询开启vpc-cni模式的任务进度
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEnableVpcCniProgress(request *DescribeEnableVpcCniProgressRequest) (response *DescribeEnableVpcCniProgressResponse, err error) {
    return c.DescribeEnableVpcCniProgressWithContext(context.Background(), request)
}

// DescribeEnableVpcCniProgress
// 本接口用于查询开启vpc-cni模式的任务进度
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEnableVpcCniProgressWithContext(ctx context.Context, request *DescribeEnableVpcCniProgressRequest) (response *DescribeEnableVpcCniProgressResponse, err error) {
    if request == nil {
        request = NewDescribeEnableVpcCniProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEnableVpcCniProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEnableVpcCniProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdAvailableVersionsRequest() (request *DescribeEtcdAvailableVersionsRequest) {
    request = &DescribeEtcdAvailableVersionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdAvailableVersions")
    
    
    return
}

func NewDescribeEtcdAvailableVersionsResponse() (response *DescribeEtcdAvailableVersionsResponse) {
    response = &DescribeEtcdAvailableVersionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdAvailableVersions
// 查看etcd可用版本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdAvailableVersions(request *DescribeEtcdAvailableVersionsRequest) (response *DescribeEtcdAvailableVersionsResponse, err error) {
    return c.DescribeEtcdAvailableVersionsWithContext(context.Background(), request)
}

// DescribeEtcdAvailableVersions
// 查看etcd可用版本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdAvailableVersionsWithContext(ctx context.Context, request *DescribeEtcdAvailableVersionsRequest) (response *DescribeEtcdAvailableVersionsResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdAvailableVersionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdAvailableVersions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdAvailableVersionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdCreatingProgressRequest() (request *DescribeEtcdCreatingProgressRequest) {
    request = &DescribeEtcdCreatingProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdCreatingProgress")
    
    
    return
}

func NewDescribeEtcdCreatingProgressResponse() (response *DescribeEtcdCreatingProgressResponse) {
    response = &DescribeEtcdCreatingProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdCreatingProgress
// 查看etcd集群创建进度
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdCreatingProgress(request *DescribeEtcdCreatingProgressRequest) (response *DescribeEtcdCreatingProgressResponse, err error) {
    return c.DescribeEtcdCreatingProgressWithContext(context.Background(), request)
}

// DescribeEtcdCreatingProgress
// 查看etcd集群创建进度
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdCreatingProgressWithContext(ctx context.Context, request *DescribeEtcdCreatingProgressRequest) (response *DescribeEtcdCreatingProgressResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdCreatingProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdCreatingProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdCreatingProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdCredentialsRequest() (request *DescribeEtcdCredentialsRequest) {
    request = &DescribeEtcdCredentialsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdCredentials")
    
    
    return
}

func NewDescribeEtcdCredentialsResponse() (response *DescribeEtcdCredentialsResponse) {
    response = &DescribeEtcdCredentialsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdCredentials
// 查询etcd访问凭证
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdCredentials(request *DescribeEtcdCredentialsRequest) (response *DescribeEtcdCredentialsResponse, err error) {
    return c.DescribeEtcdCredentialsWithContext(context.Background(), request)
}

// DescribeEtcdCredentials
// 查询etcd访问凭证
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdCredentialsWithContext(ctx context.Context, request *DescribeEtcdCredentialsRequest) (response *DescribeEtcdCredentialsResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdCredentialsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdCredentials require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdCredentialsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdInstancesRequest() (request *DescribeEtcdInstancesRequest) {
    request = &DescribeEtcdInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdInstances")
    
    
    return
}

func NewDescribeEtcdInstancesResponse() (response *DescribeEtcdInstancesResponse) {
    response = &DescribeEtcdInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdInstances
// 查询etcd实例列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdInstances(request *DescribeEtcdInstancesRequest) (response *DescribeEtcdInstancesResponse, err error) {
    return c.DescribeEtcdInstancesWithContext(context.Background(), request)
}

// DescribeEtcdInstances
// 查询etcd实例列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdInstancesWithContext(ctx context.Context, request *DescribeEtcdInstancesRequest) (response *DescribeEtcdInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdQuotaRequest() (request *DescribeEtcdQuotaRequest) {
    request = &DescribeEtcdQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdQuota")
    
    
    return
}

func NewDescribeEtcdQuotaResponse() (response *DescribeEtcdQuotaResponse) {
    response = &DescribeEtcdQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdQuota
// 查看etcd集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdQuota(request *DescribeEtcdQuotaRequest) (response *DescribeEtcdQuotaResponse, err error) {
    return c.DescribeEtcdQuotaWithContext(context.Background(), request)
}

// DescribeEtcdQuota
// 查看etcd集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdQuotaWithContext(ctx context.Context, request *DescribeEtcdQuotaRequest) (response *DescribeEtcdQuotaResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdRegionsRequest() (request *DescribeEtcdRegionsRequest) {
    request = &DescribeEtcdRegionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdRegions")
    
    
    return
}

func NewDescribeEtcdRegionsResponse() (response *DescribeEtcdRegionsResponse) {
    response = &DescribeEtcdRegionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdRegions
// 查看etcd支持地域
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdRegions(request *DescribeEtcdRegionsRequest) (response *DescribeEtcdRegionsResponse, err error) {
    return c.DescribeEtcdRegionsWithContext(context.Background(), request)
}

// DescribeEtcdRegions
// 查看etcd支持地域
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeEtcdRegionsWithContext(ctx context.Context, request *DescribeEtcdRegionsRequest) (response *DescribeEtcdRegionsResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdRegionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdRegions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdRegionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdSnapshotPoliciesRequest() (request *DescribeEtcdSnapshotPoliciesRequest) {
    request = &DescribeEtcdSnapshotPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdSnapshotPolicies")
    
    
    return
}

func NewDescribeEtcdSnapshotPoliciesResponse() (response *DescribeEtcdSnapshotPoliciesResponse) {
    response = &DescribeEtcdSnapshotPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdSnapshotPolicies
// 查看etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshotPolicies(request *DescribeEtcdSnapshotPoliciesRequest) (response *DescribeEtcdSnapshotPoliciesResponse, err error) {
    return c.DescribeEtcdSnapshotPoliciesWithContext(context.Background(), request)
}

// DescribeEtcdSnapshotPolicies
// 查看etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshotPoliciesWithContext(ctx context.Context, request *DescribeEtcdSnapshotPoliciesRequest) (response *DescribeEtcdSnapshotPoliciesResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdSnapshotPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdSnapshotPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdSnapshotPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdSnapshotPreUploadURLRequest() (request *DescribeEtcdSnapshotPreUploadURLRequest) {
    request = &DescribeEtcdSnapshotPreUploadURLRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdSnapshotPreUploadURL")
    
    
    return
}

func NewDescribeEtcdSnapshotPreUploadURLResponse() (response *DescribeEtcdSnapshotPreUploadURLResponse) {
    response = &DescribeEtcdSnapshotPreUploadURLResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdSnapshotPreUploadURL
// 获取etcd快照预上传url
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshotPreUploadURL(request *DescribeEtcdSnapshotPreUploadURLRequest) (response *DescribeEtcdSnapshotPreUploadURLResponse, err error) {
    return c.DescribeEtcdSnapshotPreUploadURLWithContext(context.Background(), request)
}

// DescribeEtcdSnapshotPreUploadURL
// 获取etcd快照预上传url
//
// 可能返回的错误码:
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshotPreUploadURLWithContext(ctx context.Context, request *DescribeEtcdSnapshotPreUploadURLRequest) (response *DescribeEtcdSnapshotPreUploadURLResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdSnapshotPreUploadURLRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdSnapshotPreUploadURL require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdSnapshotPreUploadURLResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdSnapshotsRequest() (request *DescribeEtcdSnapshotsRequest) {
    request = &DescribeEtcdSnapshotsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdSnapshots")
    
    
    return
}

func NewDescribeEtcdSnapshotsResponse() (response *DescribeEtcdSnapshotsResponse) {
    response = &DescribeEtcdSnapshotsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdSnapshots
// 查看etcd快照列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshots(request *DescribeEtcdSnapshotsRequest) (response *DescribeEtcdSnapshotsResponse, err error) {
    return c.DescribeEtcdSnapshotsWithContext(context.Background(), request)
}

// DescribeEtcdSnapshots
// 查看etcd快照列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeEtcdSnapshotsWithContext(ctx context.Context, request *DescribeEtcdSnapshotsRequest) (response *DescribeEtcdSnapshotsResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdSnapshotsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdSnapshots require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdSnapshotsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeEtcdTasksRequest() (request *DescribeEtcdTasksRequest) {
    request = &DescribeEtcdTasksRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeEtcdTasks")
    
    
    return
}

func NewDescribeEtcdTasksResponse() (response *DescribeEtcdTasksResponse) {
    response = &DescribeEtcdTasksResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeEtcdTasks
// 查看etcd相关tasks
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEtcdTasks(request *DescribeEtcdTasksRequest) (response *DescribeEtcdTasksResponse, err error) {
    return c.DescribeEtcdTasksWithContext(context.Background(), request)
}

// DescribeEtcdTasks
// 查看etcd相关tasks
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeEtcdTasksWithContext(ctx context.Context, request *DescribeEtcdTasksRequest) (response *DescribeEtcdTasksResponse, err error) {
    if request == nil {
        request = NewDescribeEtcdTasksRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeEtcdTasks require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeEtcdTasksResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExistedInstancesRequest() (request *DescribeExistedInstancesRequest) {
    request = &DescribeExistedInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExistedInstances")
    
    
    return
}

func NewDescribeExistedInstancesResponse() (response *DescribeExistedInstancesResponse) {
    response = &DescribeExistedInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExistedInstances
// 查询已经存在的节点，判断是否可以加入集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeExistedInstances(request *DescribeExistedInstancesRequest) (response *DescribeExistedInstancesResponse, err error) {
    return c.DescribeExistedInstancesWithContext(context.Background(), request)
}

// DescribeExistedInstances
// 查询已经存在的节点，判断是否可以加入集群
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeExistedInstancesWithContext(ctx context.Context, request *DescribeExistedInstancesRequest) (response *DescribeExistedInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeExistedInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExistedInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExistedInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalClusterMetricDataRequest() (request *DescribeExternalClusterMetricDataRequest) {
    request = &DescribeExternalClusterMetricDataRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalClusterMetricData")
    
    
    return
}

func NewDescribeExternalClusterMetricDataResponse() (response *DescribeExternalClusterMetricDataResponse) {
    response = &DescribeExternalClusterMetricDataResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalClusterMetricData
// 列出第三方集群Metric信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeExternalClusterMetricData(request *DescribeExternalClusterMetricDataRequest) (response *DescribeExternalClusterMetricDataResponse, err error) {
    return c.DescribeExternalClusterMetricDataWithContext(context.Background(), request)
}

// DescribeExternalClusterMetricData
// 列出第三方集群Metric信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeExternalClusterMetricDataWithContext(ctx context.Context, request *DescribeExternalClusterMetricDataRequest) (response *DescribeExternalClusterMetricDataResponse, err error) {
    if request == nil {
        request = NewDescribeExternalClusterMetricDataRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalClusterMetricData require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalClusterMetricDataResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalClusterSpecRequest() (request *DescribeExternalClusterSpecRequest) {
    request = &DescribeExternalClusterSpecRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalClusterSpec")
    
    
    return
}

func NewDescribeExternalClusterSpecResponse() (response *DescribeExternalClusterSpecResponse) {
    response = &DescribeExternalClusterSpecResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalClusterSpec
// 获取导入第三方集群YAML定义
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeExternalClusterSpec(request *DescribeExternalClusterSpecRequest) (response *DescribeExternalClusterSpecResponse, err error) {
    return c.DescribeExternalClusterSpecWithContext(context.Background(), request)
}

// DescribeExternalClusterSpec
// 获取导入第三方集群YAML定义
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeExternalClusterSpecWithContext(ctx context.Context, request *DescribeExternalClusterSpecRequest) (response *DescribeExternalClusterSpecResponse, err error) {
    if request == nil {
        request = NewDescribeExternalClusterSpecRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalClusterSpec require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalClusterSpecResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalNodeRequest() (request *DescribeExternalNodeRequest) {
    request = &DescribeExternalNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalNode")
    
    
    return
}

func NewDescribeExternalNodeResponse() (response *DescribeExternalNodeResponse) {
    response = &DescribeExternalNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalNode
// 查看第三方节点列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNode(request *DescribeExternalNodeRequest) (response *DescribeExternalNodeResponse, err error) {
    return c.DescribeExternalNodeWithContext(context.Background(), request)
}

// DescribeExternalNode
// 查看第三方节点列表
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNodeWithContext(ctx context.Context, request *DescribeExternalNodeRequest) (response *DescribeExternalNodeResponse, err error) {
    if request == nil {
        request = NewDescribeExternalNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalNodePoolsRequest() (request *DescribeExternalNodePoolsRequest) {
    request = &DescribeExternalNodePoolsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalNodePools")
    
    
    return
}

func NewDescribeExternalNodePoolsResponse() (response *DescribeExternalNodePoolsResponse) {
    response = &DescribeExternalNodePoolsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalNodePools
// 查看第三方节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNodePools(request *DescribeExternalNodePoolsRequest) (response *DescribeExternalNodePoolsResponse, err error) {
    return c.DescribeExternalNodePoolsWithContext(context.Background(), request)
}

// DescribeExternalNodePools
// 查看第三方节点池列表
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNodePoolsWithContext(ctx context.Context, request *DescribeExternalNodePoolsRequest) (response *DescribeExternalNodePoolsResponse, err error) {
    if request == nil {
        request = NewDescribeExternalNodePoolsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalNodePools require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalNodePoolsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalNodeScriptRequest() (request *DescribeExternalNodeScriptRequest) {
    request = &DescribeExternalNodeScriptRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalNodeScript")
    
    
    return
}

func NewDescribeExternalNodeScriptResponse() (response *DescribeExternalNodeScriptResponse) {
    response = &DescribeExternalNodeScriptResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalNodeScript
// 获取第三方节点添加脚本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNodeScript(request *DescribeExternalNodeScriptRequest) (response *DescribeExternalNodeScriptResponse, err error) {
    return c.DescribeExternalNodeScriptWithContext(context.Background(), request)
}

// DescribeExternalNodeScript
// 获取第三方节点添加脚本
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) DescribeExternalNodeScriptWithContext(ctx context.Context, request *DescribeExternalNodeScriptRequest) (response *DescribeExternalNodeScriptResponse, err error) {
    if request == nil {
        request = NewDescribeExternalNodeScriptRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalNodeScript require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalNodeScriptResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeExternalNodeSupportConfigRequest() (request *DescribeExternalNodeSupportConfigRequest) {
    request = &DescribeExternalNodeSupportConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeExternalNodeSupportConfig")
    
    
    return
}

func NewDescribeExternalNodeSupportConfigResponse() (response *DescribeExternalNodeSupportConfigResponse) {
    response = &DescribeExternalNodeSupportConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeExternalNodeSupportConfig
// 查看开启第三方节点池配置信息
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeExternalNodeSupportConfig(request *DescribeExternalNodeSupportConfigRequest) (response *DescribeExternalNodeSupportConfigResponse, err error) {
    return c.DescribeExternalNodeSupportConfigWithContext(context.Background(), request)
}

// DescribeExternalNodeSupportConfig
// 查看开启第三方节点池配置信息
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) DescribeExternalNodeSupportConfigWithContext(ctx context.Context, request *DescribeExternalNodeSupportConfigRequest) (response *DescribeExternalNodeSupportConfigResponse, err error) {
    if request == nil {
        request = NewDescribeExternalNodeSupportConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeExternalNodeSupportConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeExternalNodeSupportConfigResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeFlowIdStatusRequest() (request *DescribeFlowIdStatusRequest) {
    request = &DescribeFlowIdStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeFlowIdStatus")
    
    
    return
}

func NewDescribeFlowIdStatusResponse() (response *DescribeFlowIdStatusResponse) {
    response = &DescribeFlowIdStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeFlowIdStatus
// 查询集群开启端口流程状态(仅支持托管集群外网端口)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeFlowIdStatus(request *DescribeFlowIdStatusRequest) (response *DescribeFlowIdStatusResponse, err error) {
    return c.DescribeFlowIdStatusWithContext(context.Background(), request)
}

// DescribeFlowIdStatus
// 查询集群开启端口流程状态(仅支持托管集群外网端口)
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeFlowIdStatusWithContext(ctx context.Context, request *DescribeFlowIdStatusRequest) (response *DescribeFlowIdStatusResponse, err error) {
    if request == nil {
        request = NewDescribeFlowIdStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeFlowIdStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeFlowIdStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeHubClustersRequest() (request *DescribeHubClustersRequest) {
    request = &DescribeHubClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeHubClusters")
    
    
    return
}

func NewDescribeHubClustersResponse() (response *DescribeHubClustersResponse) {
    response = &DescribeHubClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeHubClusters
// 查询Hub集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeHubClusters(request *DescribeHubClustersRequest) (response *DescribeHubClustersResponse, err error) {
    return c.DescribeHubClustersWithContext(context.Background(), request)
}

// DescribeHubClusters
// 查询Hub集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeHubClustersWithContext(ctx context.Context, request *DescribeHubClustersRequest) (response *DescribeHubClustersResponse, err error) {
    if request == nil {
        request = NewDescribeHubClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeHubClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeHubClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeImageCachesRequest() (request *DescribeImageCachesRequest) {
    request = &DescribeImageCachesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeImageCaches")
    
    
    return
}

func NewDescribeImageCachesResponse() (response *DescribeImageCachesResponse) {
    response = &DescribeImageCachesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeImageCaches
// 查询镜像缓存信息接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeImageCaches(request *DescribeImageCachesRequest) (response *DescribeImageCachesResponse, err error) {
    return c.DescribeImageCachesWithContext(context.Background(), request)
}

// DescribeImageCaches
// 查询镜像缓存信息接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeImageCachesWithContext(ctx context.Context, request *DescribeImageCachesRequest) (response *DescribeImageCachesResponse, err error) {
    if request == nil {
        request = NewDescribeImageCachesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeImageCaches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeImageCachesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeImageRegistryCredentialsRequest() (request *DescribeImageRegistryCredentialsRequest) {
    request = &DescribeImageRegistryCredentialsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeImageRegistryCredentials")
    
    
    return
}

func NewDescribeImageRegistryCredentialsResponse() (response *DescribeImageRegistryCredentialsResponse) {
    response = &DescribeImageRegistryCredentialsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeImageRegistryCredentials
// 查询镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeImageRegistryCredentials(request *DescribeImageRegistryCredentialsRequest) (response *DescribeImageRegistryCredentialsResponse, err error) {
    return c.DescribeImageRegistryCredentialsWithContext(context.Background(), request)
}

// DescribeImageRegistryCredentials
// 查询镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeImageRegistryCredentialsWithContext(ctx context.Context, request *DescribeImageRegistryCredentialsRequest) (response *DescribeImageRegistryCredentialsResponse, err error) {
    if request == nil {
        request = NewDescribeImageRegistryCredentialsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeImageRegistryCredentials require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeImageRegistryCredentialsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeImagesRequest() (request *DescribeImagesRequest) {
    request = &DescribeImagesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeImages")
    
    
    return
}

func NewDescribeImagesResponse() (response *DescribeImagesResponse) {
    response = &DescribeImagesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeImages
// 获取镜像信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeImages(request *DescribeImagesRequest) (response *DescribeImagesResponse, err error) {
    return c.DescribeImagesWithContext(context.Background(), request)
}

// DescribeImages
// 获取镜像信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeImagesWithContext(ctx context.Context, request *DescribeImagesRequest) (response *DescribeImagesResponse, err error) {
    if request == nil {
        request = NewDescribeImagesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeImages require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeImagesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeInstanceCreateProgressRequest() (request *DescribeInstanceCreateProgressRequest) {
    request = &DescribeInstanceCreateProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeInstanceCreateProgress")
    
    
    return
}

func NewDescribeInstanceCreateProgressResponse() (response *DescribeInstanceCreateProgressResponse) {
    response = &DescribeInstanceCreateProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeInstanceCreateProgress
// 获取节点创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeInstanceCreateProgress(request *DescribeInstanceCreateProgressRequest) (response *DescribeInstanceCreateProgressResponse, err error) {
    return c.DescribeInstanceCreateProgressWithContext(context.Background(), request)
}

// DescribeInstanceCreateProgress
// 获取节点创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeInstanceCreateProgressWithContext(ctx context.Context, request *DescribeInstanceCreateProgressRequest) (response *DescribeInstanceCreateProgressResponse, err error) {
    if request == nil {
        request = NewDescribeInstanceCreateProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeInstanceCreateProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeInstanceCreateProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeInstanceTypesForDirectENIRequest() (request *DescribeInstanceTypesForDirectENIRequest) {
    request = &DescribeInstanceTypesForDirectENIRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeInstanceTypesForDirectENI")
    
    
    return
}

func NewDescribeInstanceTypesForDirectENIResponse() (response *DescribeInstanceTypesForDirectENIResponse) {
    response = &DescribeInstanceTypesForDirectENIResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeInstanceTypesForDirectENI
// 查看独立网卡模式可用的机型
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeInstanceTypesForDirectENI(request *DescribeInstanceTypesForDirectENIRequest) (response *DescribeInstanceTypesForDirectENIResponse, err error) {
    return c.DescribeInstanceTypesForDirectENIWithContext(context.Background(), request)
}

// DescribeInstanceTypesForDirectENI
// 查看独立网卡模式可用的机型
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) DescribeInstanceTypesForDirectENIWithContext(ctx context.Context, request *DescribeInstanceTypesForDirectENIRequest) (response *DescribeInstanceTypesForDirectENIResponse, err error) {
    if request == nil {
        request = NewDescribeInstanceTypesForDirectENIRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeInstanceTypesForDirectENI require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeInstanceTypesForDirectENIResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeInstancesVersionRequest() (request *DescribeInstancesVersionRequest) {
    request = &DescribeInstancesVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeInstancesVersion")
    
    
    return
}

func NewDescribeInstancesVersionResponse() (response *DescribeInstancesVersionResponse) {
    response = &DescribeInstancesVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeInstancesVersion
// worker节点的版本统计
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeInstancesVersion(request *DescribeInstancesVersionRequest) (response *DescribeInstancesVersionResponse, err error) {
    return c.DescribeInstancesVersionWithContext(context.Background(), request)
}

// DescribeInstancesVersion
// worker节点的版本统计
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeInstancesVersionWithContext(ctx context.Context, request *DescribeInstancesVersionRequest) (response *DescribeInstancesVersionResponse, err error) {
    if request == nil {
        request = NewDescribeInstancesVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeInstancesVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeInstancesVersionResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeLogSwitchesRequest() (request *DescribeLogSwitchesRequest) {
    request = &DescribeLogSwitchesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeLogSwitches")
    
    
    return
}

func NewDescribeLogSwitchesResponse() (response *DescribeLogSwitchesResponse) {
    response = &DescribeLogSwitchesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeLogSwitches
// 查询集群日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeLogSwitches(request *DescribeLogSwitchesRequest) (response *DescribeLogSwitchesResponse, err error) {
    return c.DescribeLogSwitchesWithContext(context.Background(), request)
}

// DescribeLogSwitches
// 查询集群日志（审计、事件、普通日志）开关列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeLogSwitchesWithContext(ctx context.Context, request *DescribeLogSwitchesRequest) (response *DescribeLogSwitchesResponse, err error) {
    if request == nil {
        request = NewDescribeLogSwitchesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeLogSwitches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeLogSwitchesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeMasterLogRequest() (request *DescribeMasterLogRequest) {
    request = &DescribeMasterLogRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeMasterLog")
    
    
    return
}

func NewDescribeMasterLogResponse() (response *DescribeMasterLogResponse) {
    response = &DescribeMasterLogResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeMasterLog
// 查询master组件日志开启信息
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeMasterLog(request *DescribeMasterLogRequest) (response *DescribeMasterLogResponse, err error) {
    return c.DescribeMasterLogWithContext(context.Background(), request)
}

// DescribeMasterLog
// 查询master组件日志开启信息
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DescribeMasterLogWithContext(ctx context.Context, request *DescribeMasterLogRequest) (response *DescribeMasterLogResponse, err error) {
    if request == nil {
        request = NewDescribeMasterLogRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeMasterLog require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeMasterLogResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeMetaFeatureProgressRequest() (request *DescribeMetaFeatureProgressRequest) {
    request = &DescribeMetaFeatureProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeMetaFeatureProgress")
    
    
    return
}

func NewDescribeMetaFeatureProgressResponse() (response *DescribeMetaFeatureProgressResponse) {
    response = &DescribeMetaFeatureProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeMetaFeatureProgress
// 跨租户特性相关接口，不能对公开发
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DescribeMetaFeatureProgress(request *DescribeMetaFeatureProgressRequest) (response *DescribeMetaFeatureProgressResponse, err error) {
    return c.DescribeMetaFeatureProgressWithContext(context.Background(), request)
}

// DescribeMetaFeatureProgress
// 跨租户特性相关接口，不能对公开发
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) DescribeMetaFeatureProgressWithContext(ctx context.Context, request *DescribeMetaFeatureProgressRequest) (response *DescribeMetaFeatureProgressResponse, err error) {
    if request == nil {
        request = NewDescribeMetaFeatureProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeMetaFeatureProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeMetaFeatureProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeNodeGroupRequest() (request *DescribeNodeGroupRequest) {
    request = &DescribeNodeGroupRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeNodeGroup")
    
    
    return
}

func NewDescribeNodeGroupResponse() (response *DescribeNodeGroupResponse) {
    response = &DescribeNodeGroupResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeNodeGroup
// 获取NodeGroup信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeNodeGroup(request *DescribeNodeGroupRequest) (response *DescribeNodeGroupResponse, err error) {
    return c.DescribeNodeGroupWithContext(context.Background(), request)
}

// DescribeNodeGroup
// 获取NodeGroup信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeNodeGroupWithContext(ctx context.Context, request *DescribeNodeGroupRequest) (response *DescribeNodeGroupResponse, err error) {
    if request == nil {
        request = NewDescribeNodeGroupRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeNodeGroup require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeNodeGroupResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeNodeUnitRequest() (request *DescribeNodeUnitRequest) {
    request = &DescribeNodeUnitRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeNodeUnit")
    
    
    return
}

func NewDescribeNodeUnitResponse() (response *DescribeNodeUnitResponse) {
    response = &DescribeNodeUnitResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeNodeUnit
// 获取NodeUnit信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeNodeUnit(request *DescribeNodeUnitRequest) (response *DescribeNodeUnitResponse, err error) {
    return c.DescribeNodeUnitWithContext(context.Background(), request)
}

// DescribeNodeUnit
// 获取NodeUnit信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeNodeUnitWithContext(ctx context.Context, request *DescribeNodeUnitRequest) (response *DescribeNodeUnitResponse, err error) {
    if request == nil {
        request = NewDescribeNodeUnitRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeNodeUnit require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeNodeUnitResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeOSImageIdRequest() (request *DescribeOSImageIdRequest) {
    request = &DescribeOSImageIdRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeOSImageId")
    
    
    return
}

func NewDescribeOSImageIdResponse() (response *DescribeOSImageIdResponse) {
    response = &DescribeOSImageIdResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeOSImageId
// 获取镜像id
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
func (c *Client) DescribeOSImageId(request *DescribeOSImageIdRequest) (response *DescribeOSImageIdResponse, err error) {
    return c.DescribeOSImageIdWithContext(context.Background(), request)
}

// DescribeOSImageId
// 获取镜像id
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
func (c *Client) DescribeOSImageIdWithContext(ctx context.Context, request *DescribeOSImageIdRequest) (response *DescribeOSImageIdResponse, err error) {
    if request == nil {
        request = NewDescribeOSImageIdRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeOSImageId require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeOSImageIdResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeOSImagesRequest() (request *DescribeOSImagesRequest) {
    request = &DescribeOSImagesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeOSImages")
    
    
    return
}

func NewDescribeOSImagesResponse() (response *DescribeOSImagesResponse) {
    response = &DescribeOSImagesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeOSImages
// 获取OS聚合信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeOSImages(request *DescribeOSImagesRequest) (response *DescribeOSImagesResponse, err error) {
    return c.DescribeOSImagesWithContext(context.Background(), request)
}

// DescribeOSImages
// 获取OS聚合信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeOSImagesWithContext(ctx context.Context, request *DescribeOSImagesRequest) (response *DescribeOSImagesResponse, err error) {
    if request == nil {
        request = NewDescribeOSImagesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeOSImages require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeOSImagesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeProductVersionDetailsRequest() (request *DescribeProductVersionDetailsRequest) {
    request = &DescribeProductVersionDetailsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeProductVersionDetails")
    
    
    return
}

func NewDescribeProductVersionDetailsResponse() (response *DescribeProductVersionDetailsResponse) {
    response = &DescribeProductVersionDetailsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeProductVersionDetails
// 查看应用市场中某个应用版本详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProductVersionDetails(request *DescribeProductVersionDetailsRequest) (response *DescribeProductVersionDetailsResponse, err error) {
    return c.DescribeProductVersionDetailsWithContext(context.Background(), request)
}

// DescribeProductVersionDetails
// 查看应用市场中某个应用版本详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProductVersionDetailsWithContext(ctx context.Context, request *DescribeProductVersionDetailsRequest) (response *DescribeProductVersionDetailsResponse, err error) {
    if request == nil {
        request = NewDescribeProductVersionDetailsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeProductVersionDetails require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeProductVersionDetailsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeProductVersionsRequest() (request *DescribeProductVersionsRequest) {
    request = &DescribeProductVersionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeProductVersions")
    
    
    return
}

func NewDescribeProductVersionsResponse() (response *DescribeProductVersionsResponse) {
    response = &DescribeProductVersionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeProductVersions
// 查询某个应用制品版本列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProductVersions(request *DescribeProductVersionsRequest) (response *DescribeProductVersionsResponse, err error) {
    return c.DescribeProductVersionsWithContext(context.Background(), request)
}

// DescribeProductVersions
// 查询某个应用制品版本列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProductVersionsWithContext(ctx context.Context, request *DescribeProductVersionsRequest) (response *DescribeProductVersionsResponse, err error) {
    if request == nil {
        request = NewDescribeProductVersionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeProductVersions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeProductVersionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeProductsRequest() (request *DescribeProductsRequest) {
    request = &DescribeProductsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeProducts")
    
    
    return
}

func NewDescribeProductsResponse() (response *DescribeProductsResponse) {
    response = &DescribeProductsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeProducts
// 查询应用市场中制品列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProducts(request *DescribeProductsRequest) (response *DescribeProductsResponse, err error) {
    return c.DescribeProductsWithContext(context.Background(), request)
}

// DescribeProducts
// 查询应用市场中制品列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETPRODUCTOPERATION = "InternalError.MarketProductOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeProductsWithContext(ctx context.Context, request *DescribeProductsRequest) (response *DescribeProductsResponse, err error) {
    if request == nil {
        request = NewDescribeProductsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeProducts require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeProductsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusAgentInstancesRequest() (request *DescribePrometheusAgentInstancesRequest) {
    request = &DescribePrometheusAgentInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusAgentInstances")
    
    
    return
}

func NewDescribePrometheusAgentInstancesResponse() (response *DescribePrometheusAgentInstancesResponse) {
    response = &DescribePrometheusAgentInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusAgentInstances
// 获取关联目标集群的实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusAgentInstances(request *DescribePrometheusAgentInstancesRequest) (response *DescribePrometheusAgentInstancesResponse, err error) {
    return c.DescribePrometheusAgentInstancesWithContext(context.Background(), request)
}

// DescribePrometheusAgentInstances
// 获取关联目标集群的实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusAgentInstancesWithContext(ctx context.Context, request *DescribePrometheusAgentInstancesRequest) (response *DescribePrometheusAgentInstancesResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusAgentInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusAgentInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusAgentInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusAgentsRequest() (request *DescribePrometheusAgentsRequest) {
    request = &DescribePrometheusAgentsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusAgents")
    
    
    return
}

func NewDescribePrometheusAgentsResponse() (response *DescribePrometheusAgentsResponse) {
    response = &DescribePrometheusAgentsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusAgents
// 获取被关联集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusAgents(request *DescribePrometheusAgentsRequest) (response *DescribePrometheusAgentsResponse, err error) {
    return c.DescribePrometheusAgentsWithContext(context.Background(), request)
}

// DescribePrometheusAgents
// 获取被关联集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusAgentsWithContext(ctx context.Context, request *DescribePrometheusAgentsRequest) (response *DescribePrometheusAgentsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusAgentsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusAgents require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusAgentsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusAlertHistoryRequest() (request *DescribePrometheusAlertHistoryRequest) {
    request = &DescribePrometheusAlertHistoryRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusAlertHistory")
    
    
    return
}

func NewDescribePrometheusAlertHistoryResponse() (response *DescribePrometheusAlertHistoryResponse) {
    response = &DescribePrometheusAlertHistoryResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusAlertHistory
// 获取告警历史
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertHistory(request *DescribePrometheusAlertHistoryRequest) (response *DescribePrometheusAlertHistoryResponse, err error) {
    return c.DescribePrometheusAlertHistoryWithContext(context.Background(), request)
}

// DescribePrometheusAlertHistory
// 获取告警历史
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertHistoryWithContext(ctx context.Context, request *DescribePrometheusAlertHistoryRequest) (response *DescribePrometheusAlertHistoryResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusAlertHistoryRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusAlertHistory require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusAlertHistoryResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusAlertPolicyRequest() (request *DescribePrometheusAlertPolicyRequest) {
    request = &DescribePrometheusAlertPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusAlertPolicy")
    
    
    return
}

func NewDescribePrometheusAlertPolicyResponse() (response *DescribePrometheusAlertPolicyResponse) {
    response = &DescribePrometheusAlertPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusAlertPolicy
// 获取2.0实例告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertPolicy(request *DescribePrometheusAlertPolicyRequest) (response *DescribePrometheusAlertPolicyResponse, err error) {
    return c.DescribePrometheusAlertPolicyWithContext(context.Background(), request)
}

// DescribePrometheusAlertPolicy
// 获取2.0实例告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertPolicyWithContext(ctx context.Context, request *DescribePrometheusAlertPolicyRequest) (response *DescribePrometheusAlertPolicyResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusAlertPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusAlertPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusAlertPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusAlertRuleRequest() (request *DescribePrometheusAlertRuleRequest) {
    request = &DescribePrometheusAlertRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusAlertRule")
    
    
    return
}

func NewDescribePrometheusAlertRuleResponse() (response *DescribePrometheusAlertRuleResponse) {
    response = &DescribePrometheusAlertRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusAlertRule
// 获取告警规则列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertRule(request *DescribePrometheusAlertRuleRequest) (response *DescribePrometheusAlertRuleResponse, err error) {
    return c.DescribePrometheusAlertRuleWithContext(context.Background(), request)
}

// DescribePrometheusAlertRule
// 获取告警规则列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusAlertRuleWithContext(ctx context.Context, request *DescribePrometheusAlertRuleRequest) (response *DescribePrometheusAlertRuleResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusAlertRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusAlertRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusAlertRuleResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusBasicMetricsRequest() (request *DescribePrometheusBasicMetricsRequest) {
    request = &DescribePrometheusBasicMetricsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusBasicMetrics")
    
    
    return
}

func NewDescribePrometheusBasicMetricsResponse() (response *DescribePrometheusBasicMetricsResponse) {
    response = &DescribePrometheusBasicMetricsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusBasicMetrics
// 获取默认采集指标详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusBasicMetrics(request *DescribePrometheusBasicMetricsRequest) (response *DescribePrometheusBasicMetricsResponse, err error) {
    return c.DescribePrometheusBasicMetricsWithContext(context.Background(), request)
}

// DescribePrometheusBasicMetrics
// 获取默认采集指标详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusBasicMetricsWithContext(ctx context.Context, request *DescribePrometheusBasicMetricsRequest) (response *DescribePrometheusBasicMetricsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusBasicMetricsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusBasicMetrics require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusBasicMetricsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusClusterAgentsRequest() (request *DescribePrometheusClusterAgentsRequest) {
    request = &DescribePrometheusClusterAgentsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusClusterAgents")
    
    
    return
}

func NewDescribePrometheusClusterAgentsResponse() (response *DescribePrometheusClusterAgentsResponse) {
    response = &DescribePrometheusClusterAgentsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusClusterAgents
// 获取2.0实例关联集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusClusterAgents(request *DescribePrometheusClusterAgentsRequest) (response *DescribePrometheusClusterAgentsResponse, err error) {
    return c.DescribePrometheusClusterAgentsWithContext(context.Background(), request)
}

// DescribePrometheusClusterAgents
// 获取2.0实例关联集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusClusterAgentsWithContext(ctx context.Context, request *DescribePrometheusClusterAgentsRequest) (response *DescribePrometheusClusterAgentsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusClusterAgentsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusClusterAgents require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusClusterAgentsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusConfigRequest() (request *DescribePrometheusConfigRequest) {
    request = &DescribePrometheusConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusConfig")
    
    
    return
}

func NewDescribePrometheusConfigResponse() (response *DescribePrometheusConfigResponse) {
    response = &DescribePrometheusConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusConfig
// 拉取Prometheus配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusConfig(request *DescribePrometheusConfigRequest) (response *DescribePrometheusConfigResponse, err error) {
    return c.DescribePrometheusConfigWithContext(context.Background(), request)
}

// DescribePrometheusConfig
// 拉取Prometheus配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusConfigWithContext(ctx context.Context, request *DescribePrometheusConfigRequest) (response *DescribePrometheusConfigResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusConfigResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusCreatingProgressRequest() (request *DescribePrometheusCreatingProgressRequest) {
    request = &DescribePrometheusCreatingProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusCreatingProgress")
    
    
    return
}

func NewDescribePrometheusCreatingProgressResponse() (response *DescribePrometheusCreatingProgressResponse) {
    response = &DescribePrometheusCreatingProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusCreatingProgress
// 托管Prometheus实例创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusCreatingProgress(request *DescribePrometheusCreatingProgressRequest) (response *DescribePrometheusCreatingProgressResponse, err error) {
    return c.DescribePrometheusCreatingProgressWithContext(context.Background(), request)
}

// DescribePrometheusCreatingProgress
// 托管Prometheus实例创建进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusCreatingProgressWithContext(ctx context.Context, request *DescribePrometheusCreatingProgressRequest) (response *DescribePrometheusCreatingProgressResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusCreatingProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusCreatingProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusCreatingProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusDashboardRequest() (request *DescribePrometheusDashboardRequest) {
    request = &DescribePrometheusDashboardRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusDashboard")
    
    
    return
}

func NewDescribePrometheusDashboardResponse() (response *DescribePrometheusDashboardResponse) {
    response = &DescribePrometheusDashboardResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusDashboard
// 查询grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusDashboard(request *DescribePrometheusDashboardRequest) (response *DescribePrometheusDashboardResponse, err error) {
    return c.DescribePrometheusDashboardWithContext(context.Background(), request)
}

// DescribePrometheusDashboard
// 查询grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusDashboardWithContext(ctx context.Context, request *DescribePrometheusDashboardRequest) (response *DescribePrometheusDashboardResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusDashboardRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusDashboard require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusDashboardResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusInstanceRequest() (request *DescribePrometheusInstanceRequest) {
    request = &DescribePrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusInstance")
    
    
    return
}

func NewDescribePrometheusInstanceResponse() (response *DescribePrometheusInstanceResponse) {
    response = &DescribePrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusInstance
// 获取实例详细信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusInstance(request *DescribePrometheusInstanceRequest) (response *DescribePrometheusInstanceResponse, err error) {
    return c.DescribePrometheusInstanceWithContext(context.Background(), request)
}

// DescribePrometheusInstance
// 获取实例详细信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusInstanceWithContext(ctx context.Context, request *DescribePrometheusInstanceRequest) (response *DescribePrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusInstanceInitStatusRequest() (request *DescribePrometheusInstanceInitStatusRequest) {
    request = &DescribePrometheusInstanceInitStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusInstanceInitStatus")
    
    
    return
}

func NewDescribePrometheusInstanceInitStatusResponse() (response *DescribePrometheusInstanceInitStatusResponse) {
    response = &DescribePrometheusInstanceInitStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusInstanceInitStatus
// 获取2.0实例初始化任务状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusInstanceInitStatus(request *DescribePrometheusInstanceInitStatusRequest) (response *DescribePrometheusInstanceInitStatusResponse, err error) {
    return c.DescribePrometheusInstanceInitStatusWithContext(context.Background(), request)
}

// DescribePrometheusInstanceInitStatus
// 获取2.0实例初始化任务状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusInstanceInitStatusWithContext(ctx context.Context, request *DescribePrometheusInstanceInitStatusRequest) (response *DescribePrometheusInstanceInitStatusResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusInstanceInitStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusInstanceInitStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusInstanceInitStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusInstancesOverviewRequest() (request *DescribePrometheusInstancesOverviewRequest) {
    request = &DescribePrometheusInstancesOverviewRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusInstancesOverview")
    
    
    return
}

func NewDescribePrometheusInstancesOverviewResponse() (response *DescribePrometheusInstancesOverviewResponse) {
    response = &DescribePrometheusInstancesOverviewResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusInstancesOverview
// 获取与云监控融合实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusInstancesOverview(request *DescribePrometheusInstancesOverviewRequest) (response *DescribePrometheusInstancesOverviewResponse, err error) {
    return c.DescribePrometheusInstancesOverviewWithContext(context.Background(), request)
}

// DescribePrometheusInstancesOverview
// 获取与云监控融合实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusInstancesOverviewWithContext(ctx context.Context, request *DescribePrometheusInstancesOverviewRequest) (response *DescribePrometheusInstancesOverviewResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusInstancesOverviewRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusInstancesOverview require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusInstancesOverviewResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusOverviewsRequest() (request *DescribePrometheusOverviewsRequest) {
    request = &DescribePrometheusOverviewsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusOverviews")
    
    
    return
}

func NewDescribePrometheusOverviewsResponse() (response *DescribePrometheusOverviewsResponse) {
    response = &DescribePrometheusOverviewsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusOverviews
// 获取实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribePrometheusOverviews(request *DescribePrometheusOverviewsRequest) (response *DescribePrometheusOverviewsResponse, err error) {
    return c.DescribePrometheusOverviewsWithContext(context.Background(), request)
}

// DescribePrometheusOverviews
// 获取实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribePrometheusOverviewsWithContext(ctx context.Context, request *DescribePrometheusOverviewsRequest) (response *DescribePrometheusOverviewsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusOverviewsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusOverviews require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusOverviewsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusRecordRuleRequest() (request *DescribePrometheusRecordRuleRequest) {
    request = &DescribePrometheusRecordRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusRecordRule")
    
    
    return
}

func NewDescribePrometheusRecordRuleResponse() (response *DescribePrometheusRecordRuleResponse) {
    response = &DescribePrometheusRecordRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusRecordRule
// 拉取Prometheus聚合规则列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRecordRule(request *DescribePrometheusRecordRuleRequest) (response *DescribePrometheusRecordRuleResponse, err error) {
    return c.DescribePrometheusRecordRuleWithContext(context.Background(), request)
}

// DescribePrometheusRecordRule
// 拉取Prometheus聚合规则列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRecordRuleWithContext(ctx context.Context, request *DescribePrometheusRecordRuleRequest) (response *DescribePrometheusRecordRuleResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusRecordRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusRecordRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusRecordRuleResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusRecordRuleYamlRequest() (request *DescribePrometheusRecordRuleYamlRequest) {
    request = &DescribePrometheusRecordRuleYamlRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusRecordRuleYaml")
    
    
    return
}

func NewDescribePrometheusRecordRuleYamlResponse() (response *DescribePrometheusRecordRuleYamlResponse) {
    response = &DescribePrometheusRecordRuleYamlResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusRecordRuleYaml
// 拉取Prometheus聚合规则yaml列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusRecordRuleYaml(request *DescribePrometheusRecordRuleYamlRequest) (response *DescribePrometheusRecordRuleYamlResponse, err error) {
    return c.DescribePrometheusRecordRuleYamlWithContext(context.Background(), request)
}

// DescribePrometheusRecordRuleYaml
// 拉取Prometheus聚合规则yaml列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusRecordRuleYamlWithContext(ctx context.Context, request *DescribePrometheusRecordRuleYamlRequest) (response *DescribePrometheusRecordRuleYamlResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusRecordRuleYamlRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusRecordRuleYaml require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusRecordRuleYamlResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusRecordRulesRequest() (request *DescribePrometheusRecordRulesRequest) {
    request = &DescribePrometheusRecordRulesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusRecordRules")
    
    
    return
}

func NewDescribePrometheusRecordRulesResponse() (response *DescribePrometheusRecordRulesResponse) {
    response = &DescribePrometheusRecordRulesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusRecordRules
// 获取聚合规则列表，包含关联集群内crd资源创建的record rule
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRecordRules(request *DescribePrometheusRecordRulesRequest) (response *DescribePrometheusRecordRulesResponse, err error) {
    return c.DescribePrometheusRecordRulesWithContext(context.Background(), request)
}

// DescribePrometheusRecordRules
// 获取聚合规则列表，包含关联集群内crd资源创建的record rule
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRecordRulesWithContext(ctx context.Context, request *DescribePrometheusRecordRulesRequest) (response *DescribePrometheusRecordRulesResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusRecordRulesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusRecordRules require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusRecordRulesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusRegionsRequest() (request *DescribePrometheusRegionsRequest) {
    request = &DescribePrometheusRegionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusRegions")
    
    
    return
}

func NewDescribePrometheusRegionsResponse() (response *DescribePrometheusRegionsResponse) {
    response = &DescribePrometheusRegionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusRegions
// 获取TPS当前支持的地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRegions(request *DescribePrometheusRegionsRequest) (response *DescribePrometheusRegionsResponse, err error) {
    return c.DescribePrometheusRegionsWithContext(context.Background(), request)
}

// DescribePrometheusRegions
// 获取TPS当前支持的地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribePrometheusRegionsWithContext(ctx context.Context, request *DescribePrometheusRegionsRequest) (response *DescribePrometheusRegionsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusRegionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusRegions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusRegionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusTargetsRequest() (request *DescribePrometheusTargetsRequest) {
    request = &DescribePrometheusTargetsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusTargets")
    
    
    return
}

func NewDescribePrometheusTargetsResponse() (response *DescribePrometheusTargetsResponse) {
    response = &DescribePrometheusTargetsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusTargets
// 获取targets信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusTargets(request *DescribePrometheusTargetsRequest) (response *DescribePrometheusTargetsResponse, err error) {
    return c.DescribePrometheusTargetsWithContext(context.Background(), request)
}

// DescribePrometheusTargets
// 获取targets信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DescribePrometheusTargetsWithContext(ctx context.Context, request *DescribePrometheusTargetsRequest) (response *DescribePrometheusTargetsResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusTargetsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusTargets require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusTargetsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusTempRequest() (request *DescribePrometheusTempRequest) {
    request = &DescribePrometheusTempRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusTemp")
    
    
    return
}

func NewDescribePrometheusTempResponse() (response *DescribePrometheusTempResponse) {
    response = &DescribePrometheusTempResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusTemp
// 拉取模板列表，默认模板将总是在最前面
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusTemp(request *DescribePrometheusTempRequest) (response *DescribePrometheusTempResponse, err error) {
    return c.DescribePrometheusTempWithContext(context.Background(), request)
}

// DescribePrometheusTemp
// 拉取模板列表，默认模板将总是在最前面
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribePrometheusTempWithContext(ctx context.Context, request *DescribePrometheusTempRequest) (response *DescribePrometheusTempResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusTempRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusTemp require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusTempResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusTempSyncRequest() (request *DescribePrometheusTempSyncRequest) {
    request = &DescribePrometheusTempSyncRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusTempSync")
    
    
    return
}

func NewDescribePrometheusTempSyncResponse() (response *DescribePrometheusTempSyncResponse) {
    response = &DescribePrometheusTempSyncResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusTempSync
// 获取模板关联实例信息，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DescribePrometheusTempSync(request *DescribePrometheusTempSyncRequest) (response *DescribePrometheusTempSyncResponse, err error) {
    return c.DescribePrometheusTempSyncWithContext(context.Background(), request)
}

// DescribePrometheusTempSync
// 获取模板关联实例信息，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DescribePrometheusTempSyncWithContext(ctx context.Context, request *DescribePrometheusTempSyncRequest) (response *DescribePrometheusTempSyncResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusTempSyncRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusTempSync require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusTempSyncResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusTemplateSyncRequest() (request *DescribePrometheusTemplateSyncRequest) {
    request = &DescribePrometheusTemplateSyncRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusTemplateSync")
    
    
    return
}

func NewDescribePrometheusTemplateSyncResponse() (response *DescribePrometheusTemplateSyncResponse) {
    response = &DescribePrometheusTemplateSyncResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusTemplateSync
// 获取模板同步信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DescribePrometheusTemplateSync(request *DescribePrometheusTemplateSyncRequest) (response *DescribePrometheusTemplateSyncResponse, err error) {
    return c.DescribePrometheusTemplateSyncWithContext(context.Background(), request)
}

// DescribePrometheusTemplateSync
// 获取模板同步信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) DescribePrometheusTemplateSyncWithContext(ctx context.Context, request *DescribePrometheusTemplateSyncRequest) (response *DescribePrometheusTemplateSyncResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusTemplateSyncRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusTemplateSync require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusTemplateSyncResponse()
    err = c.Send(request, response)
    return
}

func NewDescribePrometheusTemplatesRequest() (request *DescribePrometheusTemplatesRequest) {
    request = &DescribePrometheusTemplatesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribePrometheusTemplates")
    
    
    return
}

func NewDescribePrometheusTemplatesResponse() (response *DescribePrometheusTemplatesResponse) {
    response = &DescribePrometheusTemplatesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribePrometheusTemplates
// 拉取模板列表，默认模板将总是在最前面
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribePrometheusTemplates(request *DescribePrometheusTemplatesRequest) (response *DescribePrometheusTemplatesResponse, err error) {
    return c.DescribePrometheusTemplatesWithContext(context.Background(), request)
}

// DescribePrometheusTemplates
// 拉取模板列表，默认模板将总是在最前面
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribePrometheusTemplatesWithContext(ctx context.Context, request *DescribePrometheusTemplatesRequest) (response *DescribePrometheusTemplatesResponse, err error) {
    if request == nil {
        request = NewDescribePrometheusTemplatesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribePrometheusTemplates require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribePrometheusTemplatesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeQuotaRequest() (request *DescribeQuotaRequest) {
    request = &DescribeQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeQuota")
    
    
    return
}

func NewDescribeQuotaResponse() (response *DescribeQuotaResponse) {
    response = &DescribeQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeQuota
// 获取集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeQuota(request *DescribeQuotaRequest) (response *DescribeQuotaResponse, err error) {
    return c.DescribeQuotaWithContext(context.Background(), request)
}

// DescribeQuota
// 获取集群配额
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeQuotaWithContext(ctx context.Context, request *DescribeQuotaRequest) (response *DescribeQuotaResponse, err error) {
    if request == nil {
        request = NewDescribeQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeRIUtilizationDetailRequest() (request *DescribeRIUtilizationDetailRequest) {
    request = &DescribeRIUtilizationDetailRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeRIUtilizationDetail")
    
    
    return
}

func NewDescribeRIUtilizationDetailResponse() (response *DescribeRIUtilizationDetailResponse) {
    response = &DescribeRIUtilizationDetailResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeRIUtilizationDetail
// 预留实例用量查询
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeRIUtilizationDetail(request *DescribeRIUtilizationDetailRequest) (response *DescribeRIUtilizationDetailResponse, err error) {
    return c.DescribeRIUtilizationDetailWithContext(context.Background(), request)
}

// DescribeRIUtilizationDetail
// 预留实例用量查询
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeRIUtilizationDetailWithContext(ctx context.Context, request *DescribeRIUtilizationDetailRequest) (response *DescribeRIUtilizationDetailResponse, err error) {
    if request == nil {
        request = NewDescribeRIUtilizationDetailRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeRIUtilizationDetail require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeRIUtilizationDetailResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeRegionsRequest() (request *DescribeRegionsRequest) {
    request = &DescribeRegionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeRegions")
    
    
    return
}

func NewDescribeRegionsResponse() (response *DescribeRegionsResponse) {
    response = &DescribeRegionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeRegions
// 获取容器服务支持的所有地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeRegions(request *DescribeRegionsRequest) (response *DescribeRegionsResponse, err error) {
    return c.DescribeRegionsWithContext(context.Background(), request)
}

// DescribeRegions
// 获取容器服务支持的所有地域
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeRegionsWithContext(ctx context.Context, request *DescribeRegionsRequest) (response *DescribeRegionsResponse, err error) {
    if request == nil {
        request = NewDescribeRegionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeRegions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeRegionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeRemainingIpForGlobalRouteRequest() (request *DescribeRemainingIpForGlobalRouteRequest) {
    request = &DescribeRemainingIpForGlobalRouteRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeRemainingIpForGlobalRoute")
    
    
    return
}

func NewDescribeRemainingIpForGlobalRouteResponse() (response *DescribeRemainingIpForGlobalRouteResponse) {
    response = &DescribeRemainingIpForGlobalRouteResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeRemainingIpForGlobalRoute
// 查看全局路由模式的集群中，容器网络中剩余IP的数量
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeRemainingIpForGlobalRoute(request *DescribeRemainingIpForGlobalRouteRequest) (response *DescribeRemainingIpForGlobalRouteResponse, err error) {
    return c.DescribeRemainingIpForGlobalRouteWithContext(context.Background(), request)
}

// DescribeRemainingIpForGlobalRoute
// 查看全局路由模式的集群中，容器网络中剩余IP的数量
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeRemainingIpForGlobalRouteWithContext(ctx context.Context, request *DescribeRemainingIpForGlobalRouteRequest) (response *DescribeRemainingIpForGlobalRouteResponse, err error) {
    if request == nil {
        request = NewDescribeRemainingIpForGlobalRouteRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeRemainingIpForGlobalRoute require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeRemainingIpForGlobalRouteResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeReservedInstancesRequest() (request *DescribeReservedInstancesRequest) {
    request = &DescribeReservedInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeReservedInstances")
    
    
    return
}

func NewDescribeReservedInstancesResponse() (response *DescribeReservedInstancesResponse) {
    response = &DescribeReservedInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeReservedInstances
// 查询预留实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeReservedInstances(request *DescribeReservedInstancesRequest) (response *DescribeReservedInstancesResponse, err error) {
    return c.DescribeReservedInstancesWithContext(context.Background(), request)
}

// DescribeReservedInstances
// 查询预留实例列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeReservedInstancesWithContext(ctx context.Context, request *DescribeReservedInstancesRequest) (response *DescribeReservedInstancesResponse, err error) {
    if request == nil {
        request = NewDescribeReservedInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeReservedInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeReservedInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeResourceQuotaRequest() (request *DescribeResourceQuotaRequest) {
    request = &DescribeResourceQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeResourceQuota")
    
    
    return
}

func NewDescribeResourceQuotaResponse() (response *DescribeResourceQuotaResponse) {
    response = &DescribeResourceQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeResourceQuota
// 查询虚拟集群所属资源配额信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeResourceQuota(request *DescribeResourceQuotaRequest) (response *DescribeResourceQuotaResponse, err error) {
    return c.DescribeResourceQuotaWithContext(context.Background(), request)
}

// DescribeResourceQuota
// 查询虚拟集群所属资源配额信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeResourceQuotaWithContext(ctx context.Context, request *DescribeResourceQuotaRequest) (response *DescribeResourceQuotaResponse, err error) {
    if request == nil {
        request = NewDescribeResourceQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeResourceQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeResourceQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeRouteTableConflictsRequest() (request *DescribeRouteTableConflictsRequest) {
    request = &DescribeRouteTableConflictsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeRouteTableConflicts")
    
    
    return
}

func NewDescribeRouteTableConflictsResponse() (response *DescribeRouteTableConflictsResponse) {
    response = &DescribeRouteTableConflictsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeRouteTableConflicts
// 查询路由表冲突列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeRouteTableConflicts(request *DescribeRouteTableConflictsRequest) (response *DescribeRouteTableConflictsResponse, err error) {
    return c.DescribeRouteTableConflictsWithContext(context.Background(), request)
}

// DescribeRouteTableConflicts
// 查询路由表冲突列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRMASKSIZEOUTOFRANGE = "InternalError.CidrMaskSizeOutOfRange"
//  INTERNALERROR_INVALIDPRIVATENETWORKCIDR = "InternalError.InvalidPrivateNetworkCidr"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeRouteTableConflictsWithContext(ctx context.Context, request *DescribeRouteTableConflictsRequest) (response *DescribeRouteTableConflictsResponse, err error) {
    if request == nil {
        request = NewDescribeRouteTableConflictsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeRouteTableConflicts require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeRouteTableConflictsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeSecretRequest() (request *DescribeSecretRequest) {
    request = &DescribeSecretRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeSecret")
    
    
    return
}

func NewDescribeSecretResponse() (response *DescribeSecretResponse) {
    response = &DescribeSecretResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeSecret
// 查询秘钥
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeSecret(request *DescribeSecretRequest) (response *DescribeSecretResponse, err error) {
    return c.DescribeSecretWithContext(context.Background(), request)
}

// DescribeSecret
// 查询秘钥
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeSecretWithContext(ctx context.Context, request *DescribeSecretRequest) (response *DescribeSecretResponse, err error) {
    if request == nil {
        request = NewDescribeSecretRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeSecret require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeSecretResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeServiceRequest() (request *DescribeServiceRequest) {
    request = &DescribeServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeService")
    
    
    return
}

func NewDescribeServiceResponse() (response *DescribeServiceResponse) {
    response = &DescribeServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeService
// 查询Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeService(request *DescribeServiceRequest) (response *DescribeServiceResponse, err error) {
    return c.DescribeServiceWithContext(context.Background(), request)
}

// DescribeService
// 查询Service
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
//  RESOURCEUNAVAILABLE_SERVICEINABNORMALSTAT = "ResourceUnavailable.ServiceInAbnormalStat"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeServiceWithContext(ctx context.Context, request *DescribeServiceRequest) (response *DescribeServiceResponse, err error) {
    if request == nil {
        request = NewDescribeServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeService require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeServiceResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeSpotPodDetailRequest() (request *DescribeSpotPodDetailRequest) {
    request = &DescribeSpotPodDetailRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeSpotPodDetail")
    
    
    return
}

func NewDescribeSpotPodDetailResponse() (response *DescribeSpotPodDetailResponse) {
    response = &DescribeSpotPodDetailResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeSpotPodDetail
// 获取删除的竞价pod详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeSpotPodDetail(request *DescribeSpotPodDetailRequest) (response *DescribeSpotPodDetailResponse, err error) {
    return c.DescribeSpotPodDetailWithContext(context.Background(), request)
}

// DescribeSpotPodDetail
// 获取删除的竞价pod详情
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DescribeSpotPodDetailWithContext(ctx context.Context, request *DescribeSpotPodDetailRequest) (response *DescribeSpotPodDetailResponse, err error) {
    if request == nil {
        request = NewDescribeSpotPodDetailRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeSpotPodDetail require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeSpotPodDetailResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeSupportedRuntimeRequest() (request *DescribeSupportedRuntimeRequest) {
    request = &DescribeSupportedRuntimeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeSupportedRuntime")
    
    
    return
}

func NewDescribeSupportedRuntimeResponse() (response *DescribeSupportedRuntimeResponse) {
    response = &DescribeSupportedRuntimeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeSupportedRuntime
// 根据K8S版本获取可选运行时版本
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeSupportedRuntime(request *DescribeSupportedRuntimeRequest) (response *DescribeSupportedRuntimeResponse, err error) {
    return c.DescribeSupportedRuntimeWithContext(context.Background(), request)
}

// DescribeSupportedRuntime
// 根据K8S版本获取可选运行时版本
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeSupportedRuntimeWithContext(ctx context.Context, request *DescribeSupportedRuntimeRequest) (response *DescribeSupportedRuntimeResponse, err error) {
    if request == nil {
        request = NewDescribeSupportedRuntimeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeSupportedRuntime require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeSupportedRuntimeResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCClusterCommonNamesRequest() (request *DescribeTDCCClusterCommonNamesRequest) {
    request = &DescribeTDCCClusterCommonNamesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCClusterCommonNames")
    
    
    return
}

func NewDescribeTDCCClusterCommonNamesResponse() (response *DescribeTDCCClusterCommonNamesResponse) {
    response = &DescribeTDCCClusterCommonNamesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCClusterCommonNames
// 获取指定子账户的对应kube-apiserver的客户端证书中CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为20
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeTDCCClusterCommonNames(request *DescribeTDCCClusterCommonNamesRequest) (response *DescribeTDCCClusterCommonNamesResponse, err error) {
    return c.DescribeTDCCClusterCommonNamesWithContext(context.Background(), request)
}

// DescribeTDCCClusterCommonNames
// 获取指定子账户的对应kube-apiserver的客户端证书中CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为20
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) DescribeTDCCClusterCommonNamesWithContext(ctx context.Context, request *DescribeTDCCClusterCommonNamesRequest) (response *DescribeTDCCClusterCommonNamesResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCClusterCommonNamesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCClusterCommonNames require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCClusterCommonNamesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCClusterMetricDataRequest() (request *DescribeTDCCClusterMetricDataRequest) {
    request = &DescribeTDCCClusterMetricDataRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCClusterMetricData")
    
    
    return
}

func NewDescribeTDCCClusterMetricDataResponse() (response *DescribeTDCCClusterMetricDataResponse) {
    response = &DescribeTDCCClusterMetricDataResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCClusterMetricData
// 列出注册集群Metric信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeTDCCClusterMetricData(request *DescribeTDCCClusterMetricDataRequest) (response *DescribeTDCCClusterMetricDataResponse, err error) {
    return c.DescribeTDCCClusterMetricDataWithContext(context.Background(), request)
}

// DescribeTDCCClusterMetricData
// 列出注册集群Metric信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DescribeTDCCClusterMetricDataWithContext(ctx context.Context, request *DescribeTDCCClusterMetricDataRequest) (response *DescribeTDCCClusterMetricDataResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCClusterMetricDataRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCClusterMetricData require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCClusterMetricDataResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCExternalClusterSpecRequest() (request *DescribeTDCCExternalClusterSpecRequest) {
    request = &DescribeTDCCExternalClusterSpecRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCExternalClusterSpec")
    
    
    return
}

func NewDescribeTDCCExternalClusterSpecResponse() (response *DescribeTDCCExternalClusterSpecResponse) {
    response = &DescribeTDCCExternalClusterSpecResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCExternalClusterSpec
// 获取导入第三方集群YAML定义
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCExternalClusterSpec(request *DescribeTDCCExternalClusterSpecRequest) (response *DescribeTDCCExternalClusterSpecResponse, err error) {
    return c.DescribeTDCCExternalClusterSpecWithContext(context.Background(), request)
}

// DescribeTDCCExternalClusterSpec
// 获取导入第三方集群YAML定义
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_KUBERNETESRESOURCENOTFOUND = "ResourceNotFound.KubernetesResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCExternalClusterSpecWithContext(ctx context.Context, request *DescribeTDCCExternalClusterSpecRequest) (response *DescribeTDCCExternalClusterSpecResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCExternalClusterSpecRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCExternalClusterSpec require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCExternalClusterSpecResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCExternalClustersRequest() (request *DescribeTDCCExternalClustersRequest) {
    request = &DescribeTDCCExternalClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCExternalClusters")
    
    
    return
}

func NewDescribeTDCCExternalClustersResponse() (response *DescribeTDCCExternalClustersResponse) {
    response = &DescribeTDCCExternalClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCExternalClusters
// 查询注册集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCExternalClusters(request *DescribeTDCCExternalClustersRequest) (response *DescribeTDCCExternalClustersResponse, err error) {
    return c.DescribeTDCCExternalClustersWithContext(context.Background(), request)
}

// DescribeTDCCExternalClusters
// 查询注册集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTCOMMON = "InternalError.AccountCommon"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_CREATEMASTERFAILED = "InternalError.CreateMasterFailed"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_INITMASTERFAILED = "InternalError.InitMasterFailed"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCExternalClustersWithContext(ctx context.Context, request *DescribeTDCCExternalClustersRequest) (response *DescribeTDCCExternalClustersResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCExternalClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCExternalClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCExternalClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCHubClustersRequest() (request *DescribeTDCCHubClustersRequest) {
    request = &DescribeTDCCHubClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCHubClusters")
    
    
    return
}

func NewDescribeTDCCHubClustersResponse() (response *DescribeTDCCHubClustersResponse) {
    response = &DescribeTDCCHubClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCHubClusters
// 查询Hub集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCHubClusters(request *DescribeTDCCHubClustersRequest) (response *DescribeTDCCHubClustersResponse, err error) {
    return c.DescribeTDCCHubClustersWithContext(context.Background(), request)
}

// DescribeTDCCHubClusters
// 查询Hub集群列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCHubClustersWithContext(ctx context.Context, request *DescribeTDCCHubClustersRequest) (response *DescribeTDCCHubClustersResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCHubClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCHubClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCHubClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCLogSwitchesRequest() (request *DescribeTDCCLogSwitchesRequest) {
    request = &DescribeTDCCLogSwitchesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCLogSwitches")
    
    
    return
}

func NewDescribeTDCCLogSwitchesResponse() (response *DescribeTDCCLogSwitchesResponse) {
    response = &DescribeTDCCLogSwitchesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCLogSwitches
// 查询注册集群是否安装日志组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTDCCLogSwitches(request *DescribeTDCCLogSwitchesRequest) (response *DescribeTDCCLogSwitchesResponse, err error) {
    return c.DescribeTDCCLogSwitchesWithContext(context.Background(), request)
}

// DescribeTDCCLogSwitches
// 查询注册集群是否安装日志组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTDCCLogSwitchesWithContext(ctx context.Context, request *DescribeTDCCLogSwitchesRequest) (response *DescribeTDCCLogSwitchesResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCLogSwitchesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCLogSwitches require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCLogSwitchesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTDCCOpenStatusRequest() (request *DescribeTDCCOpenStatusRequest) {
    request = &DescribeTDCCOpenStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTDCCOpenStatus")
    
    
    return
}

func NewDescribeTDCCOpenStatusResponse() (response *DescribeTDCCOpenStatusResponse) {
    response = &DescribeTDCCOpenStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTDCCOpenStatus
// 检查TDCC产品开通状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCOpenStatus(request *DescribeTDCCOpenStatusRequest) (response *DescribeTDCCOpenStatusResponse, err error) {
    return c.DescribeTDCCOpenStatusWithContext(context.Background(), request)
}

// DescribeTDCCOpenStatus
// 检查TDCC产品开通状态
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_QUOTAMAXNODLIMIT = "InternalError.QuotaMaxNodLimit"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) DescribeTDCCOpenStatusWithContext(ctx context.Context, request *DescribeTDCCOpenStatusRequest) (response *DescribeTDCCOpenStatusResponse, err error) {
    if request == nil {
        request = NewDescribeTDCCOpenStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTDCCOpenStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTDCCOpenStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeClusterCredentialRequest() (request *DescribeTKEEdgeClusterCredentialRequest) {
    request = &DescribeTKEEdgeClusterCredentialRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeClusterCredential")
    
    
    return
}

func NewDescribeTKEEdgeClusterCredentialResponse() (response *DescribeTKEEdgeClusterCredentialResponse) {
    response = &DescribeTKEEdgeClusterCredentialResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeClusterCredential
// 获取边缘计算集群的认证信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClusterCredential(request *DescribeTKEEdgeClusterCredentialRequest) (response *DescribeTKEEdgeClusterCredentialResponse, err error) {
    return c.DescribeTKEEdgeClusterCredentialWithContext(context.Background(), request)
}

// DescribeTKEEdgeClusterCredential
// 获取边缘计算集群的认证信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClusterCredentialWithContext(ctx context.Context, request *DescribeTKEEdgeClusterCredentialRequest) (response *DescribeTKEEdgeClusterCredentialResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeClusterCredentialRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeClusterCredential require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeClusterCredentialResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeClusterResourcesRequest() (request *DescribeTKEEdgeClusterResourcesRequest) {
    request = &DescribeTKEEdgeClusterResourcesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeClusterResources")
    
    
    return
}

func NewDescribeTKEEdgeClusterResourcesResponse() (response *DescribeTKEEdgeClusterResourcesResponse) {
    response = &DescribeTKEEdgeClusterResourcesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeClusterResources
// 获取边缘计算节点资源详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeTKEEdgeClusterResources(request *DescribeTKEEdgeClusterResourcesRequest) (response *DescribeTKEEdgeClusterResourcesResponse, err error) {
    return c.DescribeTKEEdgeClusterResourcesWithContext(context.Background(), request)
}

// DescribeTKEEdgeClusterResources
// 获取边缘计算节点资源详情
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeTKEEdgeClusterResourcesWithContext(ctx context.Context, request *DescribeTKEEdgeClusterResourcesRequest) (response *DescribeTKEEdgeClusterResourcesResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeClusterResourcesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeClusterResources require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeClusterResourcesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeClusterStatusRequest() (request *DescribeTKEEdgeClusterStatusRequest) {
    request = &DescribeTKEEdgeClusterStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeClusterStatus")
    
    
    return
}

func NewDescribeTKEEdgeClusterStatusResponse() (response *DescribeTKEEdgeClusterStatusResponse) {
    response = &DescribeTKEEdgeClusterStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeClusterStatus
// 获取边缘计算集群的当前状态以及过程信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClusterStatus(request *DescribeTKEEdgeClusterStatusRequest) (response *DescribeTKEEdgeClusterStatusResponse, err error) {
    return c.DescribeTKEEdgeClusterStatusWithContext(context.Background(), request)
}

// DescribeTKEEdgeClusterStatus
// 获取边缘计算集群的当前状态以及过程信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClusterStatusWithContext(ctx context.Context, request *DescribeTKEEdgeClusterStatusRequest) (response *DescribeTKEEdgeClusterStatusResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeClusterStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeClusterStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeClusterStatusResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeClustersRequest() (request *DescribeTKEEdgeClustersRequest) {
    request = &DescribeTKEEdgeClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeClusters")
    
    
    return
}

func NewDescribeTKEEdgeClustersResponse() (response *DescribeTKEEdgeClustersResponse) {
    response = &DescribeTKEEdgeClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeClusters
// 查询边缘集群列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClusters(request *DescribeTKEEdgeClustersRequest) (response *DescribeTKEEdgeClustersResponse, err error) {
    return c.DescribeTKEEdgeClustersWithContext(context.Background(), request)
}

// DescribeTKEEdgeClusters
// 查询边缘集群列表
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeClustersWithContext(ctx context.Context, request *DescribeTKEEdgeClustersRequest) (response *DescribeTKEEdgeClustersResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeDefaultsettingsRequest() (request *DescribeTKEEdgeDefaultsettingsRequest) {
    request = &DescribeTKEEdgeDefaultsettingsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeDefaultsettings")
    
    
    return
}

func NewDescribeTKEEdgeDefaultsettingsResponse() (response *DescribeTKEEdgeDefaultsettingsResponse) {
    response = &DescribeTKEEdgeDefaultsettingsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeDefaultsettings
// 边缘计算默认节点配置
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeDefaultsettings(request *DescribeTKEEdgeDefaultsettingsRequest) (response *DescribeTKEEdgeDefaultsettingsResponse, err error) {
    return c.DescribeTKEEdgeDefaultsettingsWithContext(context.Background(), request)
}

// DescribeTKEEdgeDefaultsettings
// 边缘计算默认节点配置
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeDefaultsettingsWithContext(ctx context.Context, request *DescribeTKEEdgeDefaultsettingsRequest) (response *DescribeTKEEdgeDefaultsettingsResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeDefaultsettingsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeDefaultsettings require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeDefaultsettingsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeExternalKubeconfigRequest() (request *DescribeTKEEdgeExternalKubeconfigRequest) {
    request = &DescribeTKEEdgeExternalKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeExternalKubeconfig")
    
    
    return
}

func NewDescribeTKEEdgeExternalKubeconfigResponse() (response *DescribeTKEEdgeExternalKubeconfigResponse) {
    response = &DescribeTKEEdgeExternalKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeExternalKubeconfig
// 获取边缘计算外部访问的kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeExternalKubeconfig(request *DescribeTKEEdgeExternalKubeconfigRequest) (response *DescribeTKEEdgeExternalKubeconfigResponse, err error) {
    return c.DescribeTKEEdgeExternalKubeconfigWithContext(context.Background(), request)
}

// DescribeTKEEdgeExternalKubeconfig
// 获取边缘计算外部访问的kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeExternalKubeconfigWithContext(ctx context.Context, request *DescribeTKEEdgeExternalKubeconfigRequest) (response *DescribeTKEEdgeExternalKubeconfigResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeExternalKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeExternalKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeExternalKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeInternalKubeconfigRequest() (request *DescribeTKEEdgeInternalKubeconfigRequest) {
    request = &DescribeTKEEdgeInternalKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeInternalKubeconfig")
    
    
    return
}

func NewDescribeTKEEdgeInternalKubeconfigResponse() (response *DescribeTKEEdgeInternalKubeconfigResponse) {
    response = &DescribeTKEEdgeInternalKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeInternalKubeconfig
// 获取边缘计算内部访问kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeInternalKubeconfig(request *DescribeTKEEdgeInternalKubeconfigRequest) (response *DescribeTKEEdgeInternalKubeconfigResponse, err error) {
    return c.DescribeTKEEdgeInternalKubeconfigWithContext(context.Background(), request)
}

// DescribeTKEEdgeInternalKubeconfig
// 获取边缘计算内部访问kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeInternalKubeconfigWithContext(ctx context.Context, request *DescribeTKEEdgeInternalKubeconfigRequest) (response *DescribeTKEEdgeInternalKubeconfigResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeInternalKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeInternalKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeInternalKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTKEEdgeScriptRequest() (request *DescribeTKEEdgeScriptRequest) {
    request = &DescribeTKEEdgeScriptRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTKEEdgeScript")
    
    
    return
}

func NewDescribeTKEEdgeScriptResponse() (response *DescribeTKEEdgeScriptResponse) {
    response = &DescribeTKEEdgeScriptResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTKEEdgeScript
// 获取边缘脚本链接
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeScript(request *DescribeTKEEdgeScriptRequest) (response *DescribeTKEEdgeScriptResponse, err error) {
    return c.DescribeTKEEdgeScriptWithContext(context.Background(), request)
}

// DescribeTKEEdgeScript
// 获取边缘脚本链接
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeTKEEdgeScriptWithContext(ctx context.Context, request *DescribeTKEEdgeScriptRequest) (response *DescribeTKEEdgeScriptResponse, err error) {
    if request == nil {
        request = NewDescribeTKEEdgeScriptRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTKEEdgeScript require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTKEEdgeScriptResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTkeEdgeAlarmPoliciesRequest() (request *DescribeTkeEdgeAlarmPoliciesRequest) {
    request = &DescribeTkeEdgeAlarmPoliciesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTkeEdgeAlarmPolicies")
    
    
    return
}

func NewDescribeTkeEdgeAlarmPoliciesResponse() (response *DescribeTkeEdgeAlarmPoliciesResponse) {
    response = &DescribeTkeEdgeAlarmPoliciesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTkeEdgeAlarmPolicies
// 查询边缘集群的告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeTkeEdgeAlarmPolicies(request *DescribeTkeEdgeAlarmPoliciesRequest) (response *DescribeTkeEdgeAlarmPoliciesResponse, err error) {
    return c.DescribeTkeEdgeAlarmPoliciesWithContext(context.Background(), request)
}

// DescribeTkeEdgeAlarmPolicies
// 查询边缘集群的告警策略列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeTkeEdgeAlarmPoliciesWithContext(ctx context.Context, request *DescribeTkeEdgeAlarmPoliciesRequest) (response *DescribeTkeEdgeAlarmPoliciesResponse, err error) {
    if request == nil {
        request = NewDescribeTkeEdgeAlarmPoliciesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTkeEdgeAlarmPolicies require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTkeEdgeAlarmPoliciesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeTkeEdgeAlarmSettingRequest() (request *DescribeTkeEdgeAlarmSettingRequest) {
    request = &DescribeTkeEdgeAlarmSettingRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeTkeEdgeAlarmSetting")
    
    
    return
}

func NewDescribeTkeEdgeAlarmSettingResponse() (response *DescribeTkeEdgeAlarmSettingResponse) {
    response = &DescribeTkeEdgeAlarmSettingResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeTkeEdgeAlarmSetting
// 查询边缘集群列表的监控告警是否设置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeTkeEdgeAlarmSetting(request *DescribeTkeEdgeAlarmSettingRequest) (response *DescribeTkeEdgeAlarmSettingResponse, err error) {
    return c.DescribeTkeEdgeAlarmSettingWithContext(context.Background(), request)
}

// DescribeTkeEdgeAlarmSetting
// 查询边缘集群列表的监控告警是否设置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DescribeTkeEdgeAlarmSettingWithContext(ctx context.Context, request *DescribeTkeEdgeAlarmSettingRequest) (response *DescribeTkeEdgeAlarmSettingResponse, err error) {
    if request == nil {
        request = NewDescribeTkeEdgeAlarmSettingRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeTkeEdgeAlarmSetting require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeTkeEdgeAlarmSettingResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeUpgradeClusterProgressRequest() (request *DescribeUpgradeClusterProgressRequest) {
    request = &DescribeUpgradeClusterProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeUpgradeClusterProgress")
    
    
    return
}

func NewDescribeUpgradeClusterProgressResponse() (response *DescribeUpgradeClusterProgressResponse) {
    response = &DescribeUpgradeClusterProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeUpgradeClusterProgress
// 获取集群升级进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeUpgradeClusterProgress(request *DescribeUpgradeClusterProgressRequest) (response *DescribeUpgradeClusterProgressResponse, err error) {
    return c.DescribeUpgradeClusterProgressWithContext(context.Background(), request)
}

// DescribeUpgradeClusterProgress
// 获取集群升级进度
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DescribeUpgradeClusterProgressWithContext(ctx context.Context, request *DescribeUpgradeClusterProgressRequest) (response *DescribeUpgradeClusterProgressResponse, err error) {
    if request == nil {
        request = NewDescribeUpgradeClusterProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeUpgradeClusterProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeUpgradeClusterProgressResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeUserClustersRequest() (request *DescribeUserClustersRequest) {
    request = &DescribeUserClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeUserClusters")
    
    
    return
}

func NewDescribeUserClustersResponse() (response *DescribeUserClustersResponse) {
    response = &DescribeUserClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeUserClusters
// 获取用户tke、eks、tkeedge集群列表。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeUserClusters(request *DescribeUserClustersRequest) (response *DescribeUserClustersResponse, err error) {
    return c.DescribeUserClustersWithContext(context.Background(), request)
}

// DescribeUserClusters
// 获取用户tke、eks、tkeedge集群列表。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeUserClustersWithContext(ctx context.Context, request *DescribeUserClustersRequest) (response *DescribeUserClustersResponse, err error) {
    if request == nil {
        request = NewDescribeUserClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeUserClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeUserClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeVersionsRequest() (request *DescribeVersionsRequest) {
    request = &DescribeVersionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeVersions")
    
    
    return
}

func NewDescribeVersionsResponse() (response *DescribeVersionsResponse) {
    response = &DescribeVersionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeVersions
// 获取集群版本信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeVersions(request *DescribeVersionsRequest) (response *DescribeVersionsResponse, err error) {
    return c.DescribeVersionsWithContext(context.Background(), request)
}

// DescribeVersions
// 获取集群版本信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_COMPONENTCLINETHTTP = "InternalError.ComponentClinetHttp"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeVersionsWithContext(ctx context.Context, request *DescribeVersionsRequest) (response *DescribeVersionsResponse, err error) {
    if request == nil {
        request = NewDescribeVersionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeVersions require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeVersionsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeVirtualClustersRequest() (request *DescribeVirtualClustersRequest) {
    request = &DescribeVirtualClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeVirtualClusters")
    
    
    return
}

func NewDescribeVirtualClustersResponse() (response *DescribeVirtualClustersResponse) {
    response = &DescribeVirtualClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeVirtualClusters
// 查询虚拟集群.
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeVirtualClusters(request *DescribeVirtualClustersRequest) (response *DescribeVirtualClustersResponse, err error) {
    return c.DescribeVirtualClustersWithContext(context.Background(), request)
}

// DescribeVirtualClusters
// 查询虚拟集群.
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) DescribeVirtualClustersWithContext(ctx context.Context, request *DescribeVirtualClustersRequest) (response *DescribeVirtualClustersResponse, err error) {
    if request == nil {
        request = NewDescribeVirtualClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeVirtualClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeVirtualClustersResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeVirtualServicesRequest() (request *DescribeVirtualServicesRequest) {
    request = &DescribeVirtualServicesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeVirtualServices")
    
    
    return
}

func NewDescribeVirtualServicesResponse() (response *DescribeVirtualServicesResponse) {
    response = &DescribeVirtualServicesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeVirtualServices
// 查询虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeVirtualServices(request *DescribeVirtualServicesRequest) (response *DescribeVirtualServicesResponse, err error) {
    return c.DescribeVirtualServicesWithContext(context.Background(), request)
}

// DescribeVirtualServices
// 查询虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) DescribeVirtualServicesWithContext(ctx context.Context, request *DescribeVirtualServicesRequest) (response *DescribeVirtualServicesResponse, err error) {
    if request == nil {
        request = NewDescribeVirtualServicesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeVirtualServices require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeVirtualServicesResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeVpcCniPodLimitsRequest() (request *DescribeVpcCniPodLimitsRequest) {
    request = &DescribeVpcCniPodLimitsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeVpcCniPodLimits")
    
    
    return
}

func NewDescribeVpcCniPodLimitsResponse() (response *DescribeVpcCniPodLimitsResponse) {
    response = &DescribeVpcCniPodLimitsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeVpcCniPodLimits
// 本接口查询当前用户和地域在指定可用区下的机型可支持的最大 TKE VPC-CNI 网络模式的 Pod 数量
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeVpcCniPodLimits(request *DescribeVpcCniPodLimitsRequest) (response *DescribeVpcCniPodLimitsResponse, err error) {
    return c.DescribeVpcCniPodLimitsWithContext(context.Background(), request)
}

// DescribeVpcCniPodLimits
// 本接口查询当前用户和地域在指定可用区下的机型可支持的最大 TKE VPC-CNI 网络模式的 Pod 数量
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeVpcCniPodLimitsWithContext(ctx context.Context, request *DescribeVpcCniPodLimitsRequest) (response *DescribeVpcCniPodLimitsResponse, err error) {
    if request == nil {
        request = NewDescribeVpcCniPodLimitsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeVpcCniPodLimits require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeVpcCniPodLimitsResponse()
    err = c.Send(request, response)
    return
}

func NewDescribeZoneDiskQuotaRequest() (request *DescribeZoneDiskQuotaRequest) {
    request = &DescribeZoneDiskQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DescribeZoneDiskQuota")
    
    
    return
}

func NewDescribeZoneDiskQuotaResponse() (response *DescribeZoneDiskQuotaResponse) {
    response = &DescribeZoneDiskQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DescribeZoneDiskQuota
// 查询集群使用的系统盘类型及云硬盘在各个可用区的配额
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeZoneDiskQuota(request *DescribeZoneDiskQuotaRequest) (response *DescribeZoneDiskQuotaResponse, err error) {
    return c.DescribeZoneDiskQuotaWithContext(context.Background(), request)
}

// DescribeZoneDiskQuota
// 查询集群使用的系统盘类型及云硬盘在各个可用区的配额
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DescribeZoneDiskQuotaWithContext(ctx context.Context, request *DescribeZoneDiskQuotaRequest) (response *DescribeZoneDiskQuotaResponse, err error) {
    if request == nil {
        request = NewDescribeZoneDiskQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DescribeZoneDiskQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewDescribeZoneDiskQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewDestroyPrometheusInstanceRequest() (request *DestroyPrometheusInstanceRequest) {
    request = &DestroyPrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DestroyPrometheusInstance")
    
    
    return
}

func NewDestroyPrometheusInstanceResponse() (response *DestroyPrometheusInstanceResponse) {
    response = &DestroyPrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DestroyPrometheusInstance
// 销毁与云监控融合的V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DestroyPrometheusInstance(request *DestroyPrometheusInstanceRequest) (response *DestroyPrometheusInstanceResponse, err error) {
    return c.DestroyPrometheusInstanceWithContext(context.Background(), request)
}

// DestroyPrometheusInstance
// 销毁与云监控融合的V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) DestroyPrometheusInstanceWithContext(ctx context.Context, request *DestroyPrometheusInstanceRequest) (response *DestroyPrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewDestroyPrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DestroyPrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewDestroyPrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewDisableCloudRunEventPersistenceRequest() (request *DisableCloudRunEventPersistenceRequest) {
    request = &DisableCloudRunEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableCloudRunEventPersistence")
    
    
    return
}

func NewDisableCloudRunEventPersistenceResponse() (response *DisableCloudRunEventPersistenceResponse) {
    response = &DisableCloudRunEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableCloudRunEventPersistence
// 关闭cloudrun事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableCloudRunEventPersistence(request *DisableCloudRunEventPersistenceRequest) (response *DisableCloudRunEventPersistenceResponse, err error) {
    return c.DisableCloudRunEventPersistenceWithContext(context.Background(), request)
}

// DisableCloudRunEventPersistence
// 关闭cloudrun事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableCloudRunEventPersistenceWithContext(ctx context.Context, request *DisableCloudRunEventPersistenceRequest) (response *DisableCloudRunEventPersistenceResponse, err error) {
    if request == nil {
        request = NewDisableCloudRunEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableCloudRunEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableCloudRunEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewDisableClusterAuditRequest() (request *DisableClusterAuditRequest) {
    request = &DisableClusterAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableClusterAudit")
    
    
    return
}

func NewDisableClusterAuditResponse() (response *DisableClusterAuditResponse) {
    response = &DisableClusterAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableClusterAudit
// 关闭集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DisableClusterAudit(request *DisableClusterAuditRequest) (response *DisableClusterAuditResponse, err error) {
    return c.DisableClusterAuditWithContext(context.Background(), request)
}

// DisableClusterAudit
// 关闭集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DisableClusterAuditWithContext(ctx context.Context, request *DisableClusterAuditRequest) (response *DisableClusterAuditResponse, err error) {
    if request == nil {
        request = NewDisableClusterAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableClusterAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableClusterAuditResponse()
    err = c.Send(request, response)
    return
}

func NewDisableClusterDeletionProtectionRequest() (request *DisableClusterDeletionProtectionRequest) {
    request = &DisableClusterDeletionProtectionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableClusterDeletionProtection")
    
    
    return
}

func NewDisableClusterDeletionProtectionResponse() (response *DisableClusterDeletionProtectionResponse) {
    response = &DisableClusterDeletionProtectionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableClusterDeletionProtection
// 关闭集群删除保护
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DisableClusterDeletionProtection(request *DisableClusterDeletionProtectionRequest) (response *DisableClusterDeletionProtectionResponse, err error) {
    return c.DisableClusterDeletionProtectionWithContext(context.Background(), request)
}

// DisableClusterDeletionProtection
// 关闭集群删除保护
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DisableClusterDeletionProtectionWithContext(ctx context.Context, request *DisableClusterDeletionProtectionRequest) (response *DisableClusterDeletionProtectionResponse, err error) {
    if request == nil {
        request = NewDisableClusterDeletionProtectionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableClusterDeletionProtection require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableClusterDeletionProtectionResponse()
    err = c.Send(request, response)
    return
}

func NewDisableEdgeClusterAuditRequest() (request *DisableEdgeClusterAuditRequest) {
    request = &DisableEdgeClusterAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableEdgeClusterAudit")
    
    
    return
}

func NewDisableEdgeClusterAuditResponse() (response *DisableEdgeClusterAuditResponse) {
    response = &DisableEdgeClusterAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableEdgeClusterAudit
// 关闭边缘集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DisableEdgeClusterAudit(request *DisableEdgeClusterAuditRequest) (response *DisableEdgeClusterAuditResponse, err error) {
    return c.DisableEdgeClusterAuditWithContext(context.Background(), request)
}

// DisableEdgeClusterAudit
// 关闭边缘集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DisableEdgeClusterAuditWithContext(ctx context.Context, request *DisableEdgeClusterAuditRequest) (response *DisableEdgeClusterAuditResponse, err error) {
    if request == nil {
        request = NewDisableEdgeClusterAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableEdgeClusterAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableEdgeClusterAuditResponse()
    err = c.Send(request, response)
    return
}

func NewDisableEdgeEventPersistenceRequest() (request *DisableEdgeEventPersistenceRequest) {
    request = &DisableEdgeEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableEdgeEventPersistence")
    
    
    return
}

func NewDisableEdgeEventPersistenceResponse() (response *DisableEdgeEventPersistenceResponse) {
    response = &DisableEdgeEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableEdgeEventPersistence
// 关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEdgeEventPersistence(request *DisableEdgeEventPersistenceRequest) (response *DisableEdgeEventPersistenceResponse, err error) {
    return c.DisableEdgeEventPersistenceWithContext(context.Background(), request)
}

// DisableEdgeEventPersistence
// 关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEdgeEventPersistenceWithContext(ctx context.Context, request *DisableEdgeEventPersistenceRequest) (response *DisableEdgeEventPersistenceResponse, err error) {
    if request == nil {
        request = NewDisableEdgeEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableEdgeEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableEdgeEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewDisableEksAuditRequest() (request *DisableEksAuditRequest) {
    request = &DisableEksAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableEksAudit")
    
    
    return
}

func NewDisableEksAuditResponse() (response *DisableEksAuditResponse) {
    response = &DisableEksAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableEksAudit
// 关闭弹性集群审计
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DisableEksAudit(request *DisableEksAuditRequest) (response *DisableEksAuditResponse, err error) {
    return c.DisableEksAuditWithContext(context.Background(), request)
}

// DisableEksAudit
// 关闭弹性集群审计
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) DisableEksAuditWithContext(ctx context.Context, request *DisableEksAuditRequest) (response *DisableEksAuditResponse, err error) {
    if request == nil {
        request = NewDisableEksAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableEksAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableEksAuditResponse()
    err = c.Send(request, response)
    return
}

func NewDisableEksEventPersistenceRequest() (request *DisableEksEventPersistenceRequest) {
    request = &DisableEksEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableEksEventPersistence")
    
    
    return
}

func NewDisableEksEventPersistenceResponse() (response *DisableEksEventPersistenceResponse) {
    response = &DisableEksEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableEksEventPersistence
// Eks集群关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEksEventPersistence(request *DisableEksEventPersistenceRequest) (response *DisableEksEventPersistenceResponse, err error) {
    return c.DisableEksEventPersistenceWithContext(context.Background(), request)
}

// DisableEksEventPersistence
// Eks集群关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEksEventPersistenceWithContext(ctx context.Context, request *DisableEksEventPersistenceRequest) (response *DisableEksEventPersistenceResponse, err error) {
    if request == nil {
        request = NewDisableEksEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableEksEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableEksEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewDisableEventPersistenceRequest() (request *DisableEventPersistenceRequest) {
    request = &DisableEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableEventPersistence")
    
    
    return
}

func NewDisableEventPersistenceResponse() (response *DisableEventPersistenceResponse) {
    response = &DisableEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableEventPersistence
// 关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEventPersistence(request *DisableEventPersistenceRequest) (response *DisableEventPersistenceResponse, err error) {
    return c.DisableEventPersistenceWithContext(context.Background(), request)
}

// DisableEventPersistence
// 关闭事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
func (c *Client) DisableEventPersistenceWithContext(ctx context.Context, request *DisableEventPersistenceRequest) (response *DisableEventPersistenceResponse, err error) {
    if request == nil {
        request = NewDisableEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewDisableMasterLogRequest() (request *DisableMasterLogRequest) {
    request = &DisableMasterLogRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableMasterLog")
    
    
    return
}

func NewDisableMasterLogResponse() (response *DisableMasterLogResponse) {
    response = &DisableMasterLogResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableMasterLog
// 关闭指定master组件日志收集
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DisableMasterLog(request *DisableMasterLogRequest) (response *DisableMasterLogResponse, err error) {
    return c.DisableMasterLogWithContext(context.Background(), request)
}

// DisableMasterLog
// 关闭指定master组件日志收集
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) DisableMasterLogWithContext(ctx context.Context, request *DisableMasterLogRequest) (response *DisableMasterLogResponse, err error) {
    if request == nil {
        request = NewDisableMasterLogRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableMasterLog require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableMasterLogResponse()
    err = c.Send(request, response)
    return
}

func NewDisableResourceRecommendationRequest() (request *DisableResourceRecommendationRequest) {
    request = &DisableResourceRecommendationRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableResourceRecommendation")
    
    
    return
}

func NewDisableResourceRecommendationResponse() (response *DisableResourceRecommendationResponse) {
    response = &DisableResourceRecommendationResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableResourceRecommendation
// 关闭集群中的资源推荐服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DisableResourceRecommendation(request *DisableResourceRecommendationRequest) (response *DisableResourceRecommendationResponse, err error) {
    return c.DisableResourceRecommendationWithContext(context.Background(), request)
}

// DisableResourceRecommendation
// 关闭集群中的资源推荐服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) DisableResourceRecommendationWithContext(ctx context.Context, request *DisableResourceRecommendationRequest) (response *DisableResourceRecommendationResponse, err error) {
    if request == nil {
        request = NewDisableResourceRecommendationRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableResourceRecommendation require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableResourceRecommendationResponse()
    err = c.Send(request, response)
    return
}

func NewDisableVpcCniNetworkTypeRequest() (request *DisableVpcCniNetworkTypeRequest) {
    request = &DisableVpcCniNetworkTypeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DisableVpcCniNetworkType")
    
    
    return
}

func NewDisableVpcCniNetworkTypeResponse() (response *DisableVpcCniNetworkTypeResponse) {
    response = &DisableVpcCniNetworkTypeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DisableVpcCniNetworkType
// 提供给附加了VPC-CNI能力的Global-Route集群关闭VPC-CNI
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DisableVpcCniNetworkType(request *DisableVpcCniNetworkTypeRequest) (response *DisableVpcCniNetworkTypeResponse, err error) {
    return c.DisableVpcCniNetworkTypeWithContext(context.Background(), request)
}

// DisableVpcCniNetworkType
// 提供给附加了VPC-CNI能力的Global-Route集群关闭VPC-CNI
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCREATE = "InternalError.KubeClientCreate"
//  INTERNALERROR_KUBECOMMON = "InternalError.KubeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) DisableVpcCniNetworkTypeWithContext(ctx context.Context, request *DisableVpcCniNetworkTypeRequest) (response *DisableVpcCniNetworkTypeResponse, err error) {
    if request == nil {
        request = NewDisableVpcCniNetworkTypeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DisableVpcCniNetworkType require credential")
    }

    request.SetContext(ctx)
    
    response = NewDisableVpcCniNetworkTypeResponse()
    err = c.Send(request, response)
    return
}

func NewDrainClusterNodeRequest() (request *DrainClusterNodeRequest) {
    request = &DrainClusterNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DrainClusterNode")
    
    
    return
}

func NewDrainClusterNodeResponse() (response *DrainClusterNodeResponse) {
    response = &DrainClusterNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DrainClusterNode
// 驱逐集群中的节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainClusterNode(request *DrainClusterNodeRequest) (response *DrainClusterNodeResponse, err error) {
    return c.DrainClusterNodeWithContext(context.Background(), request)
}

// DrainClusterNode
// 驱逐集群中的节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_TASKCREATEFAILED = "InternalError.TaskCreateFailed"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainClusterNodeWithContext(ctx context.Context, request *DrainClusterNodeRequest) (response *DrainClusterNodeResponse, err error) {
    if request == nil {
        request = NewDrainClusterNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DrainClusterNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDrainClusterNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDrainClusterVirtualNodeRequest() (request *DrainClusterVirtualNodeRequest) {
    request = &DrainClusterVirtualNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DrainClusterVirtualNode")
    
    
    return
}

func NewDrainClusterVirtualNodeResponse() (response *DrainClusterVirtualNodeResponse) {
    response = &DrainClusterVirtualNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DrainClusterVirtualNode
// 驱逐虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DrainClusterVirtualNode(request *DrainClusterVirtualNodeRequest) (response *DrainClusterVirtualNodeResponse, err error) {
    return c.DrainClusterVirtualNodeWithContext(context.Background(), request)
}

// DrainClusterVirtualNode
// 驱逐虚拟节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DrainClusterVirtualNodeWithContext(ctx context.Context, request *DrainClusterVirtualNodeRequest) (response *DrainClusterVirtualNodeResponse, err error) {
    if request == nil {
        request = NewDrainClusterVirtualNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DrainClusterVirtualNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDrainClusterVirtualNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDrainEksClusterNodeRequest() (request *DrainEksClusterNodeRequest) {
    request = &DrainEksClusterNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DrainEksClusterNode")
    
    
    return
}

func NewDrainEksClusterNodeResponse() (response *DrainEksClusterNodeResponse) {
    response = &DrainEksClusterNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DrainEksClusterNode
// 驱逐弹性集群节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainEksClusterNode(request *DrainEksClusterNodeRequest) (response *DrainEksClusterNodeResponse, err error) {
    return c.DrainEksClusterNodeWithContext(context.Background(), request)
}

// DrainEksClusterNode
// 驱逐弹性集群节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainEksClusterNodeWithContext(ctx context.Context, request *DrainEksClusterNodeRequest) (response *DrainEksClusterNodeResponse, err error) {
    if request == nil {
        request = NewDrainEksClusterNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DrainEksClusterNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDrainEksClusterNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDrainEksNodeRequest() (request *DrainEksNodeRequest) {
    request = &DrainEksNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DrainEksNode")
    
    
    return
}

func NewDrainEksNodeResponse() (response *DrainEksNodeResponse) {
    response = &DrainEksNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DrainEksNode
// 驱逐弹性集群的节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainEksNode(request *DrainEksNodeRequest) (response *DrainEksNodeResponse, err error) {
    return c.DrainEksNodeWithContext(context.Background(), request)
}

// DrainEksNode
// 驱逐弹性集群的节点
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) DrainEksNodeWithContext(ctx context.Context, request *DrainEksNodeRequest) (response *DrainEksNodeResponse, err error) {
    if request == nil {
        request = NewDrainEksNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DrainEksNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDrainEksNodeResponse()
    err = c.Send(request, response)
    return
}

func NewDrainExternalNodeRequest() (request *DrainExternalNodeRequest) {
    request = &DrainExternalNodeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "DrainExternalNode")
    
    
    return
}

func NewDrainExternalNodeResponse() (response *DrainExternalNodeResponse) {
    response = &DrainExternalNodeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// DrainExternalNode
// 驱逐第三方节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DrainExternalNode(request *DrainExternalNodeRequest) (response *DrainExternalNodeResponse, err error) {
    return c.DrainExternalNodeWithContext(context.Background(), request)
}

// DrainExternalNode
// 驱逐第三方节点
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) DrainExternalNodeWithContext(ctx context.Context, request *DrainExternalNodeRequest) (response *DrainExternalNodeResponse, err error) {
    if request == nil {
        request = NewDrainExternalNodeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("DrainExternalNode require credential")
    }

    request.SetContext(ctx)
    
    response = NewDrainExternalNodeResponse()
    err = c.Send(request, response)
    return
}

func NewEnableCloudRunEventPersistenceRequest() (request *EnableCloudRunEventPersistenceRequest) {
    request = &EnableCloudRunEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableCloudRunEventPersistence")
    
    
    return
}

func NewEnableCloudRunEventPersistenceResponse() (response *EnableCloudRunEventPersistenceResponse) {
    response = &EnableCloudRunEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableCloudRunEventPersistence
// 开启cloudrun事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableCloudRunEventPersistence(request *EnableCloudRunEventPersistenceRequest) (response *EnableCloudRunEventPersistenceResponse, err error) {
    return c.EnableCloudRunEventPersistenceWithContext(context.Background(), request)
}

// EnableCloudRunEventPersistence
// 开启cloudrun事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableCloudRunEventPersistenceWithContext(ctx context.Context, request *EnableCloudRunEventPersistenceRequest) (response *EnableCloudRunEventPersistenceResponse, err error) {
    if request == nil {
        request = NewEnableCloudRunEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableCloudRunEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableCloudRunEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewEnableClusterAuditRequest() (request *EnableClusterAuditRequest) {
    request = &EnableClusterAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableClusterAudit")
    
    
    return
}

func NewEnableClusterAuditResponse() (response *EnableClusterAuditResponse) {
    response = &EnableClusterAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableClusterAudit
// 开启集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableClusterAudit(request *EnableClusterAuditRequest) (response *EnableClusterAuditResponse, err error) {
    return c.EnableClusterAuditWithContext(context.Background(), request)
}

// EnableClusterAudit
// 开启集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableClusterAuditWithContext(ctx context.Context, request *EnableClusterAuditRequest) (response *EnableClusterAuditResponse, err error) {
    if request == nil {
        request = NewEnableClusterAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableClusterAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableClusterAuditResponse()
    err = c.Send(request, response)
    return
}

func NewEnableClusterDeletionProtectionRequest() (request *EnableClusterDeletionProtectionRequest) {
    request = &EnableClusterDeletionProtectionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableClusterDeletionProtection")
    
    
    return
}

func NewEnableClusterDeletionProtectionResponse() (response *EnableClusterDeletionProtectionResponse) {
    response = &EnableClusterDeletionProtectionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableClusterDeletionProtection
// 启用集群删除保护
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableClusterDeletionProtection(request *EnableClusterDeletionProtectionRequest) (response *EnableClusterDeletionProtectionResponse, err error) {
    return c.EnableClusterDeletionProtectionWithContext(context.Background(), request)
}

// EnableClusterDeletionProtection
// 启用集群删除保护
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableClusterDeletionProtectionWithContext(ctx context.Context, request *EnableClusterDeletionProtectionRequest) (response *EnableClusterDeletionProtectionResponse, err error) {
    if request == nil {
        request = NewEnableClusterDeletionProtectionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableClusterDeletionProtection require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableClusterDeletionProtectionResponse()
    err = c.Send(request, response)
    return
}

func NewEnableEdgeClusterAuditRequest() (request *EnableEdgeClusterAuditRequest) {
    request = &EnableEdgeClusterAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableEdgeClusterAudit")
    
    
    return
}

func NewEnableEdgeClusterAuditResponse() (response *EnableEdgeClusterAuditResponse) {
    response = &EnableEdgeClusterAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableEdgeClusterAudit
// 开启边缘集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableEdgeClusterAudit(request *EnableEdgeClusterAuditRequest) (response *EnableEdgeClusterAuditResponse, err error) {
    return c.EnableEdgeClusterAuditWithContext(context.Background(), request)
}

// EnableEdgeClusterAudit
// 开启边缘集群审计
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableEdgeClusterAuditWithContext(ctx context.Context, request *EnableEdgeClusterAuditRequest) (response *EnableEdgeClusterAuditResponse, err error) {
    if request == nil {
        request = NewEnableEdgeClusterAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableEdgeClusterAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableEdgeClusterAuditResponse()
    err = c.Send(request, response)
    return
}

func NewEnableEdgeEventPersistenceRequest() (request *EnableEdgeEventPersistenceRequest) {
    request = &EnableEdgeEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableEdgeEventPersistence")
    
    
    return
}

func NewEnableEdgeEventPersistenceResponse() (response *EnableEdgeEventPersistenceResponse) {
    response = &EnableEdgeEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableEdgeEventPersistence
// 开启事件持久化功能 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEdgeEventPersistence(request *EnableEdgeEventPersistenceRequest) (response *EnableEdgeEventPersistenceResponse, err error) {
    return c.EnableEdgeEventPersistenceWithContext(context.Background(), request)
}

// EnableEdgeEventPersistence
// 开启事件持久化功能 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEdgeEventPersistenceWithContext(ctx context.Context, request *EnableEdgeEventPersistenceRequest) (response *EnableEdgeEventPersistenceResponse, err error) {
    if request == nil {
        request = NewEnableEdgeEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableEdgeEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableEdgeEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewEnableEksAuditRequest() (request *EnableEksAuditRequest) {
    request = &EnableEksAuditRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableEksAudit")
    
    
    return
}

func NewEnableEksAuditResponse() (response *EnableEksAuditResponse) {
    response = &EnableEksAuditResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableEksAudit
// 开启弹性集群审计
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) EnableEksAudit(request *EnableEksAuditRequest) (response *EnableEksAuditResponse, err error) {
    return c.EnableEksAuditWithContext(context.Background(), request)
}

// EnableEksAudit
// 开启弹性集群审计
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) EnableEksAuditWithContext(ctx context.Context, request *EnableEksAuditRequest) (response *EnableEksAuditResponse, err error) {
    if request == nil {
        request = NewEnableEksAuditRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableEksAudit require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableEksAuditResponse()
    err = c.Send(request, response)
    return
}

func NewEnableEksEventPersistenceRequest() (request *EnableEksEventPersistenceRequest) {
    request = &EnableEksEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableEksEventPersistence")
    
    
    return
}

func NewEnableEksEventPersistenceResponse() (response *EnableEksEventPersistenceResponse) {
    response = &EnableEksEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableEksEventPersistence
// Eks集群开启事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEksEventPersistence(request *EnableEksEventPersistenceRequest) (response *EnableEksEventPersistenceResponse, err error) {
    return c.EnableEksEventPersistenceWithContext(context.Background(), request)
}

// EnableEksEventPersistence
// Eks集群开启事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEksEventPersistenceWithContext(ctx context.Context, request *EnableEksEventPersistenceRequest) (response *EnableEksEventPersistenceResponse, err error) {
    if request == nil {
        request = NewEnableEksEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableEksEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableEksEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewEnableEventPersistenceRequest() (request *EnableEventPersistenceRequest) {
    request = &EnableEventPersistenceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableEventPersistence")
    
    
    return
}

func NewEnableEventPersistenceResponse() (response *EnableEventPersistenceResponse) {
    response = &EnableEventPersistenceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableEventPersistence
// 开启事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEventPersistence(request *EnableEventPersistenceRequest) (response *EnableEventPersistenceResponse, err error) {
    return c.EnableEventPersistenceWithContext(context.Background(), request)
}

// EnableEventPersistence
// 开启事件持久化功能
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableEventPersistenceWithContext(ctx context.Context, request *EnableEventPersistenceRequest) (response *EnableEventPersistenceResponse, err error) {
    if request == nil {
        request = NewEnableEventPersistenceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableEventPersistence require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableEventPersistenceResponse()
    err = c.Send(request, response)
    return
}

func NewEnableExternalNodeSupportRequest() (request *EnableExternalNodeSupportRequest) {
    request = &EnableExternalNodeSupportRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableExternalNodeSupport")
    
    
    return
}

func NewEnableExternalNodeSupportResponse() (response *EnableExternalNodeSupportResponse) {
    response = &EnableExternalNodeSupportResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableExternalNodeSupport
// 开启第三方节点池支持
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_SUBNETINVALIDERROR = "InvalidParameter.SubnetInvalidError"
//  UNSUPPORTEDOPERATION_ALREADYENABLED = "UnsupportedOperation.AlreadyEnabled"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
//  UNSUPPORTEDOPERATION_UNSUPPORTEDNETWORKTYPE = "UnsupportedOperation.UnsupportedNetworkType"
func (c *Client) EnableExternalNodeSupport(request *EnableExternalNodeSupportRequest) (response *EnableExternalNodeSupportResponse, err error) {
    return c.EnableExternalNodeSupportWithContext(context.Background(), request)
}

// EnableExternalNodeSupport
// 开启第三方节点池支持
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_SUBNETINVALIDERROR = "InvalidParameter.SubnetInvalidError"
//  UNSUPPORTEDOPERATION_ALREADYENABLED = "UnsupportedOperation.AlreadyEnabled"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
//  UNSUPPORTEDOPERATION_UNSUPPORTEDNETWORKTYPE = "UnsupportedOperation.UnsupportedNetworkType"
func (c *Client) EnableExternalNodeSupportWithContext(ctx context.Context, request *EnableExternalNodeSupportRequest) (response *EnableExternalNodeSupportResponse, err error) {
    if request == nil {
        request = NewEnableExternalNodeSupportRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableExternalNodeSupport require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableExternalNodeSupportResponse()
    err = c.Send(request, response)
    return
}

func NewEnableMasterLogRequest() (request *EnableMasterLogRequest) {
    request = &EnableMasterLogRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableMasterLog")
    
    
    return
}

func NewEnableMasterLogResponse() (response *EnableMasterLogResponse) {
    response = &EnableMasterLogResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableMasterLog
// 开启master日志组件收集
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableMasterLog(request *EnableMasterLogRequest) (response *EnableMasterLogResponse, err error) {
    return c.EnableMasterLogWithContext(context.Background(), request)
}

// EnableMasterLog
// 开启master日志组件收集
//
// 可能返回的错误码:
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) EnableMasterLogWithContext(ctx context.Context, request *EnableMasterLogRequest) (response *EnableMasterLogResponse, err error) {
    if request == nil {
        request = NewEnableMasterLogRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableMasterLog require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableMasterLogResponse()
    err = c.Send(request, response)
    return
}

func NewEnableMetaFeatureRequest() (request *EnableMetaFeatureRequest) {
    request = &EnableMetaFeatureRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableMetaFeature")
    
    
    return
}

func NewEnableMetaFeatureResponse() (response *EnableMetaFeatureResponse) {
    response = &EnableMetaFeatureResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableMetaFeature
// 跨租户相关接口，需要控制不能对外
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_NOTVERIFIED = "InternalError.NotVerified"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
func (c *Client) EnableMetaFeature(request *EnableMetaFeatureRequest) (response *EnableMetaFeatureResponse, err error) {
    return c.EnableMetaFeatureWithContext(context.Background(), request)
}

// EnableMetaFeature
// 跨租户相关接口，需要控制不能对外
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_NOTVERIFIED = "InternalError.NotVerified"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
func (c *Client) EnableMetaFeatureWithContext(ctx context.Context, request *EnableMetaFeatureRequest) (response *EnableMetaFeatureResponse, err error) {
    if request == nil {
        request = NewEnableMetaFeatureRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableMetaFeature require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableMetaFeatureResponse()
    err = c.Send(request, response)
    return
}

func NewEnableResourceRecommendationRequest() (request *EnableResourceRecommendationRequest) {
    request = &EnableResourceRecommendationRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableResourceRecommendation")
    
    
    return
}

func NewEnableResourceRecommendationResponse() (response *EnableResourceRecommendationResponse) {
    response = &EnableResourceRecommendationResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableResourceRecommendation
// 开启资源推荐服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) EnableResourceRecommendation(request *EnableResourceRecommendationRequest) (response *EnableResourceRecommendationResponse, err error) {
    return c.EnableResourceRecommendationWithContext(context.Background(), request)
}

// EnableResourceRecommendation
// 开启资源推荐服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) EnableResourceRecommendationWithContext(ctx context.Context, request *EnableResourceRecommendationRequest) (response *EnableResourceRecommendationResponse, err error) {
    if request == nil {
        request = NewEnableResourceRecommendationRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableResourceRecommendation require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableResourceRecommendationResponse()
    err = c.Send(request, response)
    return
}

func NewEnableVpcCniNetworkTypeRequest() (request *EnableVpcCniNetworkTypeRequest) {
    request = &EnableVpcCniNetworkTypeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableVpcCniNetworkType")
    
    
    return
}

func NewEnableVpcCniNetworkTypeResponse() (response *EnableVpcCniNetworkTypeResponse) {
    response = &EnableVpcCniNetworkTypeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableVpcCniNetworkType
// GR集群可以通过本接口附加vpc-cni容器网络插件，开启vpc-cni容器网络能力
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableVpcCniNetworkType(request *EnableVpcCniNetworkTypeRequest) (response *EnableVpcCniNetworkTypeResponse, err error) {
    return c.EnableVpcCniNetworkTypeWithContext(context.Background(), request)
}

// EnableVpcCniNetworkType
// GR集群可以通过本接口附加vpc-cni容器网络插件，开启vpc-cni容器网络能力
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) EnableVpcCniNetworkTypeWithContext(ctx context.Context, request *EnableVpcCniNetworkTypeRequest) (response *EnableVpcCniNetworkTypeResponse, err error) {
    if request == nil {
        request = NewEnableVpcCniNetworkTypeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableVpcCniNetworkType require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableVpcCniNetworkTypeResponse()
    err = c.Send(request, response)
    return
}

func NewEnableVpcPeerClusterRoutesRequest() (request *EnableVpcPeerClusterRoutesRequest) {
    request = &EnableVpcPeerClusterRoutesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "EnableVpcPeerClusterRoutes")
    
    
    return
}

func NewEnableVpcPeerClusterRoutesResponse() (response *EnableVpcPeerClusterRoutesResponse) {
    response = &EnableVpcPeerClusterRoutesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// EnableVpcPeerClusterRoutes
// 启动对等连接容器路由
//
// 可能返回的错误码:
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
func (c *Client) EnableVpcPeerClusterRoutes(request *EnableVpcPeerClusterRoutesRequest) (response *EnableVpcPeerClusterRoutesResponse, err error) {
    return c.EnableVpcPeerClusterRoutesWithContext(context.Background(), request)
}

// EnableVpcPeerClusterRoutes
// 启动对等连接容器路由
//
// 可能返回的错误码:
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_ROUTETABLENOTFOUND = "InternalError.RouteTableNotFound"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCPEERNOTFOUND = "InternalError.VpcPeerNotFound"
func (c *Client) EnableVpcPeerClusterRoutesWithContext(ctx context.Context, request *EnableVpcPeerClusterRoutesRequest) (response *EnableVpcPeerClusterRoutesResponse, err error) {
    if request == nil {
        request = NewEnableVpcPeerClusterRoutesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("EnableVpcPeerClusterRoutes require credential")
    }

    request.SetContext(ctx)
    
    response = NewEnableVpcPeerClusterRoutesResponse()
    err = c.Send(request, response)
    return
}

func NewForwardApplicationRequestV3Request() (request *ForwardApplicationRequestV3Request) {
    request = &ForwardApplicationRequestV3Request{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardApplicationRequestV3")
    
    
    return
}

func NewForwardApplicationRequestV3Response() (response *ForwardApplicationRequestV3Response) {
    response = &ForwardApplicationRequestV3Response{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardApplicationRequestV3
// 操作TKE集群的addon
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) ForwardApplicationRequestV3(request *ForwardApplicationRequestV3Request) (response *ForwardApplicationRequestV3Response, err error) {
    return c.ForwardApplicationRequestV3WithContext(context.Background(), request)
}

// ForwardApplicationRequestV3
// 操作TKE集群的addon
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) ForwardApplicationRequestV3WithContext(ctx context.Context, request *ForwardApplicationRequestV3Request) (response *ForwardApplicationRequestV3Response, err error) {
    if request == nil {
        request = NewForwardApplicationRequestV3Request()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardApplicationRequestV3 require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardApplicationRequestV3Response()
    err = c.Send(request, response)
    return
}

func NewForwardClusterRequestRequest() (request *ForwardClusterRequestRequest) {
    request = &ForwardClusterRequestRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardClusterRequest")
    
    
    return
}

func NewForwardClusterRequestResponse() (response *ForwardClusterRequestResponse) {
    response = &ForwardClusterRequestResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardClusterRequest
// 查询、新增、删除、编辑TKE集群内资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardClusterRequest(request *ForwardClusterRequestRequest) (response *ForwardClusterRequestResponse, err error) {
    return c.ForwardClusterRequestWithContext(context.Background(), request)
}

// ForwardClusterRequest
// 查询、新增、删除、编辑TKE集群内资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardClusterRequestWithContext(ctx context.Context, request *ForwardClusterRequestRequest) (response *ForwardClusterRequestResponse, err error) {
    if request == nil {
        request = NewForwardClusterRequestRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardClusterRequest require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardClusterRequestResponse()
    err = c.Send(request, response)
    return
}

func NewForwardPlatformRequestV3Request() (request *ForwardPlatformRequestV3Request) {
    request = &ForwardPlatformRequestV3Request{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardPlatformRequestV3")
    
    
    return
}

func NewForwardPlatformRequestV3Response() (response *ForwardPlatformRequestV3Response) {
    response = &ForwardPlatformRequestV3Response{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardPlatformRequestV3
// 查询、新增、删除、编辑TKE集群内的资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardPlatformRequestV3(request *ForwardPlatformRequestV3Request) (response *ForwardPlatformRequestV3Response, err error) {
    return c.ForwardPlatformRequestV3WithContext(context.Background(), request)
}

// ForwardPlatformRequestV3
// 查询、新增、删除、编辑TKE集群内的资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardPlatformRequestV3WithContext(ctx context.Context, request *ForwardPlatformRequestV3Request) (response *ForwardPlatformRequestV3Response, err error) {
    if request == nil {
        request = NewForwardPlatformRequestV3Request()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardPlatformRequestV3 require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardPlatformRequestV3Response()
    err = c.Send(request, response)
    return
}

func NewForwardRequestRequest() (request *ForwardRequestRequest) {
    request = &ForwardRequestRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardRequest")
    
    
    return
}

func NewForwardRequestResponse() (response *ForwardRequestResponse) {
    response = &ForwardRequestResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardRequest
// YUNAPI 转发请求给TKE APIServer接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequest(request *ForwardRequestRequest) (response *ForwardRequestResponse, err error) {
    return c.ForwardRequestWithContext(context.Background(), request)
}

// ForwardRequest
// YUNAPI 转发请求给TKE APIServer接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequestWithContext(ctx context.Context, request *ForwardRequestRequest) (response *ForwardRequestResponse, err error) {
    if request == nil {
        request = NewForwardRequestRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardRequest require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardRequestResponse()
    err = c.Send(request, response)
    return
}

func NewForwardRequestForDev1Request() (request *ForwardRequestForDev1Request) {
    request = &ForwardRequestForDev1Request{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardRequestForDev1")
    
    
    return
}

func NewForwardRequestForDev1Response() (response *ForwardRequestForDev1Response) {
    response = &ForwardRequestForDev1Response{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardRequestForDev1
// YUNAPI 转发请求给TKE APIServer接口
//
// 该接口用于开发联调或测试
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequestForDev1(request *ForwardRequestForDev1Request) (response *ForwardRequestForDev1Response, err error) {
    return c.ForwardRequestForDev1WithContext(context.Background(), request)
}

// ForwardRequestForDev1
// YUNAPI 转发请求给TKE APIServer接口
//
// 该接口用于开发联调或测试
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequestForDev1WithContext(ctx context.Context, request *ForwardRequestForDev1Request) (response *ForwardRequestForDev1Response, err error) {
    if request == nil {
        request = NewForwardRequestForDev1Request()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardRequestForDev1 require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardRequestForDev1Response()
    err = c.Send(request, response)
    return
}

func NewForwardRequestTDCCRequest() (request *ForwardRequestTDCCRequest) {
    request = &ForwardRequestTDCCRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardRequestTDCC")
    
    
    return
}

func NewForwardRequestTDCCResponse() (response *ForwardRequestTDCCResponse) {
    response = &ForwardRequestTDCCResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardRequestTDCC
// 转发注册集群 workload 查询
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequestTDCC(request *ForwardRequestTDCCRequest) (response *ForwardRequestTDCCResponse, err error) {
    return c.ForwardRequestTDCCWithContext(context.Background(), request)
}

// ForwardRequestTDCC
// 转发注册集群 workload 查询
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardRequestTDCCWithContext(ctx context.Context, request *ForwardRequestTDCCRequest) (response *ForwardRequestTDCCResponse, err error) {
    if request == nil {
        request = NewForwardRequestTDCCRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardRequestTDCC require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardRequestTDCCResponse()
    err = c.Send(request, response)
    return
}

func NewForwardTKEEdgeClusterRequestRequest() (request *ForwardTKEEdgeClusterRequestRequest) {
    request = &ForwardTKEEdgeClusterRequestRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ForwardTKEEdgeClusterRequest")
    
    
    return
}

func NewForwardTKEEdgeClusterRequestResponse() (response *ForwardTKEEdgeClusterRequestResponse) {
    response = &ForwardTKEEdgeClusterRequestResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ForwardTKEEdgeClusterRequest
// 查询、新增、删除、编辑TKE边缘计算集群内资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardTKEEdgeClusterRequest(request *ForwardTKEEdgeClusterRequestRequest) (response *ForwardTKEEdgeClusterRequestResponse, err error) {
    return c.ForwardTKEEdgeClusterRequestWithContext(context.Background(), request)
}

// ForwardTKEEdgeClusterRequest
// 查询、新增、删除、编辑TKE边缘计算集群内资源
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ForwardTKEEdgeClusterRequestWithContext(ctx context.Context, request *ForwardTKEEdgeClusterRequestRequest) (response *ForwardTKEEdgeClusterRequestResponse, err error) {
    if request == nil {
        request = NewForwardTKEEdgeClusterRequestRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ForwardTKEEdgeClusterRequest require credential")
    }

    request.SetContext(ctx)
    
    response = NewForwardTKEEdgeClusterRequestResponse()
    err = c.Send(request, response)
    return
}

func NewGetAccountTypeRequest() (request *GetAccountTypeRequest) {
    request = &GetAccountTypeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetAccountType")
    
    
    return
}

func NewGetAccountTypeResponse() (response *GetAccountTypeResponse) {
    response = &GetAccountTypeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetAccountType
// 查询主账号类型
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetAccountType(request *GetAccountTypeRequest) (response *GetAccountTypeResponse, err error) {
    return c.GetAccountTypeWithContext(context.Background(), request)
}

// GetAccountType
// 查询主账号类型
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetAccountTypeWithContext(ctx context.Context, request *GetAccountTypeRequest) (response *GetAccountTypeResponse, err error) {
    if request == nil {
        request = NewGetAccountTypeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetAccountType require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetAccountTypeResponse()
    err = c.Send(request, response)
    return
}

func NewGetAvailableResourcesRequest() (request *GetAvailableResourcesRequest) {
    request = &GetAvailableResourcesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetAvailableResources")
    
    
    return
}

func NewGetAvailableResourcesResponse() (response *GetAvailableResourcesResponse) {
    response = &GetAvailableResourcesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetAvailableResources
// 获取当前地域每个可用区的资源信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetAvailableResources(request *GetAvailableResourcesRequest) (response *GetAvailableResourcesResponse, err error) {
    return c.GetAvailableResourcesWithContext(context.Background(), request)
}

// GetAvailableResources
// 获取当前地域每个可用区的资源信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetAvailableResourcesWithContext(ctx context.Context, request *GetAvailableResourcesRequest) (response *GetAvailableResourcesResponse, err error) {
    if request == nil {
        request = NewGetAvailableResourcesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetAvailableResources require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetAvailableResourcesResponse()
    err = c.Send(request, response)
    return
}

func NewGetClusterQuotaRequest() (request *GetClusterQuotaRequest) {
    request = &GetClusterQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetClusterQuota")
    
    
    return
}

func NewGetClusterQuotaResponse() (response *GetClusterQuotaResponse) {
    response = &GetClusterQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetClusterQuota
// GetClusterQuota
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) GetClusterQuota(request *GetClusterQuotaRequest) (response *GetClusterQuotaResponse, err error) {
    return c.GetClusterQuotaWithContext(context.Background(), request)
}

// GetClusterQuota
// GetClusterQuota
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
func (c *Client) GetClusterQuotaWithContext(ctx context.Context, request *GetClusterQuotaRequest) (response *GetClusterQuotaResponse, err error) {
    if request == nil {
        request = NewGetClusterQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetClusterQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetClusterQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewGetContainerLogsRequest() (request *GetContainerLogsRequest) {
    request = &GetContainerLogsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetContainerLogs")
    
    
    return
}

func NewGetContainerLogsResponse() (response *GetContainerLogsResponse) {
    response = &GetContainerLogsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetContainerLogs
// 获取pod内容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_CONTAINERNOTFOUND = "ResourceNotFound.ContainerNotFound"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetContainerLogs(request *GetContainerLogsRequest) (response *GetContainerLogsResponse, err error) {
    return c.GetContainerLogsWithContext(context.Background(), request)
}

// GetContainerLogs
// 获取pod内容器日志
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_CONTAINERNOTFOUND = "ResourceNotFound.ContainerNotFound"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetContainerLogsWithContext(ctx context.Context, request *GetContainerLogsRequest) (response *GetContainerLogsResponse, err error) {
    if request == nil {
        request = NewGetContainerLogsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetContainerLogs require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetContainerLogsResponse()
    err = c.Send(request, response)
    return
}

func NewGetContainerProbeResultRequest() (request *GetContainerProbeResultRequest) {
    request = &GetContainerProbeResultRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetContainerProbeResult")
    
    
    return
}

func NewGetContainerProbeResultResponse() (response *GetContainerProbeResultResponse) {
    response = &GetContainerProbeResultResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetContainerProbeResult
// GetContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_PROBERESULT = "ResourceNotFound.ProbeResult"
func (c *Client) GetContainerProbeResult(request *GetContainerProbeResultRequest) (response *GetContainerProbeResultResponse, err error) {
    return c.GetContainerProbeResultWithContext(context.Background(), request)
}

// GetContainerProbeResult
// GetContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_PROBERESULT = "ResourceNotFound.ProbeResult"
func (c *Client) GetContainerProbeResultWithContext(ctx context.Context, request *GetContainerProbeResultRequest) (response *GetContainerProbeResultResponse, err error) {
    if request == nil {
        request = NewGetContainerProbeResultRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetContainerProbeResult require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetContainerProbeResultResponse()
    err = c.Send(request, response)
    return
}

func NewGetDashboardIDRequest() (request *GetDashboardIDRequest) {
    request = &GetDashboardIDRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetDashboardID")
    
    
    return
}

func NewGetDashboardIDResponse() (response *GetDashboardIDResponse) {
    response = &GetDashboardIDResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) GetDashboardID(request *GetDashboardIDRequest) (response *GetDashboardIDResponse, err error) {
    return c.GetDashboardIDWithContext(context.Background(), request)
}

// GetDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) GetDashboardIDWithContext(ctx context.Context, request *GetDashboardIDRequest) (response *GetDashboardIDResponse, err error) {
    if request == nil {
        request = NewGetDashboardIDRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetDashboardID require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetDashboardIDResponse()
    err = c.Send(request, response)
    return
}

func NewGetEKSClusterResourcesRequest() (request *GetEKSClusterResourcesRequest) {
    request = &GetEKSClusterResourcesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetEKSClusterResources")
    
    
    return
}

func NewGetEKSClusterResourcesResponse() (response *GetEKSClusterResourcesResponse) {
    response = &GetEKSClusterResourcesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetEKSClusterResources
// 查询EKS集群资源资源信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetEKSClusterResources(request *GetEKSClusterResourcesRequest) (response *GetEKSClusterResourcesResponse, err error) {
    return c.GetEKSClusterResourcesWithContext(context.Background(), request)
}

// GetEKSClusterResources
// 查询EKS集群资源资源信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetEKSClusterResourcesWithContext(ctx context.Context, request *GetEKSClusterResourcesRequest) (response *GetEKSClusterResourcesResponse, err error) {
    if request == nil {
        request = NewGetEKSClusterResourcesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetEKSClusterResources require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetEKSClusterResourcesResponse()
    err = c.Send(request, response)
    return
}

func NewGetEksClusterUsedRequest() (request *GetEksClusterUsedRequest) {
    request = &GetEksClusterUsedRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetEksClusterUsed")
    
    
    return
}

func NewGetEksClusterUsedResponse() (response *GetEksClusterUsedResponse) {
    response = &GetEksClusterUsedResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetEksClusterUsed
// 查询弹性集群配额和已创建集群数
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) GetEksClusterUsed(request *GetEksClusterUsedRequest) (response *GetEksClusterUsedResponse, err error) {
    return c.GetEksClusterUsedWithContext(context.Background(), request)
}

// GetEksClusterUsed
// 查询弹性集群配额和已创建集群数
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) GetEksClusterUsedWithContext(ctx context.Context, request *GetEksClusterUsedRequest) (response *GetEksClusterUsedResponse, err error) {
    if request == nil {
        request = NewGetEksClusterUsedRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetEksClusterUsed require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetEksClusterUsedResponse()
    err = c.Send(request, response)
    return
}

func NewGetEksDashboardIDRequest() (request *GetEksDashboardIDRequest) {
    request = &GetEksDashboardIDRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetEksDashboardID")
    
    
    return
}

func NewGetEksDashboardIDResponse() (response *GetEksDashboardIDResponse) {
    response = &GetEksDashboardIDResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetEksDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) GetEksDashboardID(request *GetEksDashboardIDRequest) (response *GetEksDashboardIDResponse, err error) {
    return c.GetEksDashboardIDWithContext(context.Background(), request)
}

// GetEksDashboardID
// 根据集群、仪表盘类型查询dashboardID信息
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) GetEksDashboardIDWithContext(ctx context.Context, request *GetEksDashboardIDRequest) (response *GetEksDashboardIDResponse, err error) {
    if request == nil {
        request = NewGetEksDashboardIDRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetEksDashboardID require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetEksDashboardIDResponse()
    err = c.Send(request, response)
    return
}

func NewGetEksSpecsRequest() (request *GetEksSpecsRequest) {
    request = &GetEksSpecsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetEksSpecs")
    
    
    return
}

func NewGetEksSpecsResponse() (response *GetEksSpecsResponse) {
    response = &GetEksSpecsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetEksSpecs
// EKS规格
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetEksSpecs(request *GetEksSpecsRequest) (response *GetEksSpecsResponse, err error) {
    return c.GetEksSpecsWithContext(context.Background(), request)
}

// GetEksSpecs
// EKS规格
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetEksSpecsWithContext(ctx context.Context, request *GetEksSpecsRequest) (response *GetEksSpecsResponse, err error) {
    if request == nil {
        request = NewGetEksSpecsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetEksSpecs require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetEksSpecsResponse()
    err = c.Send(request, response)
    return
}

func NewGetMostSuitableImageCacheRequest() (request *GetMostSuitableImageCacheRequest) {
    request = &GetMostSuitableImageCacheRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetMostSuitableImageCache")
    
    
    return
}

func NewGetMostSuitableImageCacheResponse() (response *GetMostSuitableImageCacheResponse) {
    response = &GetMostSuitableImageCacheResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetMostSuitableImageCache
// 根据镜像列表，查询匹配的镜像缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetMostSuitableImageCache(request *GetMostSuitableImageCacheRequest) (response *GetMostSuitableImageCacheResponse, err error) {
    return c.GetMostSuitableImageCacheWithContext(context.Background(), request)
}

// GetMostSuitableImageCache
// 根据镜像列表，查询匹配的镜像缓存
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetMostSuitableImageCacheWithContext(ctx context.Context, request *GetMostSuitableImageCacheRequest) (response *GetMostSuitableImageCacheResponse, err error) {
    if request == nil {
        request = NewGetMostSuitableImageCacheRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetMostSuitableImageCache require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetMostSuitableImageCacheResponse()
    err = c.Send(request, response)
    return
}

func NewGetPodRequest() (request *GetPodRequest) {
    request = &GetPodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPod")
    
    
    return
}

func NewGetPodResponse() (response *GetPodResponse) {
    response = &GetPodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPod
// 查询pod信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPod(request *GetPodRequest) (response *GetPodResponse, err error) {
    return c.GetPodWithContext(context.Background(), request)
}

// GetPod
// 查询pod信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPodWithContext(ctx context.Context, request *GetPodRequest) (response *GetPodResponse, err error) {
    if request == nil {
        request = NewGetPodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPod require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPodResponse()
    err = c.Send(request, response)
    return
}

func NewGetPodChargeInfoRequest() (request *GetPodChargeInfoRequest) {
    request = &GetPodChargeInfoRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPodChargeInfo")
    
    
    return
}

func NewGetPodChargeInfoResponse() (response *GetPodChargeInfoResponse) {
    response = &GetPodChargeInfoResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPodChargeInfo
// Pod的计费信息查询
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetPodChargeInfo(request *GetPodChargeInfoRequest) (response *GetPodChargeInfoResponse, err error) {
    return c.GetPodChargeInfoWithContext(context.Background(), request)
}

// GetPodChargeInfo
// Pod的计费信息查询
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetPodChargeInfoWithContext(ctx context.Context, request *GetPodChargeInfoRequest) (response *GetPodChargeInfoResponse, err error) {
    if request == nil {
        request = NewGetPodChargeInfoRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPodChargeInfo require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPodChargeInfoResponse()
    err = c.Send(request, response)
    return
}

func NewGetPodSpecificationRequest() (request *GetPodSpecificationRequest) {
    request = &GetPodSpecificationRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPodSpecification")
    
    
    return
}

func NewGetPodSpecificationResponse() (response *GetPodSpecificationResponse) {
    response = &GetPodSpecificationResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPodSpecification
// 获取 Pod 规格  
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetPodSpecification(request *GetPodSpecificationRequest) (response *GetPodSpecificationResponse, err error) {
    return c.GetPodSpecificationWithContext(context.Background(), request)
}

// GetPodSpecification
// 获取 Pod 规格  
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetPodSpecificationWithContext(ctx context.Context, request *GetPodSpecificationRequest) (response *GetPodSpecificationResponse, err error) {
    if request == nil {
        request = NewGetPodSpecificationRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPodSpecification require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPodSpecificationResponse()
    err = c.Send(request, response)
    return
}

func NewGetPodStatusRequest() (request *GetPodStatusRequest) {
    request = &GetPodStatusRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPodStatus")
    
    
    return
}

func NewGetPodStatusResponse() (response *GetPodStatusResponse) {
    response = &GetPodStatusResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPodStatus
// GetPodStatus
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPodStatus(request *GetPodStatusRequest) (response *GetPodStatusResponse, err error) {
    return c.GetPodStatusWithContext(context.Background(), request)
}

// GetPodStatus
// GetPodStatus
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPodStatusWithContext(ctx context.Context, request *GetPodStatusRequest) (response *GetPodStatusResponse, err error) {
    if request == nil {
        request = NewGetPodStatusRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPodStatus require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPodStatusResponse()
    err = c.Send(request, response)
    return
}

func NewGetPodsRequest() (request *GetPodsRequest) {
    request = &GetPodsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPods")
    
    
    return
}

func NewGetPodsResponse() (response *GetPodsResponse) {
    response = &GetPodsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPods
// 获取集群内Pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPods(request *GetPodsRequest) (response *GetPodsResponse, err error) {
    return c.GetPodsWithContext(context.Background(), request)
}

// GetPods
// 获取集群内Pod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetPodsWithContext(ctx context.Context, request *GetPodsRequest) (response *GetPodsResponse, err error) {
    if request == nil {
        request = NewGetPodsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPods require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPodsResponse()
    err = c.Send(request, response)
    return
}

func NewGetPriceRequest() (request *GetPriceRequest) {
    request = &GetPriceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetPrice")
    
    
    return
}

func NewGetPriceResponse() (response *GetPriceResponse) {
    response = &GetPriceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetPrice
// EKS询价接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TRADECOMMON = "InternalError.TradeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetPrice(request *GetPriceRequest) (response *GetPriceResponse, err error) {
    return c.GetPriceWithContext(context.Background(), request)
}

// GetPrice
// EKS询价接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TRADECOMMON = "InternalError.TradeCommon"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetPriceWithContext(ctx context.Context, request *GetPriceRequest) (response *GetPriceResponse, err error) {
    if request == nil {
        request = NewGetPriceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetPrice require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetPriceResponse()
    err = c.Send(request, response)
    return
}

func NewGetQuotaRequest() (request *GetQuotaRequest) {
    request = &GetQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetQuota")
    
    
    return
}

func NewGetQuotaResponse() (response *GetQuotaResponse) {
    response = &GetQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetQuota
// GetQuota
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetQuota(request *GetQuotaRequest) (response *GetQuotaResponse, err error) {
    return c.GetQuotaWithContext(context.Background(), request)
}

// GetQuota
// GetQuota
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) GetQuotaWithContext(ctx context.Context, request *GetQuotaRequest) (response *GetQuotaResponse, err error) {
    if request == nil {
        request = NewGetQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewGetStatsSummaryRequest() (request *GetStatsSummaryRequest) {
    request = &GetStatsSummaryRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetStatsSummary")
    
    
    return
}

func NewGetStatsSummaryResponse() (response *GetStatsSummaryResponse) {
    response = &GetStatsSummaryResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetStatsSummary
// 查询pod监控信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetStatsSummary(request *GetStatsSummaryRequest) (response *GetStatsSummaryResponse, err error) {
    return c.GetStatsSummaryWithContext(context.Background(), request)
}

// GetStatsSummary
// 查询pod监控信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) GetStatsSummaryWithContext(ctx context.Context, request *GetStatsSummaryRequest) (response *GetStatsSummaryResponse, err error) {
    if request == nil {
        request = NewGetStatsSummaryRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetStatsSummary require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetStatsSummaryResponse()
    err = c.Send(request, response)
    return
}

func NewGetSubnetResourceRequest() (request *GetSubnetResourceRequest) {
    request = &GetSubnetResourceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetSubnetResource")
    
    
    return
}

func NewGetSubnetResourceResponse() (response *GetSubnetResourceResponse) {
    response = &GetSubnetResourceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetSubnetResource
// 获取子网资源
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
func (c *Client) GetSubnetResource(request *GetSubnetResourceRequest) (response *GetSubnetResourceResponse, err error) {
    return c.GetSubnetResourceWithContext(context.Background(), request)
}

// GetSubnetResource
// 获取子网资源
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
func (c *Client) GetSubnetResourceWithContext(ctx context.Context, request *GetSubnetResourceRequest) (response *GetSubnetResourceResponse, err error) {
    if request == nil {
        request = NewGetSubnetResourceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetSubnetResource require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetSubnetResourceResponse()
    err = c.Send(request, response)
    return
}

func NewGetSubnetVipRequest() (request *GetSubnetVipRequest) {
    request = &GetSubnetVipRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetSubnetVip")
    
    
    return
}

func NewGetSubnetVipResponse() (response *GetSubnetVipResponse) {
    response = &GetSubnetVipResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetSubnetVip
// 获取子网内预留VIP
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
func (c *Client) GetSubnetVip(request *GetSubnetVipRequest) (response *GetSubnetVipResponse, err error) {
    return c.GetSubnetVipWithContext(context.Background(), request)
}

// GetSubnetVip
// 获取子网内预留VIP
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCCOMMON = "InternalError.VpcCommon"
//  INTERNALERROR_VPCRECODRNOTFOUND = "InternalError.VpcRecodrNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_VPCRECORDNOTFOUND = "ResourceNotFound.VpcRecordNotFound"
func (c *Client) GetSubnetVipWithContext(ctx context.Context, request *GetSubnetVipRequest) (response *GetSubnetVipResponse, err error) {
    if request == nil {
        request = NewGetSubnetVipRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetSubnetVip require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetSubnetVipResponse()
    err = c.Send(request, response)
    return
}

func NewGetTkeAppChartListRequest() (request *GetTkeAppChartListRequest) {
    request = &GetTkeAppChartListRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetTkeAppChartList")
    
    
    return
}

func NewGetTkeAppChartListResponse() (response *GetTkeAppChartListResponse) {
    response = &GetTkeAppChartListResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetTkeAppChartList
// 获取TKE支持的App列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetTkeAppChartList(request *GetTkeAppChartListRequest) (response *GetTkeAppChartListResponse, err error) {
    return c.GetTkeAppChartListWithContext(context.Background(), request)
}

// GetTkeAppChartList
// 获取TKE支持的App列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) GetTkeAppChartListWithContext(ctx context.Context, request *GetTkeAppChartListRequest) (response *GetTkeAppChartListResponse, err error) {
    if request == nil {
        request = NewGetTkeAppChartListRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetTkeAppChartList require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetTkeAppChartListResponse()
    err = c.Send(request, response)
    return
}

func NewGetUpgradeClusterProgressRequest() (request *GetUpgradeClusterProgressRequest) {
    request = &GetUpgradeClusterProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetUpgradeClusterProgress")
    
    
    return
}

func NewGetUpgradeClusterProgressResponse() (response *GetUpgradeClusterProgressResponse) {
    response = &GetUpgradeClusterProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetUpgradeClusterProgress
// 返回当前集群升级进度
//
// 可能返回的错误码:
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetUpgradeClusterProgress(request *GetUpgradeClusterProgressRequest) (response *GetUpgradeClusterProgressResponse, err error) {
    return c.GetUpgradeClusterProgressWithContext(context.Background(), request)
}

// GetUpgradeClusterProgress
// 返回当前集群升级进度
//
// 可能返回的错误码:
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetUpgradeClusterProgressWithContext(ctx context.Context, request *GetUpgradeClusterProgressRequest) (response *GetUpgradeClusterProgressResponse, err error) {
    if request == nil {
        request = NewGetUpgradeClusterProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetUpgradeClusterProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetUpgradeClusterProgressResponse()
    err = c.Send(request, response)
    return
}

func NewGetUpgradeInstanceProgressRequest() (request *GetUpgradeInstanceProgressRequest) {
    request = &GetUpgradeInstanceProgressRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetUpgradeInstanceProgress")
    
    
    return
}

func NewGetUpgradeInstanceProgressResponse() (response *GetUpgradeInstanceProgressResponse) {
    response = &GetUpgradeInstanceProgressResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetUpgradeInstanceProgress
// 获得节点升级当前的进度 
//
// 可能返回的错误码:
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetUpgradeInstanceProgress(request *GetUpgradeInstanceProgressRequest) (response *GetUpgradeInstanceProgressResponse, err error) {
    return c.GetUpgradeInstanceProgressWithContext(context.Background(), request)
}

// GetUpgradeInstanceProgress
// 获得节点升级当前的进度 
//
// 可能返回的错误码:
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) GetUpgradeInstanceProgressWithContext(ctx context.Context, request *GetUpgradeInstanceProgressRequest) (response *GetUpgradeInstanceProgressResponse, err error) {
    if request == nil {
        request = NewGetUpgradeInstanceProgressRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetUpgradeInstanceProgress require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetUpgradeInstanceProgressResponse()
    err = c.Send(request, response)
    return
}

func NewGetVbcInstanceRequest() (request *GetVbcInstanceRequest) {
    request = &GetVbcInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetVbcInstance")
    
    
    return
}

func NewGetVbcInstanceResponse() (response *GetVbcInstanceResponse) {
    response = &GetVbcInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetVbcInstance
// 查询vpc是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) GetVbcInstance(request *GetVbcInstanceRequest) (response *GetVbcInstanceResponse, err error) {
    return c.GetVbcInstanceWithContext(context.Background(), request)
}

// GetVbcInstance
// 查询vpc是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) GetVbcInstanceWithContext(ctx context.Context, request *GetVbcInstanceRequest) (response *GetVbcInstanceResponse, err error) {
    if request == nil {
        request = NewGetVbcInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetVbcInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetVbcInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewGetVbcRouteRequest() (request *GetVbcRouteRequest) {
    request = &GetVbcRouteRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetVbcRoute")
    
    
    return
}

func NewGetVbcRouteResponse() (response *GetVbcRouteResponse) {
    response = &GetVbcRouteResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetVbcRoute
// 查询tke集群cidr是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) GetVbcRoute(request *GetVbcRouteRequest) (response *GetVbcRouteResponse, err error) {
    return c.GetVbcRouteWithContext(context.Background(), request)
}

// GetVbcRoute
// 查询tke集群cidr是否加入云联网
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CIDRINVALI = "InternalError.CidrInvali"
func (c *Client) GetVbcRouteWithContext(ctx context.Context, request *GetVbcRouteRequest) (response *GetVbcRouteResponse, err error) {
    if request == nil {
        request = NewGetVbcRouteRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetVbcRoute require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetVbcRouteResponse()
    err = c.Send(request, response)
    return
}

func NewGetZoneResourceRequest() (request *GetZoneResourceRequest) {
    request = &GetZoneResourceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GetZoneResource")
    
    
    return
}

func NewGetZoneResourceResponse() (response *GetZoneResourceResponse) {
    response = &GetZoneResourceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GetZoneResource
// 查询可用区是否有可用资源
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetZoneResource(request *GetZoneResourceRequest) (response *GetZoneResourceResponse, err error) {
    return c.GetZoneResourceWithContext(context.Background(), request)
}

// GetZoneResource
// 查询可用区是否有可用资源
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) GetZoneResourceWithContext(ctx context.Context, request *GetZoneResourceRequest) (response *GetZoneResourceResponse, err error) {
    if request == nil {
        request = NewGetZoneResourceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GetZoneResource require credential")
    }

    request.SetContext(ctx)
    
    response = NewGetZoneResourceResponse()
    err = c.Send(request, response)
    return
}

func NewGrantCodingClusterRoleBindingRequest() (request *GrantCodingClusterRoleBindingRequest) {
    request = &GrantCodingClusterRoleBindingRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "GrantCodingClusterRoleBinding")
    
    
    return
}

func NewGrantCodingClusterRoleBindingResponse() (response *GrantCodingClusterRoleBindingResponse) {
    response = &GrantCodingClusterRoleBindingResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// GrantCodingClusterRoleBinding
// 授予Coding的服务角色RBAC tke:admin权限
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) GrantCodingClusterRoleBinding(request *GrantCodingClusterRoleBindingRequest) (response *GrantCodingClusterRoleBindingResponse, err error) {
    return c.GrantCodingClusterRoleBindingWithContext(context.Background(), request)
}

// GrantCodingClusterRoleBinding
// 授予Coding的服务角色RBAC tke:admin权限
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESCREATEOPERATIONERROR = "InternalError.KubernetesCreateOperationError"
//  INTERNALERROR_KUBERNETESDELETEOPERATIONERROR = "InternalError.KubernetesDeleteOperationError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_WHITELISTUNEXPECTEDERROR = "InternalError.WhitelistUnexpectedError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNSUPPORTEDOPERATION_NOTINWHITELIST = "UnsupportedOperation.NotInWhitelist"
func (c *Client) GrantCodingClusterRoleBindingWithContext(ctx context.Context, request *GrantCodingClusterRoleBindingRequest) (response *GrantCodingClusterRoleBindingResponse, err error) {
    if request == nil {
        request = NewGrantCodingClusterRoleBindingRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("GrantCodingClusterRoleBinding require credential")
    }

    request.SetContext(ctx)
    
    response = NewGrantCodingClusterRoleBindingResponse()
    err = c.Send(request, response)
    return
}

func NewInstallClustersCostsRequest() (request *InstallClustersCostsRequest) {
    request = &InstallClustersCostsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "InstallClustersCosts")
    
    
    return
}

func NewInstallClustersCostsResponse() (response *InstallClustersCostsResponse) {
    response = &InstallClustersCostsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// InstallClustersCosts
// 安装集群成本分析服务到用户集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) InstallClustersCosts(request *InstallClustersCostsRequest) (response *InstallClustersCostsResponse, err error) {
    return c.InstallClustersCostsWithContext(context.Background(), request)
}

// InstallClustersCosts
// 安装集群成本分析服务到用户集群
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) InstallClustersCostsWithContext(ctx context.Context, request *InstallClustersCostsRequest) (response *InstallClustersCostsResponse, err error) {
    if request == nil {
        request = NewInstallClustersCostsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("InstallClustersCosts require credential")
    }

    request.SetContext(ctx)
    
    response = NewInstallClustersCostsResponse()
    err = c.Send(request, response)
    return
}

func NewInstallEdgeLogAgentRequest() (request *InstallEdgeLogAgentRequest) {
    request = &InstallEdgeLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "InstallEdgeLogAgent")
    
    
    return
}

func NewInstallEdgeLogAgentResponse() (response *InstallEdgeLogAgentResponse) {
    response = &InstallEdgeLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// InstallEdgeLogAgent
// 在tke@edge集群的边缘节点上安装日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) InstallEdgeLogAgent(request *InstallEdgeLogAgentRequest) (response *InstallEdgeLogAgentResponse, err error) {
    return c.InstallEdgeLogAgentWithContext(context.Background(), request)
}

// InstallEdgeLogAgent
// 在tke@edge集群的边缘节点上安装日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) InstallEdgeLogAgentWithContext(ctx context.Context, request *InstallEdgeLogAgentRequest) (response *InstallEdgeLogAgentResponse, err error) {
    if request == nil {
        request = NewInstallEdgeLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("InstallEdgeLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewInstallEdgeLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewInstallEksLogAgentRequest() (request *InstallEksLogAgentRequest) {
    request = &InstallEksLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "InstallEksLogAgent")
    
    
    return
}

func NewInstallEksLogAgentResponse() (response *InstallEksLogAgentResponse) {
    response = &InstallEksLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// InstallEksLogAgent
// 在弹性集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) InstallEksLogAgent(request *InstallEksLogAgentRequest) (response *InstallEksLogAgentResponse, err error) {
    return c.InstallEksLogAgentWithContext(context.Background(), request)
}

// InstallEksLogAgent
// 在弹性集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) InstallEksLogAgentWithContext(ctx context.Context, request *InstallEksLogAgentRequest) (response *InstallEksLogAgentResponse, err error) {
    if request == nil {
        request = NewInstallEksLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("InstallEksLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewInstallEksLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewInstallLogAgentRequest() (request *InstallLogAgentRequest) {
    request = &InstallLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "InstallLogAgent")
    
    
    return
}

func NewInstallLogAgentResponse() (response *InstallLogAgentResponse) {
    response = &InstallLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// InstallLogAgent
// 在TKE集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) InstallLogAgent(request *InstallLogAgentRequest) (response *InstallLogAgentResponse, err error) {
    return c.InstallLogAgentWithContext(context.Background(), request)
}

// InstallLogAgent
// 在TKE集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) InstallLogAgentWithContext(ctx context.Context, request *InstallLogAgentRequest) (response *InstallLogAgentResponse, err error) {
    if request == nil {
        request = NewInstallLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("InstallLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewInstallLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewInstallTDCCLogAgentRequest() (request *InstallTDCCLogAgentRequest) {
    request = &InstallTDCCLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "InstallTDCCLogAgent")
    
    
    return
}

func NewInstallTDCCLogAgentResponse() (response *InstallTDCCLogAgentResponse) {
    response = &InstallTDCCLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// InstallTDCCLogAgent
// 在注册集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) InstallTDCCLogAgent(request *InstallTDCCLogAgentRequest) (response *InstallTDCCLogAgentResponse, err error) {
    return c.InstallTDCCLogAgentWithContext(context.Background(), request)
}

// InstallTDCCLogAgent
// 在注册集群中安装CLS日志采集组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) InstallTDCCLogAgentWithContext(ctx context.Context, request *InstallTDCCLogAgentRequest) (response *InstallTDCCLogAgentResponse, err error) {
    if request == nil {
        request = NewInstallTDCCLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("InstallTDCCLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewInstallTDCCLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewListClusterCertificatesRequest() (request *ListClusterCertificatesRequest) {
    request = &ListClusterCertificatesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListClusterCertificates")
    
    
    return
}

func NewListClusterCertificatesResponse() (response *ListClusterCertificatesResponse) {
    response = &ListClusterCertificatesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListClusterCertificates
// 获取集群的证书列表，此接口接入CAM鉴权，只有管理权限的用户才可以正常调用，返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_TKEAPISERVERUNEXPECTEDERROR = "InternalError.TKEAPIServerUnexpectedError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_TKEAPISERVERRESOURCEEXISTED = "ResourceInUse.TKEAPIServerResourceExisted"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_TKEAPISERVERRESOURCENOTFOUND = "ResourceNotFound.TKEAPIServerResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListClusterCertificates(request *ListClusterCertificatesRequest) (response *ListClusterCertificatesResponse, err error) {
    return c.ListClusterCertificatesWithContext(context.Background(), request)
}

// ListClusterCertificates
// 获取集群的证书列表，此接口接入CAM鉴权，只有管理权限的用户才可以正常调用，返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESCLIENTBUILDERROR = "InternalError.KubernetesClientBuildError"
//  INTERNALERROR_KUBERNETESGETOPERATIONERROR = "InternalError.KubernetesGetOperationError"
//  INTERNALERROR_KUBERNETESLISTOPERATIONERROR = "InternalError.KubernetesListOperationError"
//  INTERNALERROR_TKEAPISERVERUNEXPECTEDERROR = "InternalError.TKEAPIServerUnexpectedError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEINUSE_TKEAPISERVERRESOURCEEXISTED = "ResourceInUse.TKEAPIServerResourceExisted"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  RESOURCENOTFOUND_TKEAPISERVERRESOURCENOTFOUND = "ResourceNotFound.TKEAPIServerResourceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListClusterCertificatesWithContext(ctx context.Context, request *ListClusterCertificatesRequest) (response *ListClusterCertificatesResponse, err error) {
    if request == nil {
        request = NewListClusterCertificatesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListClusterCertificates require credential")
    }

    request.SetContext(ctx)
    
    response = NewListClusterCertificatesResponse()
    err = c.Send(request, response)
    return
}

func NewListClusterInstancesRequest() (request *ListClusterInstancesRequest) {
    request = &ListClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListClusterInstances")
    
    
    return
}

func NewListClusterInstancesResponse() (response *ListClusterInstancesResponse) {
    response = &ListClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListClusterInstances
// 查询集群下节点信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) ListClusterInstances(request *ListClusterInstancesRequest) (response *ListClusterInstancesResponse, err error) {
    return c.ListClusterInstancesWithContext(context.Background(), request)
}

// ListClusterInstances
// 查询集群下节点信息
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
func (c *Client) ListClusterInstancesWithContext(ctx context.Context, request *ListClusterInstancesRequest) (response *ListClusterInstancesResponse, err error) {
    if request == nil {
        request = NewListClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewListClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewListClustersRequest() (request *ListClustersRequest) {
    request = &ListClustersRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListClusters")
    
    
    return
}

func NewListClustersResponse() (response *ListClustersResponse) {
    response = &ListClustersResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListClusters
// 查询集群列表，返回一个用户下某个地域的所有集群(YUNAPI V3版本)
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
func (c *Client) ListClusters(request *ListClustersRequest) (response *ListClustersResponse, err error) {
    return c.ListClustersWithContext(context.Background(), request)
}

// ListClusters
// 查询集群列表，返回一个用户下某个地域的所有集群(YUNAPI V3版本)
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PUBLICCLUSTEROPNOTSUPPORT = "InternalError.PublicClusterOpNotSupport"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
func (c *Client) ListClustersWithContext(ctx context.Context, request *ListClustersRequest) (response *ListClustersResponse, err error) {
    if request == nil {
        request = NewListClustersRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListClusters require credential")
    }

    request.SetContext(ctx)
    
    response = NewListClustersResponse()
    err = c.Send(request, response)
    return
}

func NewListEKSClusterCertificatesRequest() (request *ListEKSClusterCertificatesRequest) {
    request = &ListEKSClusterCertificatesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListEKSClusterCertificates")
    
    
    return
}

func NewListEKSClusterCertificatesResponse() (response *ListEKSClusterCertificatesResponse) {
    response = &ListEKSClusterCertificatesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListEKSClusterCertificates
// 获取集群的证书列表，此接口接入CAM鉴权，只有管理权限的用户才可以正常调用，返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListEKSClusterCertificates(request *ListEKSClusterCertificatesRequest) (response *ListEKSClusterCertificatesResponse, err error) {
    return c.ListEKSClusterCertificatesWithContext(context.Background(), request)
}

// ListEKSClusterCertificates
// 获取集群的证书列表，此接口接入CAM鉴权，只有管理权限的用户才可以正常调用，返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListEKSClusterCertificatesWithContext(ctx context.Context, request *ListEKSClusterCertificatesRequest) (response *ListEKSClusterCertificatesResponse, err error) {
    if request == nil {
        request = NewListEKSClusterCertificatesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListEKSClusterCertificates require credential")
    }

    request.SetContext(ctx)
    
    response = NewListEKSClusterCertificatesResponse()
    err = c.Send(request, response)
    return
}

func NewListEKSK8SVersionRequest() (request *ListEKSK8SVersionRequest) {
    request = &ListEKSK8SVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListEKSK8SVersion")
    
    
    return
}

func NewListEKSK8SVersionResponse() (response *ListEKSK8SVersionResponse) {
    response = &ListEKSK8SVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListEKSK8SVersion
// 获取EKS支持的k8s版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ListEKSK8SVersion(request *ListEKSK8SVersionRequest) (response *ListEKSK8SVersionResponse, err error) {
    return c.ListEKSK8SVersionWithContext(context.Background(), request)
}

// ListEKSK8SVersion
// 获取EKS支持的k8s版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ListEKSK8SVersionWithContext(ctx context.Context, request *ListEKSK8SVersionRequest) (response *ListEKSK8SVersionResponse, err error) {
    if request == nil {
        request = NewListEKSK8SVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListEKSK8SVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewListEKSK8SVersionResponse()
    err = c.Send(request, response)
    return
}

func NewListEKSPodsRequest() (request *ListEKSPodsRequest) {
    request = &ListEKSPodsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListEKSPods")
    
    
    return
}

func NewListEKSPodsResponse() (response *ListEKSPodsResponse) {
    response = &ListEKSPodsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListEKSPods
// 获取pod详细信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSPods(request *ListEKSPodsRequest) (response *ListEKSPodsResponse, err error) {
    return c.ListEKSPodsWithContext(context.Background(), request)
}

// ListEKSPods
// 获取pod详细信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSPodsWithContext(ctx context.Context, request *ListEKSPodsRequest) (response *ListEKSPodsResponse, err error) {
    if request == nil {
        request = NewListEKSPodsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListEKSPods require credential")
    }

    request.SetContext(ctx)
    
    response = NewListEKSPodsResponse()
    err = c.Send(request, response)
    return
}

func NewListEKSRegionRequest() (request *ListEKSRegionRequest) {
    request = &ListEKSRegionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListEKSRegion")
    
    
    return
}

func NewListEKSRegionResponse() (response *ListEKSRegionResponse) {
    response = &ListEKSRegionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListEKSRegion
// 查询eks可用地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSRegion(request *ListEKSRegionRequest) (response *ListEKSRegionResponse, err error) {
    return c.ListEKSRegionWithContext(context.Background(), request)
}

// ListEKSRegion
// 查询eks可用地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSRegionWithContext(ctx context.Context, request *ListEKSRegionRequest) (response *ListEKSRegionResponse, err error) {
    if request == nil {
        request = NewListEKSRegionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListEKSRegion require credential")
    }

    request.SetContext(ctx)
    
    response = NewListEKSRegionResponse()
    err = c.Send(request, response)
    return
}

func NewListEKSZoneRequest() (request *ListEKSZoneRequest) {
    request = &ListEKSZoneRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListEKSZone")
    
    
    return
}

func NewListEKSZoneResponse() (response *ListEKSZoneResponse) {
    response = &ListEKSZoneResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListEKSZone
// ListEKSZone
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSZone(request *ListEKSZoneRequest) (response *ListEKSZoneResponse, err error) {
    return c.ListEKSZoneWithContext(context.Background(), request)
}

// ListEKSZone
// ListEKSZone
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListEKSZoneWithContext(ctx context.Context, request *ListEKSZoneRequest) (response *ListEKSZoneResponse, err error) {
    if request == nil {
        request = NewListEKSZoneRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListEKSZone require credential")
    }

    request.SetContext(ctx)
    
    response = NewListEKSZoneResponse()
    err = c.Send(request, response)
    return
}

func NewListExpiredClusterAuthRequest() (request *ListExpiredClusterAuthRequest) {
    request = &ListExpiredClusterAuthRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListExpiredClusterAuth")
    
    
    return
}

func NewListExpiredClusterAuthResponse() (response *ListExpiredClusterAuthResponse) {
    response = &ListExpiredClusterAuthResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListExpiredClusterAuth
// 获取集群内过期的权限信息
//
// 可能返回的错误码:
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListExpiredClusterAuth(request *ListExpiredClusterAuthRequest) (response *ListExpiredClusterAuthResponse, err error) {
    return c.ListExpiredClusterAuthWithContext(context.Background(), request)
}

// ListExpiredClusterAuth
// 获取集群内过期的权限信息
//
// 可能返回的错误码:
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListExpiredClusterAuthWithContext(ctx context.Context, request *ListExpiredClusterAuthRequest) (response *ListExpiredClusterAuthResponse, err error) {
    if request == nil {
        request = NewListExpiredClusterAuthRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListExpiredClusterAuth require credential")
    }

    request.SetContext(ctx)
    
    response = NewListExpiredClusterAuthResponse()
    err = c.Send(request, response)
    return
}

func NewListTDCCClusterCertificatesRequest() (request *ListTDCCClusterCertificatesRequest) {
    request = &ListTDCCClusterCertificatesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListTDCCClusterCertificates")
    
    
    return
}

func NewListTDCCClusterCertificatesResponse() (response *ListTDCCClusterCertificatesResponse) {
    response = &ListTDCCClusterCertificatesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListTDCCClusterCertificates
// 获取集群的证书列表， 返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListTDCCClusterCertificates(request *ListTDCCClusterCertificatesRequest) (response *ListTDCCClusterCertificatesResponse, err error) {
    return c.ListTDCCClusterCertificatesWithContext(context.Background(), request)
}

// ListTDCCClusterCertificates
// 获取集群的证书列表， 返回集群所有账户的证书列表
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
func (c *Client) ListTDCCClusterCertificatesWithContext(ctx context.Context, request *ListTDCCClusterCertificatesRequest) (response *ListTDCCClusterCertificatesResponse, err error) {
    if request == nil {
        request = NewListTDCCClusterCertificatesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListTDCCClusterCertificates require credential")
    }

    request.SetContext(ctx)
    
    response = NewListTDCCClusterCertificatesResponse()
    err = c.Send(request, response)
    return
}

func NewListTDCCRegionRequest() (request *ListTDCCRegionRequest) {
    request = &ListTDCCRegionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ListTDCCRegion")
    
    
    return
}

func NewListTDCCRegionResponse() (response *ListTDCCRegionResponse) {
    response = &ListTDCCRegionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ListTDCCRegion
// 查询TDCC可用地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListTDCCRegion(request *ListTDCCRegionRequest) (response *ListTDCCRegionResponse, err error) {
    return c.ListTDCCRegionWithContext(context.Background(), request)
}

// ListTDCCRegion
// 查询TDCC可用地域
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
func (c *Client) ListTDCCRegionWithContext(ctx context.Context, request *ListTDCCRegionRequest) (response *ListTDCCRegionResponse, err error) {
    if request == nil {
        request = NewListTDCCRegionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ListTDCCRegion require credential")
    }

    request.SetContext(ctx)
    
    response = NewListTDCCRegionResponse()
    err = c.Send(request, response)
    return
}

func NewModifyAlarmPolicyRequest() (request *ModifyAlarmPolicyRequest) {
    request = &ModifyAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyAlarmPolicy")
    
    
    return
}

func NewModifyAlarmPolicyResponse() (response *ModifyAlarmPolicyResponse) {
    response = &ModifyAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyAlarmPolicy
// 修改告警策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyAlarmPolicy(request *ModifyAlarmPolicyRequest) (response *ModifyAlarmPolicyResponse, err error) {
    return c.ModifyAlarmPolicyWithContext(context.Background(), request)
}

// ModifyAlarmPolicy
// 修改告警策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyAlarmPolicyWithContext(ctx context.Context, request *ModifyAlarmPolicyRequest) (response *ModifyAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewModifyAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewModifyCloudRunClusterQuotaRequest() (request *ModifyCloudRunClusterQuotaRequest) {
    request = &ModifyCloudRunClusterQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyCloudRunClusterQuota")
    
    
    return
}

func NewModifyCloudRunClusterQuotaResponse() (response *ModifyCloudRunClusterQuotaResponse) {
    response = &ModifyCloudRunClusterQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyCloudRunClusterQuota
// 修改CloudRun集群配额
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
func (c *Client) ModifyCloudRunClusterQuota(request *ModifyCloudRunClusterQuotaRequest) (response *ModifyCloudRunClusterQuotaResponse, err error) {
    return c.ModifyCloudRunClusterQuotaWithContext(context.Background(), request)
}

// ModifyCloudRunClusterQuota
// 修改CloudRun集群配额
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
func (c *Client) ModifyCloudRunClusterQuotaWithContext(ctx context.Context, request *ModifyCloudRunClusterQuotaRequest) (response *ModifyCloudRunClusterQuotaResponse, err error) {
    if request == nil {
        request = NewModifyCloudRunClusterQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyCloudRunClusterQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyCloudRunClusterQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewModifyCloudRunHPARequest() (request *ModifyCloudRunHPARequest) {
    request = &ModifyCloudRunHPARequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyCloudRunHPA")
    
    
    return
}

func NewModifyCloudRunHPAResponse() (response *ModifyCloudRunHPAResponse) {
    response = &ModifyCloudRunHPAResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyCloudRunHPA
// cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
func (c *Client) ModifyCloudRunHPA(request *ModifyCloudRunHPARequest) (response *ModifyCloudRunHPAResponse, err error) {
    return c.ModifyCloudRunHPAWithContext(context.Background(), request)
}

// ModifyCloudRunHPA
// cloudrun hpa
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
func (c *Client) ModifyCloudRunHPAWithContext(ctx context.Context, request *ModifyCloudRunHPARequest) (response *ModifyCloudRunHPAResponse, err error) {
    if request == nil {
        request = NewModifyCloudRunHPARequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyCloudRunHPA require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyCloudRunHPAResponse()
    err = c.Send(request, response)
    return
}

func NewModifyCloudRunPodRequest() (request *ModifyCloudRunPodRequest) {
    request = &ModifyCloudRunPodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyCloudRunPod")
    
    
    return
}

func NewModifyCloudRunPodResponse() (response *ModifyCloudRunPodResponse) {
    response = &ModifyCloudRunPodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyCloudRunPod
// 修改CloudRun Pod规格信息
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifyCloudRunPod(request *ModifyCloudRunPodRequest) (response *ModifyCloudRunPodResponse, err error) {
    return c.ModifyCloudRunPodWithContext(context.Background(), request)
}

// ModifyCloudRunPod
// 修改CloudRun Pod规格信息
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifyCloudRunPodWithContext(ctx context.Context, request *ModifyCloudRunPodRequest) (response *ModifyCloudRunPodResponse, err error) {
    if request == nil {
        request = NewModifyCloudRunPodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyCloudRunPod require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyCloudRunPodResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterAsGroupAttributeRequest() (request *ModifyClusterAsGroupAttributeRequest) {
    request = &ModifyClusterAsGroupAttributeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterAsGroupAttribute")
    
    
    return
}

func NewModifyClusterAsGroupAttributeResponse() (response *ModifyClusterAsGroupAttributeResponse) {
    response = &ModifyClusterAsGroupAttributeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterAsGroupAttribute
// 修改集群伸缩组属性
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterAsGroupAttribute(request *ModifyClusterAsGroupAttributeRequest) (response *ModifyClusterAsGroupAttributeResponse, err error) {
    return c.ModifyClusterAsGroupAttributeWithContext(context.Background(), request)
}

// ModifyClusterAsGroupAttribute
// 修改集群伸缩组属性
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_ASCOMMONERROR = "InvalidParameter.AsCommonError"
//  INVALIDPARAMETER_CIDROUTOFROUTETABLE = "InvalidParameter.CidrOutOfRouteTable"
//  INVALIDPARAMETER_GATEWAYALREADYASSOCIATEDCIDR = "InvalidParameter.GatewayAlreadyAssociatedCidr"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_ROUTETABLENOTEMPTY = "InvalidParameter.RouteTableNotEmpty"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterAsGroupAttributeWithContext(ctx context.Context, request *ModifyClusterAsGroupAttributeRequest) (response *ModifyClusterAsGroupAttributeResponse, err error) {
    if request == nil {
        request = NewModifyClusterAsGroupAttributeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterAsGroupAttribute require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterAsGroupAttributeResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterAsGroupOptionAttributeRequest() (request *ModifyClusterAsGroupOptionAttributeRequest) {
    request = &ModifyClusterAsGroupOptionAttributeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterAsGroupOptionAttribute")
    
    
    return
}

func NewModifyClusterAsGroupOptionAttributeResponse() (response *ModifyClusterAsGroupOptionAttributeResponse) {
    response = &ModifyClusterAsGroupOptionAttributeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterAsGroupOptionAttribute
// 修改集群弹性伸缩属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterAsGroupOptionAttribute(request *ModifyClusterAsGroupOptionAttributeRequest) (response *ModifyClusterAsGroupOptionAttributeResponse, err error) {
    return c.ModifyClusterAsGroupOptionAttributeWithContext(context.Background(), request)
}

// ModifyClusterAsGroupOptionAttribute
// 修改集群弹性伸缩属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ASCOMMON = "InternalError.AsCommon"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CLUSTERSTATE = "InternalError.ClusterState"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_CVMNOTFOUND = "InternalError.CvmNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterAsGroupOptionAttributeWithContext(ctx context.Context, request *ModifyClusterAsGroupOptionAttributeRequest) (response *ModifyClusterAsGroupOptionAttributeResponse, err error) {
    if request == nil {
        request = NewModifyClusterAsGroupOptionAttributeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterAsGroupOptionAttribute require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterAsGroupOptionAttributeResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterAttributeRequest() (request *ModifyClusterAttributeRequest) {
    request = &ModifyClusterAttributeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterAttribute")
    
    
    return
}

func NewModifyClusterAttributeResponse() (response *ModifyClusterAttributeResponse) {
    response = &ModifyClusterAttributeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterAttribute
// 修改集群属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) ModifyClusterAttribute(request *ModifyClusterAttributeRequest) (response *ModifyClusterAttributeResponse, err error) {
    return c.ModifyClusterAttributeWithContext(context.Background(), request)
}

// ModifyClusterAttribute
// 修改集群属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBAFFECTIVEDROWS = "InternalError.DbAffectivedRows"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) ModifyClusterAttributeWithContext(ctx context.Context, request *ModifyClusterAttributeRequest) (response *ModifyClusterAttributeResponse, err error) {
    if request == nil {
        request = NewModifyClusterAttributeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterAttribute require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterAttributeResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterAuthenticationOptionsRequest() (request *ModifyClusterAuthenticationOptionsRequest) {
    request = &ModifyClusterAuthenticationOptionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterAuthenticationOptions")
    
    
    return
}

func NewModifyClusterAuthenticationOptionsResponse() (response *ModifyClusterAuthenticationOptionsResponse) {
    response = &ModifyClusterAuthenticationOptionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterAuthenticationOptions
// 修改集群认证配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) ModifyClusterAuthenticationOptions(request *ModifyClusterAuthenticationOptionsRequest) (response *ModifyClusterAuthenticationOptionsResponse, err error) {
    return c.ModifyClusterAuthenticationOptionsWithContext(context.Background(), request)
}

// ModifyClusterAuthenticationOptions
// 修改集群认证配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) ModifyClusterAuthenticationOptionsWithContext(ctx context.Context, request *ModifyClusterAuthenticationOptionsRequest) (response *ModifyClusterAuthenticationOptionsResponse, err error) {
    if request == nil {
        request = NewModifyClusterAuthenticationOptionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterAuthenticationOptions require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterAuthenticationOptionsResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterDeletionProtectionStateRequest() (request *ModifyClusterDeletionProtectionStateRequest) {
    request = &ModifyClusterDeletionProtectionStateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterDeletionProtectionState")
    
    
    return
}

func NewModifyClusterDeletionProtectionStateResponse() (response *ModifyClusterDeletionProtectionStateResponse) {
    response = &ModifyClusterDeletionProtectionStateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterDeletionProtectionState
// 修改集群删除保护状态
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyClusterDeletionProtectionState(request *ModifyClusterDeletionProtectionStateRequest) (response *ModifyClusterDeletionProtectionStateResponse, err error) {
    return c.ModifyClusterDeletionProtectionStateWithContext(context.Background(), request)
}

// ModifyClusterDeletionProtectionState
// 修改集群删除保护状态
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyClusterDeletionProtectionStateWithContext(ctx context.Context, request *ModifyClusterDeletionProtectionStateRequest) (response *ModifyClusterDeletionProtectionStateResponse, err error) {
    if request == nil {
        request = NewModifyClusterDeletionProtectionStateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterDeletionProtectionState require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterDeletionProtectionStateResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterEndpointSPRequest() (request *ModifyClusterEndpointSPRequest) {
    request = &ModifyClusterEndpointSPRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterEndpointSP")
    
    
    return
}

func NewModifyClusterEndpointSPResponse() (response *ModifyClusterEndpointSPResponse) {
    response = &ModifyClusterEndpointSPResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterEndpointSP
// 修改托管集群外网端口的安全策略（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCUNEXPECTEDERROR = "InternalError.VPCUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterEndpointSP(request *ModifyClusterEndpointSPRequest) (response *ModifyClusterEndpointSPResponse, err error) {
    return c.ModifyClusterEndpointSPWithContext(context.Background(), request)
}

// ModifyClusterEndpointSP
// 修改托管集群外网端口的安全策略（老的方式，仅支持托管集群外网端口）
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INTERNALERROR_VPCUNEXPECTEDERROR = "InternalError.VPCUnexpectedError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  OPERATIONDENIED = "OperationDenied"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterEndpointSPWithContext(ctx context.Context, request *ModifyClusterEndpointSPRequest) (response *ModifyClusterEndpointSPResponse, err error) {
    if request == nil {
        request = NewModifyClusterEndpointSPRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterEndpointSP require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterEndpointSPResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterImageRequest() (request *ModifyClusterImageRequest) {
    request = &ModifyClusterImageRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterImage")
    
    
    return
}

func NewModifyClusterImageResponse() (response *ModifyClusterImageResponse) {
    response = &ModifyClusterImageResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterImage
// 修改集群镜像
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyClusterImage(request *ModifyClusterImageRequest) (response *ModifyClusterImageResponse, err error) {
    return c.ModifyClusterImageWithContext(context.Background(), request)
}

// ModifyClusterImage
// 修改集群镜像
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CVMCOMMON = "InternalError.CvmCommon"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_IMAGEIDNOTFOUND = "InternalError.ImageIdNotFound"
//  INTERNALERROR_OSNOTSUPPORT = "InternalError.OsNotSupport"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyClusterImageWithContext(ctx context.Context, request *ModifyClusterImageRequest) (response *ModifyClusterImageResponse, err error) {
    if request == nil {
        request = NewModifyClusterImageRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterImage require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterImageResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterInspectionRequest() (request *ModifyClusterInspectionRequest) {
    request = &ModifyClusterInspectionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterInspection")
    
    
    return
}

func NewModifyClusterInspectionResponse() (response *ModifyClusterInspectionResponse) {
    response = &ModifyClusterInspectionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterInspection
// 更新集群巡检配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyClusterInspection(request *ModifyClusterInspectionRequest) (response *ModifyClusterInspectionResponse, err error) {
    return c.ModifyClusterInspectionWithContext(context.Background(), request)
}

// ModifyClusterInspection
// 更新集群巡检配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyClusterInspectionWithContext(ctx context.Context, request *ModifyClusterInspectionRequest) (response *ModifyClusterInspectionResponse, err error) {
    if request == nil {
        request = NewModifyClusterInspectionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterInspection require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterInspectionResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterNodePoolRequest() (request *ModifyClusterNodePoolRequest) {
    request = &ModifyClusterNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterNodePool")
    
    
    return
}

func NewModifyClusterNodePoolResponse() (response *ModifyClusterNodePoolResponse) {
    response = &ModifyClusterNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterNodePool
// 编辑节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  OPERATIONDENIED = "OperationDenied"
//  UNSUPPORTEDOPERATION_CAENABLEFAILED = "UnsupportedOperation.CaEnableFailed"
func (c *Client) ModifyClusterNodePool(request *ModifyClusterNodePoolRequest) (response *ModifyClusterNodePoolResponse, err error) {
    return c.ModifyClusterNodePoolWithContext(context.Background(), request)
}

// ModifyClusterNodePool
// 编辑节点池
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  OPERATIONDENIED = "OperationDenied"
//  UNSUPPORTEDOPERATION_CAENABLEFAILED = "UnsupportedOperation.CaEnableFailed"
func (c *Client) ModifyClusterNodePoolWithContext(ctx context.Context, request *ModifyClusterNodePoolRequest) (response *ModifyClusterNodePoolResponse, err error) {
    if request == nil {
        request = NewModifyClusterNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterRuntimeConfigRequest() (request *ModifyClusterRuntimeConfigRequest) {
    request = &ModifyClusterRuntimeConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterRuntimeConfig")
    
    
    return
}

func NewModifyClusterRuntimeConfigResponse() (response *ModifyClusterRuntimeConfigResponse) {
    response = &ModifyClusterRuntimeConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterRuntimeConfig
// 修改集群及节点池纬度运行时配置
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) ModifyClusterRuntimeConfig(request *ModifyClusterRuntimeConfigRequest) (response *ModifyClusterRuntimeConfigResponse, err error) {
    return c.ModifyClusterRuntimeConfigWithContext(context.Background(), request)
}

// ModifyClusterRuntimeConfig
// 修改集群及节点池纬度运行时配置
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
func (c *Client) ModifyClusterRuntimeConfigWithContext(ctx context.Context, request *ModifyClusterRuntimeConfigRequest) (response *ModifyClusterRuntimeConfigResponse, err error) {
    if request == nil {
        request = NewModifyClusterRuntimeConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterRuntimeConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterRuntimeConfigResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterUpgradingStateRequest() (request *ModifyClusterUpgradingStateRequest) {
    request = &ModifyClusterUpgradingStateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterUpgradingState")
    
    
    return
}

func NewModifyClusterUpgradingStateResponse() (response *ModifyClusterUpgradingStateResponse) {
    response = &ModifyClusterUpgradingStateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterUpgradingState
// 暂停或者取消集群升级 
//
// 可能返回的错误码:
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterUpgradingState(request *ModifyClusterUpgradingStateRequest) (response *ModifyClusterUpgradingStateResponse, err error) {
    return c.ModifyClusterUpgradingStateWithContext(context.Background(), request)
}

// ModifyClusterUpgradingState
// 暂停或者取消集群升级 
//
// 可能返回的错误码:
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ModifyClusterUpgradingStateWithContext(ctx context.Context, request *ModifyClusterUpgradingStateRequest) (response *ModifyClusterUpgradingStateResponse, err error) {
    if request == nil {
        request = NewModifyClusterUpgradingStateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterUpgradingState require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterUpgradingStateResponse()
    err = c.Send(request, response)
    return
}

func NewModifyClusterVirtualNodePoolRequest() (request *ModifyClusterVirtualNodePoolRequest) {
    request = &ModifyClusterVirtualNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyClusterVirtualNodePool")
    
    
    return
}

func NewModifyClusterVirtualNodePoolResponse() (response *ModifyClusterVirtualNodePoolResponse) {
    response = &ModifyClusterVirtualNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyClusterVirtualNodePool
// 修改虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyClusterVirtualNodePool(request *ModifyClusterVirtualNodePoolRequest) (response *ModifyClusterVirtualNodePoolResponse, err error) {
    return c.ModifyClusterVirtualNodePoolWithContext(context.Background(), request)
}

// ModifyClusterVirtualNodePool
// 修改虚拟节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyClusterVirtualNodePoolWithContext(ctx context.Context, request *ModifyClusterVirtualNodePoolRequest) (response *ModifyClusterVirtualNodePoolResponse, err error) {
    if request == nil {
        request = NewModifyClusterVirtualNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyClusterVirtualNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyClusterVirtualNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewModifyEksAlarmPolicyRequest() (request *ModifyEksAlarmPolicyRequest) {
    request = &ModifyEksAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyEksAlarmPolicy")
    
    
    return
}

func NewModifyEksAlarmPolicyResponse() (response *ModifyEksAlarmPolicyResponse) {
    response = &ModifyEksAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyEksAlarmPolicy
// 修改弹性集群告警策略 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyEksAlarmPolicy(request *ModifyEksAlarmPolicyRequest) (response *ModifyEksAlarmPolicyResponse, err error) {
    return c.ModifyEksAlarmPolicyWithContext(context.Background(), request)
}

// ModifyEksAlarmPolicy
// 修改弹性集群告警策略 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyEksAlarmPolicyWithContext(ctx context.Context, request *ModifyEksAlarmPolicyRequest) (response *ModifyEksAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewModifyEksAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyEksAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyEksAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewModifyEtcdAttributeRequest() (request *ModifyEtcdAttributeRequest) {
    request = &ModifyEtcdAttributeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyEtcdAttribute")
    
    
    return
}

func NewModifyEtcdAttributeResponse() (response *ModifyEtcdAttributeResponse) {
    response = &ModifyEtcdAttributeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyEtcdAttribute
// 修改etcd实例属性
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyEtcdAttribute(request *ModifyEtcdAttributeRequest) (response *ModifyEtcdAttributeResponse, err error) {
    return c.ModifyEtcdAttributeWithContext(context.Background(), request)
}

// ModifyEtcdAttribute
// 修改etcd实例属性
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyEtcdAttributeWithContext(ctx context.Context, request *ModifyEtcdAttributeRequest) (response *ModifyEtcdAttributeResponse, err error) {
    if request == nil {
        request = NewModifyEtcdAttributeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyEtcdAttribute require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyEtcdAttributeResponse()
    err = c.Send(request, response)
    return
}

func NewModifyEtcdConfigurationRequest() (request *ModifyEtcdConfigurationRequest) {
    request = &ModifyEtcdConfigurationRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyEtcdConfiguration")
    
    
    return
}

func NewModifyEtcdConfigurationResponse() (response *ModifyEtcdConfigurationResponse) {
    response = &ModifyEtcdConfigurationResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyEtcdConfiguration
// 修改etcd实例配置
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEUNAVAILABLE_PROMETHEUSSTATUSERROR = "ResourceUnavailable.PrometheusStatusError"
func (c *Client) ModifyEtcdConfiguration(request *ModifyEtcdConfigurationRequest) (response *ModifyEtcdConfigurationResponse, err error) {
    return c.ModifyEtcdConfigurationWithContext(context.Background(), request)
}

// ModifyEtcdConfiguration
// 修改etcd实例配置
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCEUNAVAILABLE_PROMETHEUSSTATUSERROR = "ResourceUnavailable.PrometheusStatusError"
func (c *Client) ModifyEtcdConfigurationWithContext(ctx context.Context, request *ModifyEtcdConfigurationRequest) (response *ModifyEtcdConfigurationResponse, err error) {
    if request == nil {
        request = NewModifyEtcdConfigurationRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyEtcdConfiguration require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyEtcdConfigurationResponse()
    err = c.Send(request, response)
    return
}

func NewModifyEtcdSnapshotPolicyRequest() (request *ModifyEtcdSnapshotPolicyRequest) {
    request = &ModifyEtcdSnapshotPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyEtcdSnapshotPolicy")
    
    
    return
}

func NewModifyEtcdSnapshotPolicyResponse() (response *ModifyEtcdSnapshotPolicyResponse) {
    response = &ModifyEtcdSnapshotPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyEtcdSnapshotPolicy
// 修改etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyEtcdSnapshotPolicy(request *ModifyEtcdSnapshotPolicyRequest) (response *ModifyEtcdSnapshotPolicyResponse, err error) {
    return c.ModifyEtcdSnapshotPolicyWithContext(context.Background(), request)
}

// ModifyEtcdSnapshotPolicy
// 修改etcd快照策略
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyEtcdSnapshotPolicyWithContext(ctx context.Context, request *ModifyEtcdSnapshotPolicyRequest) (response *ModifyEtcdSnapshotPolicyResponse, err error) {
    if request == nil {
        request = NewModifyEtcdSnapshotPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyEtcdSnapshotPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyEtcdSnapshotPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewModifyExternalClusterInternalRequest() (request *ModifyExternalClusterInternalRequest) {
    request = &ModifyExternalClusterInternalRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyExternalClusterInternal")
    
    
    return
}

func NewModifyExternalClusterInternalResponse() (response *ModifyExternalClusterInternalResponse) {
    response = &ModifyExternalClusterInternalResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyExternalClusterInternal
// 更新第三方集群信息（内部调用）
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyExternalClusterInternal(request *ModifyExternalClusterInternalRequest) (response *ModifyExternalClusterInternalResponse, err error) {
    return c.ModifyExternalClusterInternalWithContext(context.Background(), request)
}

// ModifyExternalClusterInternal
// 更新第三方集群信息（内部调用）
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ModifyExternalClusterInternalWithContext(ctx context.Context, request *ModifyExternalClusterInternalRequest) (response *ModifyExternalClusterInternalResponse, err error) {
    if request == nil {
        request = NewModifyExternalClusterInternalRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyExternalClusterInternal require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyExternalClusterInternalResponse()
    err = c.Send(request, response)
    return
}

func NewModifyExternalNodePoolRequest() (request *ModifyExternalNodePoolRequest) {
    request = &ModifyExternalNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyExternalNodePool")
    
    
    return
}

func NewModifyExternalNodePoolResponse() (response *ModifyExternalNodePoolResponse) {
    response = &ModifyExternalNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyExternalNodePool
// 修改第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyExternalNodePool(request *ModifyExternalNodePoolRequest) (response *ModifyExternalNodePoolResponse, err error) {
    return c.ModifyExternalNodePoolWithContext(context.Background(), request)
}

// ModifyExternalNodePool
// 修改第三方节点池
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyExternalNodePoolWithContext(ctx context.Context, request *ModifyExternalNodePoolRequest) (response *ModifyExternalNodePoolResponse, err error) {
    if request == nil {
        request = NewModifyExternalNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyExternalNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyExternalNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewModifyGrafanaAdminPasswordRequest() (request *ModifyGrafanaAdminPasswordRequest) {
    request = &ModifyGrafanaAdminPasswordRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyGrafanaAdminPassword")
    
    
    return
}

func NewModifyGrafanaAdminPasswordResponse() (response *ModifyGrafanaAdminPasswordResponse) {
    response = &ModifyGrafanaAdminPasswordResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyGrafanaAdminPassword
// 修改Grafana管理员账号和密码
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyGrafanaAdminPassword(request *ModifyGrafanaAdminPasswordRequest) (response *ModifyGrafanaAdminPasswordResponse, err error) {
    return c.ModifyGrafanaAdminPasswordWithContext(context.Background(), request)
}

// ModifyGrafanaAdminPassword
// 修改Grafana管理员账号和密码
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyGrafanaAdminPasswordWithContext(ctx context.Context, request *ModifyGrafanaAdminPasswordRequest) (response *ModifyGrafanaAdminPasswordResponse, err error) {
    if request == nil {
        request = NewModifyGrafanaAdminPasswordRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyGrafanaAdminPassword require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyGrafanaAdminPasswordResponse()
    err = c.Send(request, response)
    return
}

func NewModifyNodePoolDesiredCapacityAboutAsgRequest() (request *ModifyNodePoolDesiredCapacityAboutAsgRequest) {
    request = &ModifyNodePoolDesiredCapacityAboutAsgRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyNodePoolDesiredCapacityAboutAsg")
    
    
    return
}

func NewModifyNodePoolDesiredCapacityAboutAsgResponse() (response *ModifyNodePoolDesiredCapacityAboutAsgResponse) {
    response = &ModifyNodePoolDesiredCapacityAboutAsgResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyNodePoolDesiredCapacityAboutAsg
// 修改节点池关联伸缩组的期望实例数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ASASGNOTEXIST = "ResourceNotFound.AsAsgNotExist"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) ModifyNodePoolDesiredCapacityAboutAsg(request *ModifyNodePoolDesiredCapacityAboutAsgRequest) (response *ModifyNodePoolDesiredCapacityAboutAsgResponse, err error) {
    return c.ModifyNodePoolDesiredCapacityAboutAsgWithContext(context.Background(), request)
}

// ModifyNodePoolDesiredCapacityAboutAsg
// 修改节点池关联伸缩组的期望实例数
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_ASASGNOTEXIST = "ResourceNotFound.AsAsgNotExist"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) ModifyNodePoolDesiredCapacityAboutAsgWithContext(ctx context.Context, request *ModifyNodePoolDesiredCapacityAboutAsgRequest) (response *ModifyNodePoolDesiredCapacityAboutAsgResponse, err error) {
    if request == nil {
        request = NewModifyNodePoolDesiredCapacityAboutAsgRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyNodePoolDesiredCapacityAboutAsg require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyNodePoolDesiredCapacityAboutAsgResponse()
    err = c.Send(request, response)
    return
}

func NewModifyNodePoolInstanceTypesRequest() (request *ModifyNodePoolInstanceTypesRequest) {
    request = &ModifyNodePoolInstanceTypesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyNodePoolInstanceTypes")
    
    
    return
}

func NewModifyNodePoolInstanceTypesResponse() (response *ModifyNodePoolInstanceTypesResponse) {
    response = &ModifyNodePoolInstanceTypesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyNodePoolInstanceTypes
// 修改节点池的机型配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyNodePoolInstanceTypes(request *ModifyNodePoolInstanceTypesRequest) (response *ModifyNodePoolInstanceTypesResponse, err error) {
    return c.ModifyNodePoolInstanceTypesWithContext(context.Background(), request)
}

// ModifyNodePoolInstanceTypes
// 修改节点池的机型配置
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyNodePoolInstanceTypesWithContext(ctx context.Context, request *ModifyNodePoolInstanceTypesRequest) (response *ModifyNodePoolInstanceTypesResponse, err error) {
    if request == nil {
        request = NewModifyNodePoolInstanceTypesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyNodePoolInstanceTypes require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyNodePoolInstanceTypesResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusAgentExternalLabelsRequest() (request *ModifyPrometheusAgentExternalLabelsRequest) {
    request = &ModifyPrometheusAgentExternalLabelsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusAgentExternalLabels")
    
    
    return
}

func NewModifyPrometheusAgentExternalLabelsResponse() (response *ModifyPrometheusAgentExternalLabelsResponse) {
    response = &ModifyPrometheusAgentExternalLabelsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusAgentExternalLabels
// 修改被关联集群的external labels
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) ModifyPrometheusAgentExternalLabels(request *ModifyPrometheusAgentExternalLabelsRequest) (response *ModifyPrometheusAgentExternalLabelsResponse, err error) {
    return c.ModifyPrometheusAgentExternalLabelsWithContext(context.Background(), request)
}

// ModifyPrometheusAgentExternalLabels
// 修改被关联集群的external labels
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
func (c *Client) ModifyPrometheusAgentExternalLabelsWithContext(ctx context.Context, request *ModifyPrometheusAgentExternalLabelsRequest) (response *ModifyPrometheusAgentExternalLabelsResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusAgentExternalLabelsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusAgentExternalLabels require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusAgentExternalLabelsResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusAlertPolicyRequest() (request *ModifyPrometheusAlertPolicyRequest) {
    request = &ModifyPrometheusAlertPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusAlertPolicy")
    
    
    return
}

func NewModifyPrometheusAlertPolicyResponse() (response *ModifyPrometheusAlertPolicyResponse) {
    response = &ModifyPrometheusAlertPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusAlertPolicy
// 修改2.0实例告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusAlertPolicy(request *ModifyPrometheusAlertPolicyRequest) (response *ModifyPrometheusAlertPolicyResponse, err error) {
    return c.ModifyPrometheusAlertPolicyWithContext(context.Background(), request)
}

// ModifyPrometheusAlertPolicy
// 修改2.0实例告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusAlertPolicyWithContext(ctx context.Context, request *ModifyPrometheusAlertPolicyRequest) (response *ModifyPrometheusAlertPolicyResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusAlertPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusAlertPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusAlertPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusAlertRuleRequest() (request *ModifyPrometheusAlertRuleRequest) {
    request = &ModifyPrometheusAlertRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusAlertRule")
    
    
    return
}

func NewModifyPrometheusAlertRuleResponse() (response *ModifyPrometheusAlertRuleResponse) {
    response = &ModifyPrometheusAlertRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusAlertRule
// 修改告警规则 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusAlertRule(request *ModifyPrometheusAlertRuleRequest) (response *ModifyPrometheusAlertRuleResponse, err error) {
    return c.ModifyPrometheusAlertRuleWithContext(context.Background(), request)
}

// ModifyPrometheusAlertRule
// 修改告警规则 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusAlertRuleWithContext(ctx context.Context, request *ModifyPrometheusAlertRuleRequest) (response *ModifyPrometheusAlertRuleResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusAlertRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusAlertRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusAlertRuleResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusConfigRequest() (request *ModifyPrometheusConfigRequest) {
    request = &ModifyPrometheusConfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusConfig")
    
    
    return
}

func NewModifyPrometheusConfigResponse() (response *ModifyPrometheusConfigResponse) {
    response = &ModifyPrometheusConfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusConfig
// 修改prometheus配置，如果配置项不存在，则会新增
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusConfig(request *ModifyPrometheusConfigRequest) (response *ModifyPrometheusConfigResponse, err error) {
    return c.ModifyPrometheusConfigWithContext(context.Background(), request)
}

// ModifyPrometheusConfig
// 修改prometheus配置，如果配置项不存在，则会新增
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyPrometheusConfigWithContext(ctx context.Context, request *ModifyPrometheusConfigRequest) (response *ModifyPrometheusConfigResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusConfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusConfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusConfigResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusDashboardRequest() (request *ModifyPrometheusDashboardRequest) {
    request = &ModifyPrometheusDashboardRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusDashboard")
    
    
    return
}

func NewModifyPrometheusDashboardResponse() (response *ModifyPrometheusDashboardResponse) {
    response = &ModifyPrometheusDashboardResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusDashboard
// 修改grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) ModifyPrometheusDashboard(request *ModifyPrometheusDashboardRequest) (response *ModifyPrometheusDashboardResponse, err error) {
    return c.ModifyPrometheusDashboardWithContext(context.Background(), request)
}

// ModifyPrometheusDashboard
// 修改grafana监控面板
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) ModifyPrometheusDashboardWithContext(ctx context.Context, request *ModifyPrometheusDashboardRequest) (response *ModifyPrometheusDashboardResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusDashboardRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusDashboard require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusDashboardResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusInstanceRequest() (request *ModifyPrometheusInstanceRequest) {
    request = &ModifyPrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusInstance")
    
    
    return
}

func NewModifyPrometheusInstanceResponse() (response *ModifyPrometheusInstanceResponse) {
    response = &ModifyPrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusInstance
// 修改实例属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKALREADYRUNNING = "InternalError.TaskAlreadyRunning"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMGRAFANAINTERNETFORBID = "InvalidParameter.PromGrafanaInternetForbid"
func (c *Client) ModifyPrometheusInstance(request *ModifyPrometheusInstanceRequest) (response *ModifyPrometheusInstanceResponse, err error) {
    return c.ModifyPrometheusInstanceWithContext(context.Background(), request)
}

// ModifyPrometheusInstance
// 修改实例属性
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKALREADYRUNNING = "InternalError.TaskAlreadyRunning"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMGRAFANAINTERNETFORBID = "InvalidParameter.PromGrafanaInternetForbid"
func (c *Client) ModifyPrometheusInstanceWithContext(ctx context.Context, request *ModifyPrometheusInstanceRequest) (response *ModifyPrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusRecordRuleRequest() (request *ModifyPrometheusRecordRuleRequest) {
    request = &ModifyPrometheusRecordRuleRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusRecordRule")
    
    
    return
}

func NewModifyPrometheusRecordRuleResponse() (response *ModifyPrometheusRecordRuleResponse) {
    response = &ModifyPrometheusRecordRuleResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusRecordRule
// 修改prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyPrometheusRecordRule(request *ModifyPrometheusRecordRuleRequest) (response *ModifyPrometheusRecordRuleResponse, err error) {
    return c.ModifyPrometheusRecordRuleWithContext(context.Background(), request)
}

// ModifyPrometheusRecordRule
// 修改prometheus聚合规则
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyPrometheusRecordRuleWithContext(ctx context.Context, request *ModifyPrometheusRecordRuleRequest) (response *ModifyPrometheusRecordRuleResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusRecordRuleRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusRecordRule require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusRecordRuleResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusRecordRuleYamlRequest() (request *ModifyPrometheusRecordRuleYamlRequest) {
    request = &ModifyPrometheusRecordRuleYamlRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusRecordRuleYaml")
    
    
    return
}

func NewModifyPrometheusRecordRuleYamlResponse() (response *ModifyPrometheusRecordRuleYamlResponse) {
    response = &ModifyPrometheusRecordRuleYamlResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusRecordRuleYaml
// 通过yaml的方式修改Prometheus聚合实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) ModifyPrometheusRecordRuleYaml(request *ModifyPrometheusRecordRuleYamlRequest) (response *ModifyPrometheusRecordRuleYamlResponse, err error) {
    return c.ModifyPrometheusRecordRuleYamlWithContext(context.Background(), request)
}

// ModifyPrometheusRecordRuleYaml
// 通过yaml的方式修改Prometheus聚合实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
func (c *Client) ModifyPrometheusRecordRuleYamlWithContext(ctx context.Context, request *ModifyPrometheusRecordRuleYamlRequest) (response *ModifyPrometheusRecordRuleYamlResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusRecordRuleYamlRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusRecordRuleYaml require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusRecordRuleYamlResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusTempRequest() (request *ModifyPrometheusTempRequest) {
    request = &ModifyPrometheusTempRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusTemp")
    
    
    return
}

func NewModifyPrometheusTempResponse() (response *ModifyPrometheusTempResponse) {
    response = &ModifyPrometheusTempResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusTemp
// 修改模板内容
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyPrometheusTemp(request *ModifyPrometheusTempRequest) (response *ModifyPrometheusTempResponse, err error) {
    return c.ModifyPrometheusTempWithContext(context.Background(), request)
}

// ModifyPrometheusTemp
// 修改模板内容
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyPrometheusTempWithContext(ctx context.Context, request *ModifyPrometheusTempRequest) (response *ModifyPrometheusTempResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusTempRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusTemp require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusTempResponse()
    err = c.Send(request, response)
    return
}

func NewModifyPrometheusTemplateRequest() (request *ModifyPrometheusTemplateRequest) {
    request = &ModifyPrometheusTemplateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyPrometheusTemplate")
    
    
    return
}

func NewModifyPrometheusTemplateResponse() (response *ModifyPrometheusTemplateResponse) {
    response = &ModifyPrometheusTemplateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyPrometheusTemplate
// 修改模板内容
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyPrometheusTemplate(request *ModifyPrometheusTemplateRequest) (response *ModifyPrometheusTemplateResponse, err error) {
    return c.ModifyPrometheusTemplateWithContext(context.Background(), request)
}

// ModifyPrometheusTemplate
// 修改模板内容
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ModifyPrometheusTemplateWithContext(ctx context.Context, request *ModifyPrometheusTemplateRequest) (response *ModifyPrometheusTemplateResponse, err error) {
    if request == nil {
        request = NewModifyPrometheusTemplateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyPrometheusTemplate require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyPrometheusTemplateResponse()
    err = c.Send(request, response)
    return
}

func NewModifyReservedInstanceNameRequest() (request *ModifyReservedInstanceNameRequest) {
    request = &ModifyReservedInstanceNameRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyReservedInstanceName")
    
    
    return
}

func NewModifyReservedInstanceNameResponse() (response *ModifyReservedInstanceNameResponse) {
    response = &ModifyReservedInstanceNameResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyReservedInstanceName
// 修改预留券名称
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyReservedInstanceName(request *ModifyReservedInstanceNameRequest) (response *ModifyReservedInstanceNameResponse, err error) {
    return c.ModifyReservedInstanceNameWithContext(context.Background(), request)
}

// ModifyReservedInstanceName
// 修改预留券名称
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) ModifyReservedInstanceNameWithContext(ctx context.Context, request *ModifyReservedInstanceNameRequest) (response *ModifyReservedInstanceNameResponse, err error) {
    if request == nil {
        request = NewModifyReservedInstanceNameRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyReservedInstanceName require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyReservedInstanceNameResponse()
    err = c.Send(request, response)
    return
}

func NewModifyResourceQuotaRequest() (request *ModifyResourceQuotaRequest) {
    request = &ModifyResourceQuotaRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyResourceQuota")
    
    
    return
}

func NewModifyResourceQuotaResponse() (response *ModifyResourceQuotaResponse) {
    response = &ModifyResourceQuotaResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyResourceQuota
// 修改集群资源配额
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
func (c *Client) ModifyResourceQuota(request *ModifyResourceQuotaRequest) (response *ModifyResourceQuotaResponse, err error) {
    return c.ModifyResourceQuotaWithContext(context.Background(), request)
}

// ModifyResourceQuota
// 修改集群资源配额
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_CLUSTERNOTFOUND = "InvalidParameter.ClusterNotFound"
func (c *Client) ModifyResourceQuotaWithContext(ctx context.Context, request *ModifyResourceQuotaRequest) (response *ModifyResourceQuotaResponse, err error) {
    if request == nil {
        request = NewModifyResourceQuotaRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyResourceQuota require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyResourceQuotaResponse()
    err = c.Send(request, response)
    return
}

func NewModifySecretRequest() (request *ModifySecretRequest) {
    request = &ModifySecretRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifySecret")
    
    
    return
}

func NewModifySecretResponse() (response *ModifySecretResponse) {
    response = &ModifySecretResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifySecret
// 修改秘钥
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifySecret(request *ModifySecretRequest) (response *ModifySecretResponse, err error) {
    return c.ModifySecretWithContext(context.Background(), request)
}

// ModifySecret
// 修改秘钥
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifySecretWithContext(ctx context.Context, request *ModifySecretRequest) (response *ModifySecretResponse, err error) {
    if request == nil {
        request = NewModifySecretRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifySecret require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifySecretResponse()
    err = c.Send(request, response)
    return
}

func NewModifyTkeEdgeAlarmPolicyRequest() (request *ModifyTkeEdgeAlarmPolicyRequest) {
    request = &ModifyTkeEdgeAlarmPolicyRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyTkeEdgeAlarmPolicy")
    
    
    return
}

func NewModifyTkeEdgeAlarmPolicyResponse() (response *ModifyTkeEdgeAlarmPolicyResponse) {
    response = &ModifyTkeEdgeAlarmPolicyResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyTkeEdgeAlarmPolicy
// 修改边缘集群告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyTkeEdgeAlarmPolicy(request *ModifyTkeEdgeAlarmPolicyRequest) (response *ModifyTkeEdgeAlarmPolicyResponse, err error) {
    return c.ModifyTkeEdgeAlarmPolicyWithContext(context.Background(), request)
}

// ModifyTkeEdgeAlarmPolicy
// 修改边缘集群告警策略
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ModifyTkeEdgeAlarmPolicyWithContext(ctx context.Context, request *ModifyTkeEdgeAlarmPolicyRequest) (response *ModifyTkeEdgeAlarmPolicyResponse, err error) {
    if request == nil {
        request = NewModifyTkeEdgeAlarmPolicyRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyTkeEdgeAlarmPolicy require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyTkeEdgeAlarmPolicyResponse()
    err = c.Send(request, response)
    return
}

func NewModifyVirtualServiceRequest() (request *ModifyVirtualServiceRequest) {
    request = &ModifyVirtualServiceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyVirtualService")
    
    
    return
}

func NewModifyVirtualServiceResponse() (response *ModifyVirtualServiceResponse) {
    response = &ModifyVirtualServiceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyVirtualService
// 修改虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
func (c *Client) ModifyVirtualService(request *ModifyVirtualServiceRequest) (response *ModifyVirtualServiceResponse, err error) {
    return c.ModifyVirtualServiceWithContext(context.Background(), request)
}

// ModifyVirtualService
// 修改虚拟服务.
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
func (c *Client) ModifyVirtualServiceWithContext(ctx context.Context, request *ModifyVirtualServiceRequest) (response *ModifyVirtualServiceResponse, err error) {
    if request == nil {
        request = NewModifyVirtualServiceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyVirtualService require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyVirtualServiceResponse()
    err = c.Send(request, response)
    return
}

func NewModifyVirtualServiceReplicasRequest() (request *ModifyVirtualServiceReplicasRequest) {
    request = &ModifyVirtualServiceReplicasRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ModifyVirtualServiceReplicas")
    
    
    return
}

func NewModifyVirtualServiceReplicasResponse() (response *ModifyVirtualServiceReplicasResponse) {
    response = &ModifyVirtualServiceReplicasResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ModifyVirtualServiceReplicas
// 修改虚拟服务副本数
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifyVirtualServiceReplicas(request *ModifyVirtualServiceReplicasRequest) (response *ModifyVirtualServiceReplicasResponse, err error) {
    return c.ModifyVirtualServiceReplicasWithContext(context.Background(), request)
}

// ModifyVirtualServiceReplicas
// 修改虚拟服务副本数
//
// 可能返回的错误码:
//  INTERNALERROR_PARAM = "InternalError.Param"
//  RESOURCENOTFOUND_SERVICENOTFOUND = "ResourceNotFound.ServiceNotFound"
//  RESOURCEUNAVAILABLE_CLUSTERINABNORMALSTAT = "ResourceUnavailable.ClusterInAbnormalStat"
func (c *Client) ModifyVirtualServiceReplicasWithContext(ctx context.Context, request *ModifyVirtualServiceReplicasRequest) (response *ModifyVirtualServiceReplicasResponse, err error) {
    if request == nil {
        request = NewModifyVirtualServiceReplicasRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ModifyVirtualServiceReplicas require credential")
    }

    request.SetContext(ctx)
    
    response = NewModifyVirtualServiceReplicasResponse()
    err = c.Send(request, response)
    return
}

func NewOpUpgradeClusterInstancesRequest() (request *OpUpgradeClusterInstancesRequest) {
    request = &OpUpgradeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "OpUpgradeClusterInstances")
    
    
    return
}

func NewOpUpgradeClusterInstancesResponse() (response *OpUpgradeClusterInstancesResponse) {
    response = &OpUpgradeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// OpUpgradeClusterInstances
// 用于控制节点升级任务 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) OpUpgradeClusterInstances(request *OpUpgradeClusterInstancesRequest) (response *OpUpgradeClusterInstancesResponse, err error) {
    return c.OpUpgradeClusterInstancesWithContext(context.Background(), request)
}

// OpUpgradeClusterInstances
// 用于控制节点升级任务 
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) OpUpgradeClusterInstancesWithContext(ctx context.Context, request *OpUpgradeClusterInstancesRequest) (response *OpUpgradeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewOpUpgradeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("OpUpgradeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewOpUpgradeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewOperateCostTaskRequest() (request *OperateCostTaskRequest) {
    request = &OperateCostTaskRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "OperateCostTask")
    
    
    return
}

func NewOperateCostTaskResponse() (response *OperateCostTaskResponse) {
    response = &OperateCostTaskResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// OperateCostTask
// 操作某个成本分析任务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) OperateCostTask(request *OperateCostTaskRequest) (response *OperateCostTaskResponse, err error) {
    return c.OperateCostTaskWithContext(context.Background(), request)
}

// OperateCostTask
// 操作某个成本分析任务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) OperateCostTaskWithContext(ctx context.Context, request *OperateCostTaskRequest) (response *OperateCostTaskResponse, err error) {
    if request == nil {
        request = NewOperateCostTaskRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("OperateCostTask require credential")
    }

    request.SetContext(ctx)
    
    response = NewOperateCostTaskResponse()
    err = c.Send(request, response)
    return
}

func NewPauseClusterInstancesRequest() (request *PauseClusterInstancesRequest) {
    request = &PauseClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "PauseClusterInstances")
    
    
    return
}

func NewPauseClusterInstancesResponse() (response *PauseClusterInstancesResponse) {
    response = &PauseClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// PauseClusterInstances
// 暂停集群节点升级, API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) PauseClusterInstances(request *PauseClusterInstancesRequest) (response *PauseClusterInstancesResponse, err error) {
    return c.PauseClusterInstancesWithContext(context.Background(), request)
}

// PauseClusterInstances
// 暂停集群节点升级, API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) PauseClusterInstancesWithContext(ctx context.Context, request *PauseClusterInstancesRequest) (response *PauseClusterInstancesResponse, err error) {
    if request == nil {
        request = NewPauseClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("PauseClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewPauseClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewProbePrometheusTargetsRequest() (request *ProbePrometheusTargetsRequest) {
    request = &ProbePrometheusTargetsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ProbePrometheusTargets")
    
    
    return
}

func NewProbePrometheusTargetsResponse() (response *ProbePrometheusTargetsResponse) {
    response = &ProbePrometheusTargetsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ProbePrometheusTargets
// 探测采集对象
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ProbePrometheusTargets(request *ProbePrometheusTargetsRequest) (response *ProbePrometheusTargetsResponse, err error) {
    return c.ProbePrometheusTargetsWithContext(context.Background(), request)
}

// ProbePrometheusTargets
// 探测采集对象
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) ProbePrometheusTargetsWithContext(ctx context.Context, request *ProbePrometheusTargetsRequest) (response *ProbePrometheusTargetsResponse, err error) {
    if request == nil {
        request = NewProbePrometheusTargetsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ProbePrometheusTargets require credential")
    }

    request.SetContext(ctx)
    
    response = NewProbePrometheusTargetsResponse()
    err = c.Send(request, response)
    return
}

func NewRemoveNodeFromNodePoolRequest() (request *RemoveNodeFromNodePoolRequest) {
    request = &RemoveNodeFromNodePoolRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RemoveNodeFromNodePool")
    
    
    return
}

func NewRemoveNodeFromNodePoolResponse() (response *RemoveNodeFromNodePoolResponse) {
    response = &RemoveNodeFromNodePoolResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RemoveNodeFromNodePool
// 移出节点池节点，但保留在集群内
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) RemoveNodeFromNodePool(request *RemoveNodeFromNodePoolRequest) (response *RemoveNodeFromNodePoolResponse, err error) {
    return c.RemoveNodeFromNodePoolWithContext(context.Background(), request)
}

// RemoveNodeFromNodePool
// 移出节点池节点，但保留在集群内
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) RemoveNodeFromNodePoolWithContext(ctx context.Context, request *RemoveNodeFromNodePoolRequest) (response *RemoveNodeFromNodePoolResponse, err error) {
    if request == nil {
        request = NewRemoveNodeFromNodePoolRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RemoveNodeFromNodePool require credential")
    }

    request.SetContext(ctx)
    
    response = NewRemoveNodeFromNodePoolResponse()
    err = c.Send(request, response)
    return
}

func NewResizeEtcdInstanceRequest() (request *ResizeEtcdInstanceRequest) {
    request = &ResizeEtcdInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ResizeEtcdInstance")
    
    
    return
}

func NewResizeEtcdInstanceResponse() (response *ResizeEtcdInstanceResponse) {
    response = &ResizeEtcdInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ResizeEtcdInstance
// 扩容etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ResizeEtcdInstance(request *ResizeEtcdInstanceRequest) (response *ResizeEtcdInstanceResponse, err error) {
    return c.ResizeEtcdInstanceWithContext(context.Background(), request)
}

// ResizeEtcdInstance
// 扩容etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) ResizeEtcdInstanceWithContext(ctx context.Context, request *ResizeEtcdInstanceRequest) (response *ResizeEtcdInstanceResponse, err error) {
    if request == nil {
        request = NewResizeEtcdInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ResizeEtcdInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewResizeEtcdInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewRestartContainerRequest() (request *RestartContainerRequest) {
    request = &RestartContainerRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RestartContainer")
    
    
    return
}

func NewRestartContainerResponse() (response *RestartContainerResponse) {
    response = &RestartContainerResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RestartContainer
// 重启pod内的某个容器
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) RestartContainer(request *RestartContainerRequest) (response *RestartContainerResponse, err error) {
    return c.RestartContainerWithContext(context.Background(), request)
}

// RestartContainer
// 重启pod内的某个容器
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) RestartContainerWithContext(ctx context.Context, request *RestartContainerRequest) (response *RestartContainerResponse, err error) {
    if request == nil {
        request = NewRestartContainerRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RestartContainer require credential")
    }

    request.SetContext(ctx)
    
    response = NewRestartContainerResponse()
    err = c.Send(request, response)
    return
}

func NewRestartEKSContainerInstancesRequest() (request *RestartEKSContainerInstancesRequest) {
    request = &RestartEKSContainerInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RestartEKSContainerInstances")
    
    
    return
}

func NewRestartEKSContainerInstancesResponse() (response *RestartEKSContainerInstancesResponse) {
    response = &RestartEKSContainerInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RestartEKSContainerInstances
// 重启弹性容器实例，支持批量操作
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) RestartEKSContainerInstances(request *RestartEKSContainerInstancesRequest) (response *RestartEKSContainerInstancesResponse, err error) {
    return c.RestartEKSContainerInstancesWithContext(context.Background(), request)
}

// RestartEKSContainerInstances
// 重启弹性容器实例，支持批量操作
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) RestartEKSContainerInstancesWithContext(ctx context.Context, request *RestartEKSContainerInstancesRequest) (response *RestartEKSContainerInstancesResponse, err error) {
    if request == nil {
        request = NewRestartEKSContainerInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RestartEKSContainerInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewRestartEKSContainerInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewRestoreEtcdInstanceRequest() (request *RestoreEtcdInstanceRequest) {
    request = &RestoreEtcdInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RestoreEtcdInstance")
    
    
    return
}

func NewRestoreEtcdInstanceResponse() (response *RestoreEtcdInstanceResponse) {
    response = &RestoreEtcdInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RestoreEtcdInstance
// 恢复etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) RestoreEtcdInstance(request *RestoreEtcdInstanceRequest) (response *RestoreEtcdInstanceResponse, err error) {
    return c.RestoreEtcdInstanceWithContext(context.Background(), request)
}

// RestoreEtcdInstance
// 恢复etcd实例
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) RestoreEtcdInstanceWithContext(ctx context.Context, request *RestoreEtcdInstanceRequest) (response *RestoreEtcdInstanceResponse, err error) {
    if request == nil {
        request = NewRestoreEtcdInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RestoreEtcdInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewRestoreEtcdInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewResumeClusterInstancesRequest() (request *ResumeClusterInstancesRequest) {
    request = &ResumeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ResumeClusterInstances")
    
    
    return
}

func NewResumeClusterInstancesResponse() (response *ResumeClusterInstancesResponse) {
    response = &ResumeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ResumeClusterInstances
// 恢复集群节点升级，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ResumeClusterInstances(request *ResumeClusterInstancesRequest) (response *ResumeClusterInstancesResponse, err error) {
    return c.ResumeClusterInstancesWithContext(context.Background(), request)
}

// ResumeClusterInstances
// 恢复集群节点升级，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) ResumeClusterInstancesWithContext(ctx context.Context, request *ResumeClusterInstancesRequest) (response *ResumeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewResumeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ResumeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewResumeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewRollbackClusterReleaseRequest() (request *RollbackClusterReleaseRequest) {
    request = &RollbackClusterReleaseRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RollbackClusterRelease")
    
    
    return
}

func NewRollbackClusterReleaseResponse() (response *RollbackClusterReleaseResponse) {
    response = &RollbackClusterReleaseResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RollbackClusterRelease
// 在应用市场中集群回滚应用至某个历史版本
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) RollbackClusterRelease(request *RollbackClusterReleaseRequest) (response *RollbackClusterReleaseResponse, err error) {
    return c.RollbackClusterReleaseWithContext(context.Background(), request)
}

// RollbackClusterRelease
// 在应用市场中集群回滚应用至某个历史版本
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) RollbackClusterReleaseWithContext(ctx context.Context, request *RollbackClusterReleaseRequest) (response *RollbackClusterReleaseResponse, err error) {
    if request == nil {
        request = NewRollbackClusterReleaseRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RollbackClusterRelease require credential")
    }

    request.SetContext(ctx)
    
    response = NewRollbackClusterReleaseResponse()
    err = c.Send(request, response)
    return
}

func NewRunClusterInspectionsRequest() (request *RunClusterInspectionsRequest) {
    request = &RunClusterInspectionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RunClusterInspections")
    
    
    return
}

func NewRunClusterInspectionsResponse() (response *RunClusterInspectionsResponse) {
    response = &RunClusterInspectionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RunClusterInspections
// 触发一次集群巡检。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBEJARVISALREADYRUNNING = "InternalError.KubeJarvisAlreadyRunning"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) RunClusterInspections(request *RunClusterInspectionsRequest) (response *RunClusterInspectionsResponse, err error) {
    return c.RunClusterInspectionsWithContext(context.Background(), request)
}

// RunClusterInspections
// 触发一次集群巡检。
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_KUBEJARVISALREADYRUNNING = "InternalError.KubeJarvisAlreadyRunning"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) RunClusterInspectionsWithContext(ctx context.Context, request *RunClusterInspectionsRequest) (response *RunClusterInspectionsResponse, err error) {
    if request == nil {
        request = NewRunClusterInspectionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RunClusterInspections require credential")
    }

    request.SetContext(ctx)
    
    response = NewRunClusterInspectionsResponse()
    err = c.Send(request, response)
    return
}

func NewRunInContainerRequest() (request *RunInContainerRequest) {
    request = &RunInContainerRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RunInContainer")
    
    
    return
}

func NewRunInContainerResponse() (response *RunInContainerResponse) {
    response = &RunInContainerResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RunInContainer
// RunInContainer
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
func (c *Client) RunInContainer(request *RunInContainerRequest) (response *RunInContainerResponse, err error) {
    return c.RunInContainerWithContext(context.Background(), request)
}

// RunInContainer
// RunInContainer
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
func (c *Client) RunInContainerWithContext(ctx context.Context, request *RunInContainerRequest) (response *RunInContainerResponse, err error) {
    if request == nil {
        request = NewRunInContainerRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RunInContainer require credential")
    }

    request.SetContext(ctx)
    
    response = NewRunInContainerResponse()
    err = c.Send(request, response)
    return
}

func NewRunPrometheusInstanceRequest() (request *RunPrometheusInstanceRequest) {
    request = &RunPrometheusInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "RunPrometheusInstance")
    
    
    return
}

func NewRunPrometheusInstanceResponse() (response *RunPrometheusInstanceResponse) {
    response = &RunPrometheusInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// RunPrometheusInstance
// 初始化与云监控融合的2.0版本实例，开启集成中心时调用
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) RunPrometheusInstance(request *RunPrometheusInstanceRequest) (response *RunPrometheusInstanceResponse, err error) {
    return c.RunPrometheusInstanceWithContext(context.Background(), request)
}

// RunPrometheusInstance
// 初始化与云监控融合的2.0版本实例，开启集成中心时调用
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) RunPrometheusInstanceWithContext(ctx context.Context, request *RunPrometheusInstanceRequest) (response *RunPrometheusInstanceResponse, err error) {
    if request == nil {
        request = NewRunPrometheusInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("RunPrometheusInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewRunPrometheusInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewScaleInClusterMasterRequest() (request *ScaleInClusterMasterRequest) {
    request = &ScaleInClusterMasterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ScaleInClusterMaster")
    
    
    return
}

func NewScaleInClusterMasterResponse() (response *ScaleInClusterMasterResponse) {
    response = &ScaleInClusterMasterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ScaleInClusterMaster
// 缩容独立集群master节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  OPERATIONDENIED = "OperationDenied"
func (c *Client) ScaleInClusterMaster(request *ScaleInClusterMasterRequest) (response *ScaleInClusterMasterResponse, err error) {
    return c.ScaleInClusterMasterWithContext(context.Background(), request)
}

// ScaleInClusterMaster
// 缩容独立集群master节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  OPERATIONDENIED = "OperationDenied"
func (c *Client) ScaleInClusterMasterWithContext(ctx context.Context, request *ScaleInClusterMasterRequest) (response *ScaleInClusterMasterResponse, err error) {
    if request == nil {
        request = NewScaleInClusterMasterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ScaleInClusterMaster require credential")
    }

    request.SetContext(ctx)
    
    response = NewScaleInClusterMasterResponse()
    err = c.Send(request, response)
    return
}

func NewScaleOutClusterMasterRequest() (request *ScaleOutClusterMasterRequest) {
    request = &ScaleOutClusterMasterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ScaleOutClusterMaster")
    
    
    return
}

func NewScaleOutClusterMasterResponse() (response *ScaleOutClusterMasterResponse) {
    response = &ScaleOutClusterMasterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ScaleOutClusterMaster
// 扩容独立集群master节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  OPERATIONDENIED = "OperationDenied"
func (c *Client) ScaleOutClusterMaster(request *ScaleOutClusterMasterRequest) (response *ScaleOutClusterMasterResponse, err error) {
    return c.ScaleOutClusterMasterWithContext(context.Background(), request)
}

// ScaleOutClusterMaster
// 扩容独立集群master节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  OPERATIONDENIED = "OperationDenied"
func (c *Client) ScaleOutClusterMasterWithContext(ctx context.Context, request *ScaleOutClusterMasterRequest) (response *ScaleOutClusterMasterResponse, err error) {
    if request == nil {
        request = NewScaleOutClusterMasterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ScaleOutClusterMaster require credential")
    }

    request.SetContext(ctx)
    
    response = NewScaleOutClusterMasterResponse()
    err = c.Send(request, response)
    return
}

func NewServiceMeshForwardRequestRequest() (request *ServiceMeshForwardRequestRequest) {
    request = &ServiceMeshForwardRequestRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ServiceMeshForwardRequest")
    
    
    return
}

func NewServiceMeshForwardRequestResponse() (response *ServiceMeshForwardRequestResponse) {
    response = &ServiceMeshForwardRequestResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ServiceMeshForwardRequest
// 服务网格代理转发
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_PROXYNOTMATCHWITHCTRLPLANE = "FailedOperation.ProxyNotMatchWithCtrlPlane"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ServiceMeshForwardRequest(request *ServiceMeshForwardRequestRequest) (response *ServiceMeshForwardRequestResponse, err error) {
    return c.ServiceMeshForwardRequestWithContext(context.Background(), request)
}

// ServiceMeshForwardRequest
// 服务网格代理转发
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  FAILEDOPERATION_PROXYNOTMATCHWITHCTRLPLANE = "FailedOperation.ProxyNotMatchWithCtrlPlane"
//  FAILEDOPERATION_RBACFORBIDDEN = "FailedOperation.RBACForbidden"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) ServiceMeshForwardRequestWithContext(ctx context.Context, request *ServiceMeshForwardRequestRequest) (response *ServiceMeshForwardRequestResponse, err error) {
    if request == nil {
        request = NewServiceMeshForwardRequestRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ServiceMeshForwardRequest require credential")
    }

    request.SetContext(ctx)
    
    response = NewServiceMeshForwardRequestResponse()
    err = c.Send(request, response)
    return
}

func NewSetContainerProbeResultRequest() (request *SetContainerProbeResultRequest) {
    request = &SetContainerProbeResultRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "SetContainerProbeResult")
    
    
    return
}

func NewSetContainerProbeResultResponse() (response *SetContainerProbeResultResponse) {
    response = &SetContainerProbeResultResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// SetContainerProbeResult
// SetContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) SetContainerProbeResult(request *SetContainerProbeResultRequest) (response *SetContainerProbeResultResponse, err error) {
    return c.SetContainerProbeResultWithContext(context.Background(), request)
}

// SetContainerProbeResult
// SetContainerProbeResult
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) SetContainerProbeResultWithContext(ctx context.Context, request *SetContainerProbeResultRequest) (response *SetContainerProbeResultResponse, err error) {
    if request == nil {
        request = NewSetContainerProbeResultRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("SetContainerProbeResult require credential")
    }

    request.SetContext(ctx)
    
    response = NewSetContainerProbeResultResponse()
    err = c.Send(request, response)
    return
}

func NewSetNodePoolNodeProtectionRequest() (request *SetNodePoolNodeProtectionRequest) {
    request = &SetNodePoolNodeProtectionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "SetNodePoolNodeProtection")
    
    
    return
}

func NewSetNodePoolNodeProtectionResponse() (response *SetNodePoolNodeProtectionResponse) {
    response = &SetNodePoolNodeProtectionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// SetNodePoolNodeProtection
// 仅能设置节点池中处于伸缩组的节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) SetNodePoolNodeProtection(request *SetNodePoolNodeProtectionRequest) (response *SetNodePoolNodeProtectionResponse, err error) {
    return c.SetNodePoolNodeProtectionWithContext(context.Background(), request)
}

// SetNodePoolNodeProtection
// 仅能设置节点池中处于伸缩组的节点
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_DBRECORDNOTFOUND = "InternalError.DbRecordNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) SetNodePoolNodeProtectionWithContext(ctx context.Context, request *SetNodePoolNodeProtectionRequest) (response *SetNodePoolNodeProtectionResponse, err error) {
    if request == nil {
        request = NewSetNodePoolNodeProtectionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("SetNodePoolNodeProtection require credential")
    }

    request.SetContext(ctx)
    
    response = NewSetNodePoolNodeProtectionResponse()
    err = c.Send(request, response)
    return
}

func NewStopContainerRequest() (request *StopContainerRequest) {
    request = &StopContainerRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "StopContainer")
    
    
    return
}

func NewStopContainerResponse() (response *StopContainerResponse) {
    response = &StopContainerResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// StopContainer
// 停止pod内的容器
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) StopContainer(request *StopContainerRequest) (response *StopContainerResponse, err error) {
    return c.StopContainerWithContext(context.Background(), request)
}

// StopContainer
// 停止pod内的容器
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CONTAINERNOTFOUND = "InternalError.ContainerNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_PODNOTFOUND = "InternalError.PodNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INTERNALERROR_VSTATIONERROR = "InternalError.VstationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCENOTFOUND_PODNOTFOUND = "ResourceNotFound.PodNotFound"
func (c *Client) StopContainerWithContext(ctx context.Context, request *StopContainerRequest) (response *StopContainerResponse, err error) {
    if request == nil {
        request = NewStopContainerRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("StopContainer require credential")
    }

    request.SetContext(ctx)
    
    response = NewStopContainerResponse()
    err = c.Send(request, response)
    return
}

func NewSyncPrometheusTempRequest() (request *SyncPrometheusTempRequest) {
    request = &SyncPrometheusTempRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "SyncPrometheusTemp")
    
    
    return
}

func NewSyncPrometheusTempResponse() (response *SyncPrometheusTempResponse) {
    response = &SyncPrometheusTempResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// SyncPrometheusTemp
// 同步模板到实例或者集群，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) SyncPrometheusTemp(request *SyncPrometheusTempRequest) (response *SyncPrometheusTempResponse, err error) {
    return c.SyncPrometheusTempWithContext(context.Background(), request)
}

// SyncPrometheusTemp
// 同步模板到实例或者集群，针对V2版本实例
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) SyncPrometheusTempWithContext(ctx context.Context, request *SyncPrometheusTempRequest) (response *SyncPrometheusTempResponse, err error) {
    if request == nil {
        request = NewSyncPrometheusTempRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("SyncPrometheusTemp require credential")
    }

    request.SetContext(ctx)
    
    response = NewSyncPrometheusTempResponse()
    err = c.Send(request, response)
    return
}

func NewSyncPrometheusTemplateRequest() (request *SyncPrometheusTemplateRequest) {
    request = &SyncPrometheusTemplateRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "SyncPrometheusTemplate")
    
    
    return
}

func NewSyncPrometheusTemplateResponse() (response *SyncPrometheusTemplateResponse) {
    response = &SyncPrometheusTemplateResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// SyncPrometheusTemplate
// 同步模板到实例或者集群
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) SyncPrometheusTemplate(request *SyncPrometheusTemplateRequest) (response *SyncPrometheusTemplateResponse, err error) {
    return c.SyncPrometheusTemplateWithContext(context.Background(), request)
}

// SyncPrometheusTemplate
// 同步模板到实例或者集群
//
// 可能返回的错误码:
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  INVALIDPARAMETER_PROMCLUSTERNOTFOUND = "InvalidParameter.PromClusterNotFound"
//  INVALIDPARAMETER_PROMINSTANCENOTFOUND = "InvalidParameter.PromInstanceNotFound"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
func (c *Client) SyncPrometheusTemplateWithContext(ctx context.Context, request *SyncPrometheusTemplateRequest) (response *SyncPrometheusTemplateResponse, err error) {
    if request == nil {
        request = NewSyncPrometheusTemplateRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("SyncPrometheusTemplate require credential")
    }

    request.SetContext(ctx)
    
    response = NewSyncPrometheusTemplateResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallClusterReleaseRequest() (request *UninstallClusterReleaseRequest) {
    request = &UninstallClusterReleaseRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallClusterRelease")
    
    
    return
}

func NewUninstallClusterReleaseResponse() (response *UninstallClusterReleaseResponse) {
    response = &UninstallClusterReleaseResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallClusterRelease
// 在应用市场中集群删除某个应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UninstallClusterRelease(request *UninstallClusterReleaseRequest) (response *UninstallClusterReleaseResponse, err error) {
    return c.UninstallClusterReleaseWithContext(context.Background(), request)
}

// UninstallClusterRelease
// 在应用市场中集群删除某个应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UninstallClusterReleaseWithContext(ctx context.Context, request *UninstallClusterReleaseRequest) (response *UninstallClusterReleaseResponse, err error) {
    if request == nil {
        request = NewUninstallClusterReleaseRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallClusterRelease require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallClusterReleaseResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallClustersCostsRequest() (request *UninstallClustersCostsRequest) {
    request = &UninstallClustersCostsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallClustersCosts")
    
    
    return
}

func NewUninstallClustersCostsResponse() (response *UninstallClustersCostsResponse) {
    response = &UninstallClustersCostsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallClustersCosts
// 卸载集群成本分析服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) UninstallClustersCosts(request *UninstallClustersCostsRequest) (response *UninstallClustersCostsResponse, err error) {
    return c.UninstallClustersCostsWithContext(context.Background(), request)
}

// UninstallClustersCosts
// 卸载集群成本分析服务
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
func (c *Client) UninstallClustersCostsWithContext(ctx context.Context, request *UninstallClustersCostsRequest) (response *UninstallClustersCostsResponse, err error) {
    if request == nil {
        request = NewUninstallClustersCostsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallClustersCosts require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallClustersCostsResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallEdgeLogAgentRequest() (request *UninstallEdgeLogAgentRequest) {
    request = &UninstallEdgeLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallEdgeLogAgent")
    
    
    return
}

func NewUninstallEdgeLogAgentResponse() (response *UninstallEdgeLogAgentResponse) {
    response = &UninstallEdgeLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallEdgeLogAgent
// 从tke@edge集群边缘节点上卸载日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) UninstallEdgeLogAgent(request *UninstallEdgeLogAgentRequest) (response *UninstallEdgeLogAgentResponse, err error) {
    return c.UninstallEdgeLogAgentWithContext(context.Background(), request)
}

// UninstallEdgeLogAgent
// 从tke@edge集群边缘节点上卸载日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) UninstallEdgeLogAgentWithContext(ctx context.Context, request *UninstallEdgeLogAgentRequest) (response *UninstallEdgeLogAgentResponse, err error) {
    if request == nil {
        request = NewUninstallEdgeLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallEdgeLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallEdgeLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallEksLogAgentRequest() (request *UninstallEksLogAgentRequest) {
    request = &UninstallEksLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallEksLogAgent")
    
    
    return
}

func NewUninstallEksLogAgentResponse() (response *UninstallEksLogAgentResponse) {
    response = &UninstallEksLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallEksLogAgent
// 卸载弹性集群的日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) UninstallEksLogAgent(request *UninstallEksLogAgentRequest) (response *UninstallEksLogAgentResponse, err error) {
    return c.UninstallEksLogAgentWithContext(context.Background(), request)
}

// UninstallEksLogAgent
// 卸载弹性集群的日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) UninstallEksLogAgentWithContext(ctx context.Context, request *UninstallEksLogAgentRequest) (response *UninstallEksLogAgentResponse, err error) {
    if request == nil {
        request = NewUninstallEksLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallEksLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallEksLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallLogAgentRequest() (request *UninstallLogAgentRequest) {
    request = &UninstallLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallLogAgent")
    
    
    return
}

func NewUninstallLogAgentResponse() (response *UninstallLogAgentResponse) {
    response = &UninstallLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallLogAgent
// 从TKE集群中卸载CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) UninstallLogAgent(request *UninstallLogAgentRequest) (response *UninstallLogAgentResponse, err error) {
    return c.UninstallLogAgentWithContext(context.Background(), request)
}

// UninstallLogAgent
// 从TKE集群中卸载CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) UninstallLogAgentWithContext(ctx context.Context, request *UninstallLogAgentRequest) (response *UninstallLogAgentResponse, err error) {
    if request == nil {
        request = NewUninstallLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewUninstallTDCCLogAgentRequest() (request *UninstallTDCCLogAgentRequest) {
    request = &UninstallTDCCLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UninstallTDCCLogAgent")
    
    
    return
}

func NewUninstallTDCCLogAgentResponse() (response *UninstallTDCCLogAgentResponse) {
    response = &UninstallTDCCLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UninstallTDCCLogAgent
// 卸载注册集群的日志采集组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) UninstallTDCCLogAgent(request *UninstallTDCCLogAgentRequest) (response *UninstallTDCCLogAgentResponse, err error) {
    return c.UninstallTDCCLogAgentWithContext(context.Background(), request)
}

// UninstallTDCCLogAgent
// 卸载注册集群的日志采集组件
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCENOTFOUND_CLUSTERNOTFOUND = "ResourceNotFound.ClusterNotFound"
func (c *Client) UninstallTDCCLogAgentWithContext(ctx context.Context, request *UninstallTDCCLogAgentRequest) (response *UninstallTDCCLogAgentResponse, err error) {
    if request == nil {
        request = NewUninstallTDCCLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UninstallTDCCLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewUninstallTDCCLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateClusterInstancesRequest() (request *UpdateClusterInstancesRequest) {
    request = &UpdateClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateClusterInstances")
    
    
    return
}

func NewUpdateClusterInstancesResponse() (response *UpdateClusterInstancesResponse) {
    response = &UpdateClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateClusterInstances
// 集群节点k8s版本升级，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpdateClusterInstances(request *UpdateClusterInstancesRequest) (response *UpdateClusterInstancesResponse, err error) {
    return c.UpdateClusterInstancesWithContext(context.Background(), request)
}

// UpdateClusterInstances
// 集群节点k8s版本升级，API 3.0
//
// 可能返回的错误码:
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpdateClusterInstancesWithContext(ctx context.Context, request *UpdateClusterInstancesRequest) (response *UpdateClusterInstancesResponse, err error) {
    if request == nil {
        request = NewUpdateClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateClusterKubeconfigRequest() (request *UpdateClusterKubeconfigRequest) {
    request = &UpdateClusterKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateClusterKubeconfig")
    
    
    return
}

func NewUpdateClusterKubeconfigResponse() (response *UpdateClusterKubeconfigResponse) {
    response = &UpdateClusterKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateClusterKubeconfig
// 对集群的Kubeconfig信息进行更新
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) UpdateClusterKubeconfig(request *UpdateClusterKubeconfigRequest) (response *UpdateClusterKubeconfigResponse, err error) {
    return c.UpdateClusterKubeconfigWithContext(context.Background(), request)
}

// UpdateClusterKubeconfig
// 对集群的Kubeconfig信息进行更新
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_KUBERNETESPATCHOPERATIONERROR = "InternalError.KubernetesPatchOperationError"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
func (c *Client) UpdateClusterKubeconfigWithContext(ctx context.Context, request *UpdateClusterKubeconfigRequest) (response *UpdateClusterKubeconfigResponse, err error) {
    if request == nil {
        request = NewUpdateClusterKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateClusterKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateClusterKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateClusterVersionRequest() (request *UpdateClusterVersionRequest) {
    request = &UpdateClusterVersionRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateClusterVersion")
    
    
    return
}

func NewUpdateClusterVersionResponse() (response *UpdateClusterVersionResponse) {
    response = &UpdateClusterVersionResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateClusterVersion
// 升级集群 Master 组件到指定版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERUPGRADENODEVERSION = "InternalError.ClusterUpgradeNodeVersion"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) UpdateClusterVersion(request *UpdateClusterVersionRequest) (response *UpdateClusterVersionResponse, err error) {
    return c.UpdateClusterVersionWithContext(context.Background(), request)
}

// UpdateClusterVersion
// 升级集群 Master 组件到指定版本
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CLUSTERUPGRADENODEVERSION = "InternalError.ClusterUpgradeNodeVersion"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) UpdateClusterVersionWithContext(ctx context.Context, request *UpdateClusterVersionRequest) (response *UpdateClusterVersionResponse, err error) {
    if request == nil {
        request = NewUpdateClusterVersionRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateClusterVersion require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateClusterVersionResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateEKSClusterRequest() (request *UpdateEKSClusterRequest) {
    request = &UpdateEKSClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateEKSCluster")
    
    
    return
}

func NewUpdateEKSClusterResponse() (response *UpdateEKSClusterResponse) {
    response = &UpdateEKSClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateEKSCluster
// 修改弹性集群名称等属性 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEKSCluster(request *UpdateEKSClusterRequest) (response *UpdateEKSClusterResponse, err error) {
    return c.UpdateEKSClusterWithContext(context.Background(), request)
}

// UpdateEKSCluster
// 修改弹性集群名称等属性 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEKSClusterWithContext(ctx context.Context, request *UpdateEKSClusterRequest) (response *UpdateEKSClusterResponse, err error) {
    if request == nil {
        request = NewUpdateEKSClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateEKSCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateEKSClusterResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateEKSClusterKubeconfigRequest() (request *UpdateEKSClusterKubeconfigRequest) {
    request = &UpdateEKSClusterKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateEKSClusterKubeconfig")
    
    
    return
}

func NewUpdateEKSClusterKubeconfigResponse() (response *UpdateEKSClusterKubeconfigResponse) {
    response = &UpdateEKSClusterKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateEKSClusterKubeconfig
// 更新EKS集群的kubeconfig信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpdateEKSClusterKubeconfig(request *UpdateEKSClusterKubeconfigRequest) (response *UpdateEKSClusterKubeconfigResponse, err error) {
    return c.UpdateEKSClusterKubeconfigWithContext(context.Background(), request)
}

// UpdateEKSClusterKubeconfig
// 更新EKS集群的kubeconfig信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpdateEKSClusterKubeconfigWithContext(ctx context.Context, request *UpdateEKSClusterKubeconfigRequest) (response *UpdateEKSClusterKubeconfigResponse, err error) {
    if request == nil {
        request = NewUpdateEKSClusterKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateEKSClusterKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateEKSClusterKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateEKSContainerInstanceRequest() (request *UpdateEKSContainerInstanceRequest) {
    request = &UpdateEKSContainerInstanceRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateEKSContainerInstance")
    
    
    return
}

func NewUpdateEKSContainerInstanceResponse() (response *UpdateEKSContainerInstanceResponse) {
    response = &UpdateEKSContainerInstanceResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateEKSContainerInstance
// 更新容器实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEKSContainerInstance(request *UpdateEKSContainerInstanceRequest) (response *UpdateEKSContainerInstanceResponse, err error) {
    return c.UpdateEKSContainerInstanceWithContext(context.Background(), request)
}

// UpdateEKSContainerInstance
// 更新容器实例
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEKSContainerInstanceWithContext(ctx context.Context, request *UpdateEKSContainerInstanceRequest) (response *UpdateEKSContainerInstanceResponse, err error) {
    if request == nil {
        request = NewUpdateEKSContainerInstanceRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateEKSContainerInstance require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateEKSContainerInstanceResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateEdgeEniRequest() (request *UpdateEdgeEniRequest) {
    request = &UpdateEdgeEniRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateEdgeEni")
    
    
    return
}

func NewUpdateEdgeEniResponse() (response *UpdateEdgeEniResponse) {
    response = &UpdateEdgeEniResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateEdgeEni
// 更新边缘集群支持独立网卡的状态
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEdgeEni(request *UpdateEdgeEniRequest) (response *UpdateEdgeEniResponse, err error) {
    return c.UpdateEdgeEniWithContext(context.Background(), request)
}

// UpdateEdgeEni
// 更新边缘集群支持独立网卡的状态
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEdgeEniWithContext(ctx context.Context, request *UpdateEdgeEniRequest) (response *UpdateEdgeEniResponse, err error) {
    if request == nil {
        request = NewUpdateEdgeEniRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateEdgeEni require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateEdgeEniResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateEdgeSSHRequest() (request *UpdateEdgeSSHRequest) {
    request = &UpdateEdgeSSHRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateEdgeSSH")
    
    
    return
}

func NewUpdateEdgeSSHResponse() (response *UpdateEdgeSSHResponse) {
    response = &UpdateEdgeSSHResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateEdgeSSH
// 控制边缘集群是否支持SSH登录内网节点
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEdgeSSH(request *UpdateEdgeSSHRequest) (response *UpdateEdgeSSHResponse, err error) {
    return c.UpdateEdgeSSHWithContext(context.Background(), request)
}

// UpdateEdgeSSH
// 控制边缘集群是否支持SSH登录内网节点
//
// 可能返回的错误码:
//  AUTHFAILURE = "AuthFailure"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_RESOURCENOTFOUND = "InvalidParameter.ResourceNotFound"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateEdgeSSHWithContext(ctx context.Context, request *UpdateEdgeSSHRequest) (response *UpdateEdgeSSHResponse, err error) {
    if request == nil {
        request = NewUpdateEdgeSSHRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateEdgeSSH require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateEdgeSSHResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateExternalClusterInternalRequest() (request *UpdateExternalClusterInternalRequest) {
    request = &UpdateExternalClusterInternalRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateExternalClusterInternal")
    
    
    return
}

func NewUpdateExternalClusterInternalResponse() (response *UpdateExternalClusterInternalResponse) {
    response = &UpdateExternalClusterInternalResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateExternalClusterInternal
// 修改第三方集群信息（内部调用）
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) UpdateExternalClusterInternal(request *UpdateExternalClusterInternalRequest) (response *UpdateExternalClusterInternalResponse, err error) {
    return c.UpdateExternalClusterInternalWithContext(context.Background(), request)
}

// UpdateExternalClusterInternal
// 修改第三方集群信息（内部调用）
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  RESOURCENOTFOUND = "ResourceNotFound"
func (c *Client) UpdateExternalClusterInternalWithContext(ctx context.Context, request *UpdateExternalClusterInternalRequest) (response *UpdateExternalClusterInternalResponse, err error) {
    if request == nil {
        request = NewUpdateExternalClusterInternalRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateExternalClusterInternal require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateExternalClusterInternalResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateGrayScaleDeploymentGridRequest() (request *UpdateGrayScaleDeploymentGridRequest) {
    request = &UpdateGrayScaleDeploymentGridRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateGrayScaleDeploymentGrid")
    
    
    return
}

func NewUpdateGrayScaleDeploymentGridResponse() (response *UpdateGrayScaleDeploymentGridResponse) {
    response = &UpdateGrayScaleDeploymentGridResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateGrayScaleDeploymentGrid
// 灰度DeploymentGrid
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateGrayScaleDeploymentGrid(request *UpdateGrayScaleDeploymentGridRequest) (response *UpdateGrayScaleDeploymentGridResponse, err error) {
    return c.UpdateGrayScaleDeploymentGridWithContext(context.Background(), request)
}

// UpdateGrayScaleDeploymentGrid
// 灰度DeploymentGrid
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateGrayScaleDeploymentGridWithContext(ctx context.Context, request *UpdateGrayScaleDeploymentGridRequest) (response *UpdateGrayScaleDeploymentGridResponse, err error) {
    if request == nil {
        request = NewUpdateGrayScaleDeploymentGridRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateGrayScaleDeploymentGrid require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateGrayScaleDeploymentGridResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateGrayScaleStatefulSetGridRequest() (request *UpdateGrayScaleStatefulSetGridRequest) {
    request = &UpdateGrayScaleStatefulSetGridRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateGrayScaleStatefulSetGrid")
    
    
    return
}

func NewUpdateGrayScaleStatefulSetGridResponse() (response *UpdateGrayScaleStatefulSetGridResponse) {
    response = &UpdateGrayScaleStatefulSetGridResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateGrayScaleStatefulSetGrid
// 灰度StatefulSetGrid
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateGrayScaleStatefulSetGrid(request *UpdateGrayScaleStatefulSetGridRequest) (response *UpdateGrayScaleStatefulSetGridResponse, err error) {
    return c.UpdateGrayScaleStatefulSetGridWithContext(context.Background(), request)
}

// UpdateGrayScaleStatefulSetGrid
// 灰度StatefulSetGrid
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateGrayScaleStatefulSetGridWithContext(ctx context.Context, request *UpdateGrayScaleStatefulSetGridRequest) (response *UpdateGrayScaleStatefulSetGridResponse, err error) {
    if request == nil {
        request = NewUpdateGrayScaleStatefulSetGridRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateGrayScaleStatefulSetGrid require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateGrayScaleStatefulSetGridResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateImageCacheRequest() (request *UpdateImageCacheRequest) {
    request = &UpdateImageCacheRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateImageCache")
    
    
    return
}

func NewUpdateImageCacheResponse() (response *UpdateImageCacheResponse) {
    response = &UpdateImageCacheResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateImageCache
// 更新镜像缓存接口
//
// 可能返回的错误码:
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateImageCache(request *UpdateImageCacheRequest) (response *UpdateImageCacheResponse, err error) {
    return c.UpdateImageCacheWithContext(context.Background(), request)
}

// UpdateImageCache
// 更新镜像缓存接口
//
// 可能返回的错误码:
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateImageCacheWithContext(ctx context.Context, request *UpdateImageCacheRequest) (response *UpdateImageCacheResponse, err error) {
    if request == nil {
        request = NewUpdateImageCacheRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateImageCache require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateImageCacheResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateImageRegistryCredentialRequest() (request *UpdateImageRegistryCredentialRequest) {
    request = &UpdateImageRegistryCredentialRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateImageRegistryCredential")
    
    
    return
}

func NewUpdateImageRegistryCredentialResponse() (response *UpdateImageRegistryCredentialResponse) {
    response = &UpdateImageRegistryCredentialResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateImageRegistryCredential
// 更新镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateImageRegistryCredential(request *UpdateImageRegistryCredentialRequest) (response *UpdateImageRegistryCredentialResponse, err error) {
    return c.UpdateImageRegistryCredentialWithContext(context.Background(), request)
}

// UpdateImageRegistryCredential
// 更新镜像仓库凭证接口
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateImageRegistryCredentialWithContext(ctx context.Context, request *UpdateImageRegistryCredentialRequest) (response *UpdateImageRegistryCredentialResponse, err error) {
    if request == nil {
        request = NewUpdateImageRegistryCredentialRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateImageRegistryCredential require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateImageRegistryCredentialResponse()
    err = c.Send(request, response)
    return
}

func NewUpdatePodRequest() (request *UpdatePodRequest) {
    request = &UpdatePodRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdatePod")
    
    
    return
}

func NewUpdatePodResponse() (response *UpdatePodResponse) {
    response = &UpdatePodResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdatePod
// UpdatePod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpdatePod(request *UpdatePodRequest) (response *UpdatePodResponse, err error) {
    return c.UpdatePodWithContext(context.Background(), request)
}

// UpdatePod
// UpdatePod
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpdatePodWithContext(ctx context.Context, request *UpdatePodRequest) (response *UpdatePodResponse, err error) {
    if request == nil {
        request = NewUpdatePodRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdatePod require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdatePodResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateTDCCClusterKubeconfigRequest() (request *UpdateTDCCClusterKubeconfigRequest) {
    request = &UpdateTDCCClusterKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateTDCCClusterKubeconfig")
    
    
    return
}

func NewUpdateTDCCClusterKubeconfigResponse() (response *UpdateTDCCClusterKubeconfigResponse) {
    response = &UpdateTDCCClusterKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateTDCCClusterKubeconfig
// 更新注册集群的kubeconfig信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpdateTDCCClusterKubeconfig(request *UpdateTDCCClusterKubeconfigRequest) (response *UpdateTDCCClusterKubeconfigResponse, err error) {
    return c.UpdateTDCCClusterKubeconfigWithContext(context.Background(), request)
}

// UpdateTDCCClusterKubeconfig
// 更新注册集群的kubeconfig信息
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpdateTDCCClusterKubeconfigWithContext(ctx context.Context, request *UpdateTDCCClusterKubeconfigRequest) (response *UpdateTDCCClusterKubeconfigResponse, err error) {
    if request == nil {
        request = NewUpdateTDCCClusterKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateTDCCClusterKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateTDCCClusterKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateTDCCExternalClusterRequest() (request *UpdateTDCCExternalClusterRequest) {
    request = &UpdateTDCCExternalClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateTDCCExternalCluster")
    
    
    return
}

func NewUpdateTDCCExternalClusterResponse() (response *UpdateTDCCExternalClusterResponse) {
    response = &UpdateTDCCExternalClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateTDCCExternalCluster
// 修改注册集群信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) UpdateTDCCExternalCluster(request *UpdateTDCCExternalClusterRequest) (response *UpdateTDCCExternalClusterResponse, err error) {
    return c.UpdateTDCCExternalClusterWithContext(context.Background(), request)
}

// UpdateTDCCExternalCluster
// 修改注册集群信息
//
// 可能返回的错误码:
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
func (c *Client) UpdateTDCCExternalClusterWithContext(ctx context.Context, request *UpdateTDCCExternalClusterRequest) (response *UpdateTDCCExternalClusterResponse, err error) {
    if request == nil {
        request = NewUpdateTDCCExternalClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateTDCCExternalCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateTDCCExternalClusterResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateTKEEdgeClusterRequest() (request *UpdateTKEEdgeClusterRequest) {
    request = &UpdateTKEEdgeClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateTKEEdgeCluster")
    
    
    return
}

func NewUpdateTKEEdgeClusterResponse() (response *UpdateTKEEdgeClusterResponse) {
    response = &UpdateTKEEdgeClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateTKEEdgeCluster
// 修改边缘计算集群名称等属性 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateTKEEdgeCluster(request *UpdateTKEEdgeClusterRequest) (response *UpdateTKEEdgeClusterResponse, err error) {
    return c.UpdateTKEEdgeClusterWithContext(context.Background(), request)
}

// UpdateTKEEdgeCluster
// 修改边缘计算集群名称等属性 
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateTKEEdgeClusterWithContext(ctx context.Context, request *UpdateTKEEdgeClusterRequest) (response *UpdateTKEEdgeClusterResponse, err error) {
    if request == nil {
        request = NewUpdateTKEEdgeClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateTKEEdgeCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateTKEEdgeClusterResponse()
    err = c.Send(request, response)
    return
}

func NewUpdateTKEEdgeExternalKubeconfigRequest() (request *UpdateTKEEdgeExternalKubeconfigRequest) {
    request = &UpdateTKEEdgeExternalKubeconfigRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpdateTKEEdgeExternalKubeconfig")
    
    
    return
}

func NewUpdateTKEEdgeExternalKubeconfigResponse() (response *UpdateTKEEdgeExternalKubeconfigResponse) {
    response = &UpdateTKEEdgeExternalKubeconfigResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpdateTKEEdgeExternalKubeconfig
// 更新边缘计算外部访问的kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateTKEEdgeExternalKubeconfig(request *UpdateTKEEdgeExternalKubeconfigRequest) (response *UpdateTKEEdgeExternalKubeconfigResponse, err error) {
    return c.UpdateTKEEdgeExternalKubeconfigWithContext(context.Background(), request)
}

// UpdateTKEEdgeExternalKubeconfig
// 更新边缘计算外部访问的kubeconfig
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  LIMITEXCEEDED = "LimitExceeded"
//  MISSINGPARAMETER = "MissingParameter"
//  RESOURCEINUSE = "ResourceInUse"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  RESOURCEUNAVAILABLE = "ResourceUnavailable"
//  UNAUTHORIZEDOPERATION = "UnauthorizedOperation"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpdateTKEEdgeExternalKubeconfigWithContext(ctx context.Context, request *UpdateTKEEdgeExternalKubeconfigRequest) (response *UpdateTKEEdgeExternalKubeconfigResponse, err error) {
    if request == nil {
        request = NewUpdateTKEEdgeExternalKubeconfigRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpdateTKEEdgeExternalKubeconfig require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpdateTKEEdgeExternalKubeconfigResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeClusterAuthorizationModeRequest() (request *UpgradeClusterAuthorizationModeRequest) {
    request = &UpgradeClusterAuthorizationModeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeClusterAuthorizationMode")
    
    
    return
}

func NewUpgradeClusterAuthorizationModeResponse() (response *UpgradeClusterAuthorizationModeResponse) {
    response = &UpgradeClusterAuthorizationModeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeClusterAuthorizationMode
// 升级授权模式为RBAC，默认的授权模式是子账户拉取kubeconfig都为admin token，且访问集群内Kubernetes资源时，不做鉴权，升级为RBAC之后，可以提升集群安全性及权限的细粒度控制
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpgradeClusterAuthorizationMode(request *UpgradeClusterAuthorizationModeRequest) (response *UpgradeClusterAuthorizationModeResponse, err error) {
    return c.UpgradeClusterAuthorizationModeWithContext(context.Background(), request)
}

// UpgradeClusterAuthorizationMode
// 升级授权模式为RBAC，默认的授权模式是子账户拉取kubeconfig都为admin token，且访问集群内Kubernetes资源时，不做鉴权，升级为RBAC之后，可以提升集群安全性及权限的细粒度控制
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpgradeClusterAuthorizationModeWithContext(ctx context.Context, request *UpgradeClusterAuthorizationModeRequest) (response *UpgradeClusterAuthorizationModeResponse, err error) {
    if request == nil {
        request = NewUpgradeClusterAuthorizationModeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeClusterAuthorizationMode require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeClusterAuthorizationModeResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeClusterInstancesRequest() (request *UpgradeClusterInstancesRequest) {
    request = &UpgradeClusterInstancesRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeClusterInstances")
    
    
    return
}

func NewUpgradeClusterInstancesResponse() (response *UpgradeClusterInstancesResponse) {
    response = &UpgradeClusterInstancesResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeClusterInstances
// 给集群的一批work节点进行升级 
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKALREADYRUNNING = "InternalError.TaskAlreadyRunning"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) UpgradeClusterInstances(request *UpgradeClusterInstancesRequest) (response *UpgradeClusterInstancesResponse, err error) {
    return c.UpgradeClusterInstancesWithContext(context.Background(), request)
}

// UpgradeClusterInstances
// 给集群的一批work节点进行升级 
//
// 可能返回的错误码:
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_TASKALREADYRUNNING = "InternalError.TaskAlreadyRunning"
//  INTERNALERROR_TASKLIFESTATEERROR = "InternalError.TaskLifeStateError"
//  INTERNALERROR_TASKNOTFOUND = "InternalError.TaskNotFound"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) UpgradeClusterInstancesWithContext(ctx context.Context, request *UpgradeClusterInstancesRequest) (response *UpgradeClusterInstancesResponse, err error) {
    if request == nil {
        request = NewUpgradeClusterInstancesRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeClusterInstances require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeClusterInstancesResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeClusterReleaseRequest() (request *UpgradeClusterReleaseRequest) {
    request = &UpgradeClusterReleaseRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeClusterRelease")
    
    
    return
}

func NewUpgradeClusterReleaseResponse() (response *UpgradeClusterReleaseResponse) {
    response = &UpgradeClusterReleaseResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeClusterRelease
// 在应用市场中集群升级应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpgradeClusterRelease(request *UpgradeClusterReleaseRequest) (response *UpgradeClusterReleaseResponse, err error) {
    return c.UpgradeClusterReleaseWithContext(context.Background(), request)
}

// UpgradeClusterRelease
// 在应用市场中集群升级应用
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_MARKETGETAUTHFAILED = "InternalError.MarketGetAuthFailed"
//  INTERNALERROR_MARKETINTERNALSERVERERROR = "InternalError.MarketInternalServerError"
//  INTERNALERROR_MARKETRELEASEOPERATION = "InternalError.MarketReleaseOperation"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  MISSINGPARAMETER = "MissingParameter"
//  UNKNOWNPARAMETER = "UnknownParameter"
func (c *Client) UpgradeClusterReleaseWithContext(ctx context.Context, request *UpgradeClusterReleaseRequest) (response *UpgradeClusterReleaseResponse, err error) {
    if request == nil {
        request = NewUpgradeClusterReleaseRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeClusterRelease require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeClusterReleaseResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeEKSClusterAuthorizationModeRequest() (request *UpgradeEKSClusterAuthorizationModeRequest) {
    request = &UpgradeEKSClusterAuthorizationModeRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeEKSClusterAuthorizationMode")
    
    
    return
}

func NewUpgradeEKSClusterAuthorizationModeResponse() (response *UpgradeEKSClusterAuthorizationModeResponse) {
    response = &UpgradeEKSClusterAuthorizationModeResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeEKSClusterAuthorizationMode
// 升级EKS集群授权模式为RBAC，默认的授权模式是子账户拉取kubeconfig都为admin token，且访问集群内Kubernetes资源时，不做鉴权，升级为RBAC之后，可以提升集群安全性及权限的细粒度控制
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpgradeEKSClusterAuthorizationMode(request *UpgradeEKSClusterAuthorizationModeRequest) (response *UpgradeEKSClusterAuthorizationModeResponse, err error) {
    return c.UpgradeEKSClusterAuthorizationModeWithContext(context.Background(), request)
}

// UpgradeEKSClusterAuthorizationMode
// 升级EKS集群授权模式为RBAC，默认的授权模式是子账户拉取kubeconfig都为admin token，且访问集群内Kubernetes资源时，不做鉴权，升级为RBAC之后，可以提升集群安全性及权限的细粒度控制
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpgradeEKSClusterAuthorizationModeWithContext(ctx context.Context, request *UpgradeEKSClusterAuthorizationModeRequest) (response *UpgradeEKSClusterAuthorizationModeResponse, err error) {
    if request == nil {
        request = NewUpgradeEKSClusterAuthorizationModeRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeEKSClusterAuthorizationMode require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeEKSClusterAuthorizationModeResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeLogAgentRequest() (request *UpgradeLogAgentRequest) {
    request = &UpgradeLogAgentRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeLogAgent")
    
    
    return
}

func NewUpgradeLogAgentResponse() (response *UpgradeLogAgentResponse) {
    response = &UpgradeLogAgentResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeLogAgent
// 在TKE集群中升级CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpgradeLogAgent(request *UpgradeLogAgentRequest) (response *UpgradeLogAgentResponse, err error) {
    return c.UpgradeLogAgentWithContext(context.Background(), request)
}

// UpgradeLogAgent
// 在TKE集群中升级CLS日志采集组件
//
// 可能返回的错误码:
//  INTERNALERROR = "InternalError"
//  INVALIDPARAMETER = "InvalidParameter"
//  RESOURCENOTFOUND = "ResourceNotFound"
//  UNAUTHORIZEDOPERATION_CAMNOAUTH = "UnauthorizedOperation.CamNoAuth"
//  UNKNOWNPARAMETER = "UnknownParameter"
//  UNSUPPORTEDOPERATION = "UnsupportedOperation"
func (c *Client) UpgradeLogAgentWithContext(ctx context.Context, request *UpgradeLogAgentRequest) (response *UpgradeLogAgentResponse, err error) {
    if request == nil {
        request = NewUpgradeLogAgentRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeLogAgent require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeLogAgentResponse()
    err = c.Send(request, response)
    return
}

func NewUpgradeVipVirtualClusterRequest() (request *UpgradeVipVirtualClusterRequest) {
    request = &UpgradeVipVirtualClusterRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "UpgradeVipVirtualCluster")
    
    
    return
}

func NewUpgradeVipVirtualClusterResponse() (response *UpgradeVipVirtualClusterResponse) {
    response = &UpgradeVipVirtualClusterResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// UpgradeVipVirtualCluster
// 集群升级Vip接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpgradeVipVirtualCluster(request *UpgradeVipVirtualClusterRequest) (response *UpgradeVipVirtualClusterResponse, err error) {
    return c.UpgradeVipVirtualClusterWithContext(context.Background(), request)
}

// UpgradeVipVirtualCluster
// 集群升级Vip接口
//
// 可能返回的错误码:
//  FAILEDOPERATION = "FailedOperation"
//  INTERNALERROR = "InternalError"
//  INTERNALERROR_ACCOUNTUSERNOTAUTHENTICATED = "InternalError.AccountUserNotAuthenticated"
//  INTERNALERROR_CAMNOAUTH = "InternalError.CamNoAuth"
//  INTERNALERROR_CLUSTERNOTFOUND = "InternalError.ClusterNotFound"
//  INTERNALERROR_CMDTIMEOUT = "InternalError.CmdTimeout"
//  INTERNALERROR_DB = "InternalError.Db"
//  INTERNALERROR_PARAM = "InternalError.Param"
//  INTERNALERROR_QUOTAMAXCLSLIMIT = "InternalError.QuotaMaxClsLimit"
//  INTERNALERROR_UNEXCEPTEDINTERNAL = "InternalError.UnexceptedInternal"
//  INVALIDPARAMETER = "InvalidParameter"
func (c *Client) UpgradeVipVirtualClusterWithContext(ctx context.Context, request *UpgradeVipVirtualClusterRequest) (response *UpgradeVipVirtualClusterResponse, err error) {
    if request == nil {
        request = NewUpgradeVipVirtualClusterRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("UpgradeVipVirtualCluster require credential")
    }

    request.SetContext(ctx)
    
    response = NewUpgradeVipVirtualClusterResponse()
    err = c.Send(request, response)
    return
}

func NewValidateClusterAddVirtualNodeConditionsRequest() (request *ValidateClusterAddVirtualNodeConditionsRequest) {
    request = &ValidateClusterAddVirtualNodeConditionsRequest{
        BaseRequest: &tchttp.BaseRequest{},
    }
    request.Init().WithApiInfo("tke", APIVersion, "ValidateClusterAddVirtualNodeConditions")
    
    
    return
}

func NewValidateClusterAddVirtualNodeConditionsResponse() (response *ValidateClusterAddVirtualNodeConditionsResponse) {
    response = &ValidateClusterAddVirtualNodeConditionsResponse{
        BaseResponse: &tchttp.BaseResponse{},
    }
    return
}

// ValidateClusterAddVirtualNodeConditions
// 校验集群添加虚拟节点条件
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) ValidateClusterAddVirtualNodeConditions(request *ValidateClusterAddVirtualNodeConditionsRequest) (response *ValidateClusterAddVirtualNodeConditionsResponse, err error) {
    return c.ValidateClusterAddVirtualNodeConditionsWithContext(context.Background(), request)
}

// ValidateClusterAddVirtualNodeConditions
// 校验集群添加虚拟节点条件
//
// 可能返回的错误码:
//  INTERNALERROR_KUBECLIENTCONNECTION = "InternalError.KubeClientConnection"
//  INTERNALERROR_UNEXPECTEDINTERNAL = "InternalError.UnexpectedInternal"
//  INVALIDPARAMETER_PARAM = "InvalidParameter.Param"
//  RESOURCEUNAVAILABLE_CLUSTERSTATE = "ResourceUnavailable.ClusterState"
func (c *Client) ValidateClusterAddVirtualNodeConditionsWithContext(ctx context.Context, request *ValidateClusterAddVirtualNodeConditionsRequest) (response *ValidateClusterAddVirtualNodeConditionsResponse, err error) {
    if request == nil {
        request = NewValidateClusterAddVirtualNodeConditionsRequest()
    }
    
    if c.GetCredential() == nil {
        return nil, errors.New("ValidateClusterAddVirtualNodeConditions require credential")
    }

    request.SetContext(ctx)
    
    response = NewValidateClusterAddVirtualNodeConditionsResponse()
    err = c.Send(request, response)
    return
}
